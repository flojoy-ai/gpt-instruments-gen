,"Yearly revenue (millions, USD)",Vendor headquarters,Device Description,Device,Field 1,Vendor wikipedia or cruncbase description,Library,Vendor,Vendor logo,Vendor website,ChatGPT prompt,Category description link,Device Category,Category Description,Corrected device name,Device datasheet (PDF),Device picture,Device Description Link,GitHub link to Python driver (NOT LINK TO DOCS ON GITHUB),Python docs link,Device Price,ChatGPT code,Obsolete,Notes,docstring
2,41.3,"CJ Delft, Netherlands","The D5a module contains 16 18-bit DACs (Digital to Analog Converters), initially created for setting gate-voltages on samples. In contrast to most commercial units, there are no processor or clock circuits present in this module. This to prevent interference. The only time any digital signals are present is when the DAC values are being changed. Afterwards the module goes back to being static. The DAC values are set via the controller module. As this module is generally used for gate voltage control, the use of an isolated controller module (C1b/C2 combination) is recommended.

",D5A,436.0,"At QuTech, we work on a radically new technology with world-changing potential. Our mission: to develop scalable prototypes of a quantum computer and an inherently safe quantum internet, based on the fundamental laws of quantum mechanics.
",Qcodes Community,Qutech,"[OrderedDict([('id', 'atttaTZUsXgNNgwbC'), ('width', 1504), ('height', 747), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RKC6g3qCsb7JlOEKd8pGhg/gUoncvmvaSr7ZkO-YvuMFw_HfmvhNK_3nj44uVJrOXdCE_YpscwSK6SM2WXwR-0KYP6faNUsTfV4rq_QWleBMqhEaUMhLUC1tgdF2C22mBE/kI3WrO11fnm23PjSBDA0OIsqBO6LHqwXQ3huop_Ag2g'), ('filename', 'QuTech_Main_rgb.jpg'), ('size', 158522), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GAO-iIvbz0A8L-V2yztQGA/FCtruksdQ2Q6srrhGiwgoVVF3AeuSBQ3uNTbyiELwsOWzdExn74Qwu_PF6D6WjqI9gPjl-YCas6da4IXlMC6MQ/k4tJSzhQhfVv0d9gPSWJJ-fksIeYJRmUH68XX5I2PuQ'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KsjRTv1rhseXNm1_RtLk5A/iuV4HMfRxlUUUiLhccAd5H1WREcmLIApSygRmprmfgGs9yMXyYe3q_dZfEAfpSAfwLYQKR7GaVVHuo1UTete-w/7COlOkNModL_5MKY4ECyxVxde5O4qnKbhzkh9izju2A'), ('width', 1031), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vh5BpaV2gyhY3kOSAvq-ag/N8KfAOufo8Ghs6K4W1HIaasEWiYmkDoaiwwLHuSHP5UT7JTfSyhvbUSbBphdoBLA1BiBSDdKw5usJSo-WYhpjw/KtlR-7u5DaYUBKhRsOmxynfnGDx_p7Ip2JM7JCeQHec'), ('width', 3000), ('height', 3000)]))]))])]",https://qutech.nl/,Write a Python script that uses Qcodes Community to connect to a D5a Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",D5a,could not find,"[OrderedDict([('id', 'attN3qKogpCndO3Cx'), ('width', 250), ('height', 1011), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7KNObk-ro6GjyzkpuC8Mcg/JRe5jjXcCPb30kRT3jaxWAppqHhzGiKDfzSnfeu8nw18SLoR4u4GF_Lpuy1wvS2QRQKB9E_YK-R2zDSTS1cJ4mbUtmSkUb5beCkxGgT-aSU/GR1XttiVbKgF5WjBkgAMwhdSPqu8nyTDcSx0-PFIPCc'), ('filename', 'FrontD5a.png'), ('size', 297423), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-7X7REpJ3TmpleHu4EJl_w/oTamAgSF7ooSJN9zQ8I3oqxOnmQAfehGvz_4M7mq6J2tUAdfBRpJcY8Qro0izmz6P7eyAVrAMHQkQXKWZ7BiOg/--_A2X0ee3jkvpvrlhFUmid41TOLsBjYyFnEn3QIhrE'), ('width', 9), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/kYnfc3ch7DJTC8V6McX5SA/6ItUesesAPLHtaHQgCJHzVXWajvFJaqt9hXHTiEMPummLlwLREYRm4yMaznArVHzjXGqFUWwwsVoqy8I5bFJiw/ev1xxX-5Z_Bi_Sy0bSHJwtSIkMnVEVAIddah3sN1oVg'), ('width', 250), ('height', 1011)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_wIvVWaclVPcKnHH8OPCCQ/A_BPK2V0MlJquYzPw0MScsrAPOz_M63p4mTJhHbe4q8mIpQVrd8ZoxbUCDTdGy1XKqvPOR_Zqpv3WNkgUL4mvg/FTlMXclrHZtYUqZWk3kTsBa_6g7dlbppHJpdKjY_Iow'), ('width', 3000), ('height', 3000)]))]))])]",https://qtwork.tudelft.nl/~mtiggelman/modules/v-source/d5a.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QuTech/D5a.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QuTech.html#module-qcodes_contrib_drivers.drivers.QuTech.D5a,,,,,"from qcodes.instrument.base import Instrument
from qcodes.utils.validators import Enum, Numbers

try:
    from spirack import D5a_module
except ImportError:
    raise ImportError(('The D5a_module class could not be found. '
                       'Try installing it using pip install spirack'))

from functools import partial


class D5a(Instrument):
    """"""
    Qcodes driver for the D5a DAC SPI-rack module.

    functions:
    -   set_dacs_zero   set all DACs to zero voltage

    parameters:
    -   dacN:       get and set DAC voltage
    -   stepsizeN   get the minimum step size corresponding to the span
    -   spanN       get and set the DAC span: '4v uni', '4v bi', or '2.5v bi'

    where N is the DAC number from 1 up to 16

    """"""

    def __init__(self, name, spi_rack, module, inter_delay=0.1, dac_step=10e-3,
                 reset_voltages=False, mV=False, number_dacs=16, **kwargs):
        """""" Create instrument for the D5a module.

        The D5a module works with volts as units. For backward compatibility
        there is the option to allow mV for the dacX parameters.

        The output span of the DAC module can be changed with the spanX
        command. Be carefull when executing this command with a sample
        connected as voltage jumps can occur.

        Args:
            name (str): name of the instrument.

            spi_rack (SPI_rack): instance of the SPI_rack class as defined in
                the spirack package. This class manages communication with the
                individual modules.

            module (int): module number as set on the hardware.
            inter_delay (float): time in seconds, passed to dac parameters of the object
            dac_step (float): max step size (V or mV), passed to dac parameters of the object
            reset_voltages (bool): passed to D5a_module constructor
            mV (bool): if True, then use mV as units in the dac parameters
            number_dacs (int): number of DACs available. This is 8 for the D5mux
        """"""
        super().__init__(name, **kwargs)

        self.d5a = D5a_module(spi_rack, module, reset_voltages=reset_voltages)
        self._number_dacs = number_dacs

        self._span_set_map = {
            '4v uni': 0,
            '4v bi': 2,
            '2v bi': 4,
        }

        self._span_get_map = {v: k for k, v in self._span_set_map.items()}

        self.add_function('set_dacs_zero', call_cmd=self._set_dacs_zero,
                          docstring='Reset all dacs to zero voltage. No ramping is performed.')

        if mV:
            self._gain = 1e3
            unit = 'mV'
        else:
            self._gain = 1
            unit = 'V'

        for i in range(self._number_dacs):
            validator = self._get_validator(i)

            self.add_parameter('dac{}'.format(i + 1),
                               label='DAC {}'.format(i + 1),
                               get_cmd=partial(self._get_dac, i),
                               set_cmd=partial(self._set_dac, i),
                               unit=unit,
                               vals=validator,
                               step=dac_step,
                               inter_delay=inter_delay)

            self.add_parameter('stepsize{}'.format(i + 1),
                               get_cmd=partial(self.d5a.get_stepsize, i),
                               unit='V',
                               docstring='Returns the smallest voltage step of the DAC.')

            self.add_parameter('span{}'.format(i + 1),
                               get_cmd=partial(self._get_span, i),
                               set_cmd=partial(self._set_span, i),
                               vals=Enum(*self._span_set_map.keys()),
                               docstring='Change the output span of the DAC. This command also updates the validator.')

    def set_dac_unit(self, unit: str) -> None:
        """"""Set the unit of dac parameters""""""
        allowed_values = Enum('mV', 'V')
        allowed_values.validate(unit)
        self._gain = {'V': 1, 'mV': 1e3}[unit]
        for i in range(1, self._number_dacs + 1):
            setattr(self.parameters[f'dac{i}'], 'unit', unit)
            setattr(self.parameters[f'dac{i}'], 'vals', self._get_validator(i - 1))

    def _set_dacs_zero(self):
        for i in range(self._number_dacs):
            self._set_dac(i, 0.0)

    def _set_dac(self, dac, value):
        return self.d5a.set_voltage(dac, value / self._gain)

    def _get_dac(self, dac):
        return self._gain * self.d5a.voltages[dac]

    def _get_span(self, dac):
        return self._span_get_map[self.d5a.span[dac]]

    def _set_span(self, dac, span_str):
        self.d5a.change_span_update(dac, self._span_set_map[span_str])
        self.parameters['dac{}'.format(
            dac + 1)].vals = self._get_validator(dac)

    def _get_validator(self, dac):
        span = self.d5a.span[dac]
        if span == D5a_module.range_2V_bi:
            validator = Numbers(-2 * self._gain, 2 * self._gain)
        elif span == D5a_module.range_4V_bi:
            validator = Numbers(-4 * self._gain, 4 * self._gain)
        elif span == D5a_module.range_4V_uni:
            validator = Numbers(0, 4 * self._gain)
        else:
            msg = 'The found DAC span of {} does not correspond to a known one'
            raise Exception(msg.format(span))

        return validator
"
3,5.0,USA,"The LDA-802Q Digital Attenuator is a 4-channel high dynamic range, bidirectional, 50 Ohm step attenuator. The LDA-802Q provides 120 dB of attenuation control range from 200 to 8000 MHz with a step size of 0.1 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-802Q ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-802Q,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'att3LDHenICPFoo4H'), ('width', 336), ('height', 336), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uIlmAzRB6Rqll82qRqt92A/7lycyRwdQULa9aO_k46m3z4RtPO9A_MS1ZaZZmF9Z59DgiU1woGYW5KAQ9XAxuKg66Tr44KTKElZaglAU5A8M6qd8g4IhCT-hB56W_lLuiA/XAHAoI_sR_uwfDfwtZgEWgovrQnXCFoePHkprxRLolI'), ('filename', 'vaunix-lda802-q.png'), ('size', 137129), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/erL2kt-7cKcHmJ2VuNlW8w/i-_xdrDhdsEzjgizC0cwTb_sZf1ei2vDq--ERP8G3ObBRy_sXe3fUoz9xPF9OTiKFNl5qi2MXu2VDx3xyn71fg/PNubcQ6B9gJbq0qXeZ5HRF-QwD3TAkOqptCX1NZzSII'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/WYt3TXE1D5NqkpBtJ6yszg/38TGovlYYqZ01XFS6mC-ufLFIt6rJf28kCK1-EHaz0GWivVoIYO3dnQV3m1p9S3KJJ9051NaCyqnRpsoNdY41g/wWxgXJHSQ2X_T-E-H1sEg3Fd8iT7T4QOMDzMQG_x5-4'), ('width', 336), ('height', 336)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/BAFAY-qCSOZ-SwFmk4pepg/2s9o4A-JfmCGLHZQvyw0apAImpzkT7Gm5QIO78ptx8efr-gKWYRFc8Vf32GFvunj_tfL44VYBpoTOu8B_HCMcA/UM8fmgVXN7wVmsWu_aKyPj2Z2mYPtz0fzIxueTxlQBk'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-802q-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,2995.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
15,2500.0,"Munich, Germany","The R&S® HMC8041 offers a wide range of logging functions, an integrated energy meter and electronic fuses that can be individually combined for each channel, making it ideal for hardware developers, labs and industrial environments. Linear switching power supplies ensure high efficiency, for minimum heat dissipation even at full load.",HMC 8041,485.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.batronix.com/pdf/Rohde-Schwarz/HMC804X/HMC804X_Datasheet_DE.pdf,"[OrderedDict([('id', 'attfUxU1WRSQ3qyCD'), ('width', 640), ('height', 360), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LeIZHCPrBCSaDbkb1xihqg/yfNTqjMgW7_OptXLQkqEaV6uReElcE2XwFtcK9yfDNxPX1uZxzxybp_90ooeFwIu0BrYKcLPPbtGTmt_VS-vC8TkNUXTF16YkXbxhA2bK2jwmuoU5iYJ7z-j0lco_QYKERlnoErB1o1XlCl11nSi_fU5yKrLMjjPYsK2YK8Vans/0NeBwgjljy29wQwdPnWvDD9xiTcPdIymmDM_HOEX4HM'), ('filename', 'hmc804x-dc-power-supply-front-view-rohde-schwarz_200_979_640_360_1.jpg'), ('size', 39364), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7nIFh6GyxJSM8eMFsCD-ag/MQ9LQa9PMghIer4TLLWPOSrucHVf4ab4IcJ4X7eWZgZR99mybADZ5CwASDwaaUqXJEvYskCweY_mUqvU2_bGkA/jEily7WAG7zauTaA2tf4cTgGOAaSm7erMQyFx8UQBuI'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/hfRoURRKN3QqercxCYc4ag/5LMdBO7ySdn7l-tDhvvjM7kQxP_xMi20gPoCI4GeRJ5TGZiLwFVoSm_U0-TXPKDUXLC49IQHTmkONro8pkE7Pw/wQg6kH2-Cq_KbnJNhIKQIyl0V3wI2Vw6riDHAcCKNpQ'), ('width', 640), ('height', 360)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/lu8eM0JMTSZf_deZ5wEBiw/wVgwv8wkeReI1Cnpl0Nb8XzNZGD18j5rYM9xvL_RhHpspZmCufH4-ovXSigMP9sFgajP46mxWDpta6OXHTBTZA/krGY4hhrKCf-5q6r_q7-JsgyewWckI-diTb0UMQXUMc'), ('width', 3000), ('height', 3000)]))]))])]",https://www.batronix.com/shop/power-supplies/Rohde-Schwarz-HMC8041.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMC8041.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041,,,,,"from .private.HMC804x import _RohdeSchwarzHMC804x

class RohdeSchwarzHMC8041(_RohdeSchwarzHMC804x):
    """"""
    This is the qcodes driver for the Rohde & Schwarz HMC8041 Power Supply
    """"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, num_channels=1, **kwargs)
"
17,24.9,"Sunnyvale, California","The DG645 is a versatile digital delay/pulse generator that provides precisely defined pulses at repetition rates up to 10 MHz. The instrument offers several improvements over older designs—lower jitter, higher accuracy, faster trigger rates, and more outputs. The DG645 also has Ethernet, GPIB and RS-232 interfaces for computer or network control of the instrument.",DG 645,537.0,"Stanford Research Systems is a maker of general test and measurement instruments. The company was founded in 1980, is privately held, and is not affiliated with Stanford University. Stanford Research Systems manufactures all of their products at their Sunnyvale, California facility.
",Qcodes Community,Stanford Research,"[OrderedDict([('id', 'attv3bD8piC1qOU7u'), ('width', 119), ('height', 79), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DX08usGjvnJBkvdHHhYk9A/Ae77gRakGMHNfTqleg_gK2RmfhmZ8TnU6CkFTq-QhV04pYYt3CIA1-M0G5j91V3CxvPLy-7iqKz9m9CaWmEnEnSDzPYD1BwYM-OMHf77iKw/mkND8FmArWFnxcicFTTUdCpwpJlIvs3XrBVGa87BIXY'), ('filename', 'download (6).png'), ('size', 1359), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/yD1ca115gu_SQ83dKE0emw/5XQdYHjDR2rN0zH6LKhJNyg_AEUnKQuYqjZFO6UfZqpZh3J0FIJiRuWgys4qUrcB-CsZDdapTRMem1vNFJ2l6w/QT7uPhb9kiI3fhKXBZKEsl29w5pe5akLQRiZ6YFuQM0'), ('width', 54), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/4Z3F4fMBHh13CjRUCwbcqw/yjovR8hh-b27dj3kTuO5eo_wkLicYPXlJ1YkHeDIUjQmf9QFtQtEdkIvcaCjrAqINx0aWWljOaEazgyqHVSCKA/YhAzqwCookM3Y1vcYlZexFNoWT_fe88vI8YAzybT1n4'), ('width', 119), ('height', 79)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/AggdRBatTfbcAgOj8TSG6g/w3adorfbdopR7_emfj-CqYgQo1iPqnK0RuD8bxuK8ka6uyaHcbX_tyXcHtgYjlVSRJx3EzLFkMcbtC3lUp0mOg/S55lqAqdhkgfzerGs1wQr_e9B_ktutyR26SoH0vXsm0'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thinksrs.com/index.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Pulse Generator,https://en.wikipedia.org/wiki/Pulse_generator,['Pulse Generator'],A pulse generator is either an electronic circuit or a piece of electronic test equipment used to generate rectangular pulses. Pulse generators are used primarily for working with digital circuits; related function generators are used primarily for analog circuits.,,https://www.thinksrs.com/downloads/pdfs/catalog/DG645c.pdf,"[OrderedDict([('id', 'attQqnPuoAadlGes3'), ('width', 2000), ('height', 1435), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Np8L3aCKr_QjsdOa8yUvSQ/NTzDJSMSz-YAj9gJqtKbRfLAQMKcubbwhIIVDErQ-wmvTMGUglSR-MO52zSjOZjQwd9JGMmeGKvwUI4gH5-JKmQyI8qdkuKVZRAY_nkl5_o/kKyNZzdakbb-uRLj39jhRdhNapE07PBBLEJF_AwAF-E'), ('filename', 'DG645_Wide_Reflect.jpg'), ('size', 472623), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/e7eoBmwdBu05cItoYfNRcA/4y7TdqP5J5REXV-waPevlUEbbA9fsasG7eO1dxOhflbOMysPr6t-akeZwO-JKM_u_pqLDLjqYRPbeEr4Kt7fJw/3UGoBNqWuUc1PLoqkFJRZHq2jZki0gpUVnuLCtXvdDQ'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9GpG7uyoJw_MpLf7onn2Cw/sC177TzkGhw6p6-T6gZjKOVfu6liW280ROC5tDx8ILmo-uV_wTCbJPlAkitLcmDj9MoHolQ1MG4bvSvsQc2WYw/CSw2ouew1ggK396M_2YYV_dIZDtqamrb6vYgwQZ525w'), ('width', 714), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tEkDGSN5ybN9umjXBVGYkQ/cvULiWSj3o6vCu25pxXWA4EBVm1LcOzwvQsmbTw8lplAXvZ8G77fSX1uruGtcImG9h1RQahTMnju0l5rb6S3Cw/ggy2lI6-ND3_zxNLZe2gXvS3ebp3AEaqu0ksZ8jEt7E'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thinksrs.com/products/dg645.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/StanfordResearchSystems/DG645.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems.html#module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645,4695.0,,,,"import logging
log = logging.getLogger(__name__)

from qcodes import VisaInstrument
import qcodes.utils.validators as vals

class DG645(VisaInstrument):
    """"""Qcodes driver for SRS DG645 digital delay generator.
    """"""
    CHANNEL_MAPPING = {
        'T0': 0, 'T1': 1, 'A': 2, 'B': 3, 'C': 4,
        'D': 5, 'E': 6, 'F': 7, 'G': 8, 'H': 9
    }
    OUTPUT_MAPPING = {'T0': 0, 'AB': 1, 'CD': 2, 'EF': 3, 'GH': 4}
    PRESCALE_MAPPING = {'trig': 0, 'AB': 1, 'CD': 2, 'EF': 3, 'GH': 4}
    TRIGGER_MAPPING = {
        'internal': 0,
        'ext_rising': 1,
        'ext_falling': 2,
        'single_ext_rising': 3,
        'single_ext_falling': 4,
        'single': 5,
        'line': 6,
    }
    POLARITY_MAPPING = {'-': 0, '+': 1}
    DISPLAY_MAPPING = {
        'trig_rate': 0,
        'trig_thresh': 1,
        'trig_single_shot': 2,
        'trig_line': 3,
        'advanced_trig_enable': 4,
        'trig_holdoff': 5,
        'prescale_config': 6,
        'burst_mode': 7,
        'burst_delay': 8,
        'burst_count': 9,
        'burst_period': 10,
        'channel_delay': 11,
        'channel_output_levels': 12,
        'channel_output_polarity': 13,
        'burst_T0_config': 14
    }
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, terminator='\r\n', timeout=10, **kwargs)
        self.add_parameter('trig_holdoff',
            label='Trigger holdoff',
            unit='s',
            get_cmd='HOLD?',
            get_parser=float,
            set_cmd='HOLD {}'
        )

        # Prescale parameters
        for channel, idx in self.PRESCALE_MAPPING.items():
            if idx > 0:
                self.add_parameter(
                    f'phase_{channel}',
                    label=f'{channel} prescale phase factor {k}',
                    get_cmd=f'PHAS?{idx}',
                    get_parser=int,
                    set_cmd=f'PHAS {idx},{{}}',
                    vals=vals.Ints(min_value=0),
                    docstring=""""""\
                    The prescale phase factor determines the phase at which the associated output is
                    enabled. The output is enabled when the prescaler counter equals the phase
                    factor. 
                    """"""
                )

            self.add_parameter(
                f'prescale_{channel}',
                label=f'{channel} prescale factor',
                get_cmd=f'PRES?{idx}',
                get_parser=int,
                set_cmd=f'PRES {idx},{{}}',
                vals=vals.Ints(min_value=0),
                docstring=""""""\
                A prescaler on the trigger input enables one to generate
                delay cycles at a sub-multiple of the trigger input frequency.
                """"""
            )

        # Trigger parameters
        self.add_parameter(
            'trigger_level',
            label='Trigger level',
            unit='V',
            get_cmd='TLVL?',
            get_parser=float,
            set_cmd='TLVL {}',
            vals=vals.Numbers()
        )
        self.add_parameter(
            'trigger_rate',
            label='Trigger rate',
            unit='Hz',
            get_cmd='TRAT?',
            get_parser=float,
            set_cmd='TRAT {}',
            vals=vals.Numbers(min_value=0)
        ) 
        self.add_parameter(
            'trigger_source',
            label='Trigger source',
            get_cmd=self._get_trigger_source,
            get_parser=str,
            set_cmd=self._set_trigger_source,
            vals=vals.Enum(*tuple(self.TRIGGER_MAPPING))
        )

        # Burst parameters
        self.add_parameter(
            'burst_count',
            label='Burst count',
            get_cmd='BURC?',
            get_parser=int,
            set_cmd='BURC {}',
            vals=vals.Ints(min_value=0)
        )
        self.add_parameter(
            'burst_delay',
            label='Burst delay',
            unit='s',
            get_cmd='BURD?',
            get_parser=float,
            set_cmd='BURD {}',
            vals=vals.Numbers(min_value=0)
        )
        self.add_parameter(
            'burst_period',
            label='Burst period',
            unit='s',
            get_cmd='BURP?',
            get_parser=float,
            set_cmd='BURC {}',
            vals=vals.Numbers(min_value=100e-9, max_value=2000-10e-9)
        )
        self.add_parameter(
            'burst_T0_config',
            label='Burst T0 configuration',
            get_cmd='BURT?',
            get_parser=int,
            set_cmd='BURT {}',
            vals=vals.Enum(0,1)
        )

        # Channel parameters
        for ch, idx in self.CHANNEL_MAPPING.items():
            if idx > 1:
                self.add_parameter(
                    f'delay_{ch}',
                    label=f'{ch} delay',
                    unit='s',
                    get_cmd=f'DLAY?{idx}',
                    get_parser=str,
                    set_cmd=lambda src_delay, channel=ch: self._set_delay(src_delay, channel),
                    vals=vals.Strings(),
                    docstring=""""""\
                    Set/query they delay of this channel relative to another.
                    Arguments/returned values strings of the form
                    '{index_of_other_channel},{delay_in_seconds}'. For example, '2,+0.001'
                    indicates that this channel is delayed from channel A by 1 ms, since
                    self.CHANNEL_MAPPING['A'] == 2.
                    """"""
                )
                self.add_parameter(
                    f'channel_link_{ch}',
                    label=f'Channel linked to {ch}',
                    get_cmd=f'LINK?{idx}',
                    get_parser=int,
                    set_cmd=lambda target, source=ch: self._set_link(target, source),
                    vals=vals.Enum(*tuple(k for k in self.CHANNEL_MAPPING if k != 'T1'))
                )

        # Output parameters
        for out, idx in self.OUTPUT_MAPPING.items():
            self.add_parameter(
                f'amp_out_{out}',
                label=f'Output {out} amplitude',
                unit='V',
                get_cmd=f'LAMP?{idx}',
                get_parser=float,
                set_cmd=f'LAMP {idx},{{}}',
                vals=vals.Numbers()
            )
            self.add_parameter(
                f'offset_out_{out}',
                label=f'Output {out} offset',
                unit='V',
                get_cmd=f'LOFF?{idx}',
                get_parser=float,
                set_cmd=f'LOFF {idx},{{}}',
                vals=vals.Numbers()
            )
            self.add_parameter(
                f'polarity_out_{out}',
                label=f'Output {out} polarity',
                get_cmd=f'LPOL?{idx}',
                get_parser=int,
                set_cmd=f'LPOL {idx},{{}}',
                vals=vals.Enum(0,1),
                docstring='0 -> negative polarity, 1 -> positive polarity.'
            )

        self.snapshot(update=True)
        self.connect_message()

    def self_calibrate(self) -> None:
        """"""Run auto-calibration routine.
        """"""
        self.write('*CAL?')
        self.wait()

    def self_test(self) -> None:
        """"""Run self-test routine.
        """"""
        self.write('*TST?')
        self.wait()

    def reset(self) -> None:
        """"""Reset instrument.
        """"""
        log.info(f'Resetting {self.name}.')
        self.write('*RST')

    def save_settings(self, location: int) -> None:
        """"""Save instrument settings to given location.

        Args:
            location: Location to which to save the settings (in [1..9]).
        """"""
        log.info(f'Saving instrument settings to location {location}.')
        self.write(f'*SAV {location}')

    def trigger(self) -> None:
        """"""Initiates a single trigger if instrument is in single shot mode.
        """"""
        self.write('*TRG')

    def wait(self) -> None:
        """"""Wait for all prior commands to execute before continuing.
        """"""
        self.write('*WAI')

    def local(self) -> None:
        """"""Go to local.
        """"""
        self.write('LCAL')

    def remote(self) -> None:
        """"""Go to remote.
        """"""
        self.write('REMT')

    def _set_trigger_source(self, src: str) -> None:  
        self.write(f'TSRC {self.TRIGGER_MAPPING[src]}')

    def _get_trigger_source(self) -> str:
        response = self.ask('TSRC?')
        keys = self.TRIGGER_MAPPING.keys()
        values = self.TRIGGER_MAPPING.values()
        return list(keys)[list(values).index(int(response))]

    def _set_delay(self, src_delay: str, target: str) -> None:
        source, delay = [s.strip() for s in src_delay.split(',')]
        self.write('DLAY {},{},{}'.format(self.CHANNEL_MAPPING[target],
                                          self.CHANNEL_MAPPING[source],
                                          delay))

    def _set_link(self, target: str, source: str) -> None:
        self.write('LINK {},{}'.format(self.CHANNEL_MAPPING[target],
                                       self.CHANNEL_MAPPING[source]))
"
38,110.6,"Cleveland, Ohio, United States","he 6½-digit Model 6430 Sub-Femtoamp Remote SourceMeter SMU Instrument can measure current with 1aA sensitivity. Its low noise and drift performance make it ideal for research on single electron devices, highly resistive nanowires and nanotubes, polymers, and electrochemical applications.",Keithley 6430,576.0,"Keithley Instruments is a measurement and instrument company headquartered in Solon, Ohio, that develops, manufactures, markets, and sells data acquisition products, as well as complete systems for high-volume production and assembly testing.
",Qcodes Community,Keithley,"[OrderedDict([('id', 'att7PoO6FUHxnCmlK'), ('width', 900), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/NeO02HKgoFPV3DNb9vOFuQ/oUOnoE3G5-QeCMyfgXyg8FqsnOeauIly5GBoFYr9Za8Zrr0680YSs6QaLZbjSLo7PoMQ00w0RPeo8KNMcbYt2atP2MKHb0B4-GyFD_CU3NjI0vDcK8LLowKujulyPoKADY3pAVNPMgBCEnKshd91bg/0TQRCCKsz0gJy1NFGfGsJsjM3QdRGQ8MoPDdSPPJdCA'), ('filename', 'keithley-a-tektronix-company-vector-logo.png'), ('size', 4698), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZnO_WGoJzGnSlUctBDqWew/3IevGml9FN4w1wC95p0SxkWfy9Or2KbV9QY3D0d1q_Sej0Zp6VH3gJgIsG75z_GB4Ob04GciukrNLZqRSkqxUA/uTVK9YUV68keAgFRR7IKhzRM4i5JrKr9C0Qtw0T9sOo'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qLTzFSMkPTLA6g9lkPJmsg/zyqBAfflKt_8lvw15arx51Xd9fYqp17v4WFX71buJSr6egMKaBsN1l-whDpCpYtjxp2PsM9RQH8m8m3yxtquXw/52L-EUk-XUGAnw0eN3grANao1iKKOIuxmavJUlgreXQ'), ('width', 900), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DD76F3FSvA0sLYAXfST7DA/Y9vIBAtL1_Fy2BC2SLgyVwDmN2BpqCN-RepHfRd6uBzNVwzsKrLvHbBvYJti5ZoIf_VLDikmzoIRrzQ6Veuw7g/bIGTWhsUS3UoKan-BcRmMtd0TCP2TPvDoZpnD5k1pXQ'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en,"Write a Python script that uses Qcodes Community to connect to a {Device name} Multimeters, Power Supplies",https://en.wikipedia.org/wiki/Source_measure_unit,"['Multimeters', 'Power Supplies']","A source measure unit (SMU) is a type of electronic test equipment which, as the name indicates, is capable of both sourcing and measuring at the same time.",,https://download.tek.com/datasheet/6430.pdf,"[OrderedDict([('id', 'attpPpm7qoCPF1kNA'), ('width', 500), ('height', 375), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ruvm2jk7qvaXHIHoNqvcQg/oSjUT4PEJYJ9HsUkwmZFJksDttLRTTx-EGa6rhK6PrzgVp0MXCtrfALup2z9WQto59_XPBUT9Xg5LIS5_Y8-gYg6bdsuYvvA9WOrBSTG4XvpBs8G1LYN8CbBUuMb_dVN/X5SCdiXU72FHB5V7xQC-Inr-0gITe_P2W82HUP11bPQ'), ('filename', 'keithely-electrometers-3.webp'), ('size', 20878), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OYse7_N12rLuIzJ1Xuxfhw/0t-71w8uEmLg8qz9WMUx6WKFGMZd7iLbMJ91sxFcBOosmh1_yrmWD7vcu_fzvXbCjz7OgFUc_YL7P1l8rtoXmAQz-9pv5A3H_-_FAB9yHbw/TX1fVt-uGRXVvT-ad8QylAlq8pbat_m_Re7JX_4EtGA'), ('width', 48), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rC2oghHI4AobvKvj3JoMFg/BS5ICtAtEAIhyN2_dF6Z_uNIHPjzAavc8l32Na_jD8Hx2LMwa4cPMIHI3yYKZvlq4fWXm62PTtzP7V6RIu8BNBkaFNuw6M5bSvtAaVL7obw/YS4F-00_WQGt_ynTzZ8WEMybmWI1au3PzwsYve-QYvs'), ('width', 500), ('height', 375)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0y1WTzngqp_IePVPWf__8A/xDA_M_c1LkLjdniMUbJmGlU7x4tgQmvikOb7Dx65XFstLr2Yfg5QWOGEEqc9KBmpph772ZDgHbz-vGl0ghGBO8BdrZiKFeTVp679qG9pbGI/Pw3rEjKbVYJ-3iPoOK0LiDZBQRB1LGDOfaMYtyuQPhw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en/products/keithley/low-level-sensitive-and-specialty-instruments/electrometers,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Tektronix/Keithley_6430.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Tektronix/Keithley_6430.py,23000.0,,,,"# Qcodes driver Keithley 6430 SMU
# Based on QtLab legacy driver
# https://github.com/qdev-dk/qtlab/blob/master/instrument_plugins/Keithley_6430.py
from typing import List, Tuple

from qcodes.instrument.visa import VisaInstrument
from qcodes.utils.validators import Ints, Numbers, Bool, Strings, Enum
from qcodes.utils.helpers import create_on_off_val_mapping
import logging
import warnings
from functools import partial

log = logging.getLogger(__name__)

on_off_vals = create_on_off_val_mapping(on_val=1, off_val=0)


class Keithley_6430(VisaInstrument):

    r""""""
    This is the Qcodes driver for the Keithley 6430 SMU.

    Args:
        name: The name used internally by QCoDeS
        address: Network address or alias of the instrument
        terminator: Termination character in VISA communication
        reset: resets to default values
    """"""
    def __init__(self, name: str,
                 address: str,
                 terminator=""\n"",
                 reset: bool = False,
                 **kwargs):

        super().__init__(name, address, terminator=terminator, **kwargs)

        self.add_parameter('source_current_compliance',
                           unit='A',
                           get_parser=float,
                           set_cmd='SENS:CURR:PROT {}',
                           get_cmd='SENS:CURR:PROT?',
                           vals=Numbers(1e-9, 105e-3)
                           )
        self.add_parameter('source_voltage_compliance',
                           unit='V',
                           get_parser=float,
                           set_cmd='SENS:VOLT:PROT {}',
                           get_cmd='SENS:VOLT:PROT?',
                           vals=Numbers(1e-12, 210)
                           )
        self.add_parameter('source_current_compliance_tripped',
                           get_cmd='SENS:CURR:PROT:TRIP?',
                           val_mapping=on_off_vals,
                           docstring='True if current has reached specified '
                                     'compliance.',
                           )
        self.add_parameter('source_voltage_compliance_tripped',
                           get_cmd='SENS:VOLT:PROT:TRIP?',
                           val_mapping=on_off_vals,
                           docstring='True if voltage has reached specified '
                                     'compliance.',
                           )
        self.add_parameter('source_current',
                           unit='A',
                           get_parser=float,
                           label='Source current',
                           set_cmd='SOUR:CURR:LEV {}',
                           get_cmd='SOUR:CURR:LEV?',
                           vals=Numbers(-105e-3, 105e-3),
                           docstring='When in current sourcing mode, tries to '
                                     'set current to this level.',
                           )
        self.add_parameter('sense_current',
                           unit='A',
                           get_parser=float,
                           label='Measured current',
                           get_cmd=partial(self._read_value, 'CURR:DC'),
                           snapshot_get=False,
                           docstring='Value of measured current, when in '
                                     'current sensing mode.',
                           )
        self.add_parameter('sense_voltage',
                           unit='V',
                           get_parser=float,
                           label='Measured voltage',
                           get_cmd=partial(self._read_value, 'VOLT:DC'),
                           snapshot_get=False,
                           docstring='Value of measured voltage, when in '
                                     'voltage sensing mode.',
                           )
        self.add_parameter('sense_resistance',
                           unit='Ohm',
                           get_parser=float,
                           label='Measured resistance',
                           get_cmd=partial(self._read_value, 'RES'),
                           snapshot_get=False,
                           docstring='Value of measured resistance, when in '
                                     'resistance sensing mode.',
                           )
        self.add_parameter('source_current_range',
                           unit='A',
                           get_parser=float,
                           set_cmd='SOUR:CURR:RANG {}',
                           get_cmd='SOUR:CURR:RANG?',
                           vals=Numbers(1e-12, 105e-3)
                           )
        self.add_parameter('source_voltage',
                           unit='V',
                           get_parser=float,
                           label='Source voltage',
                           set_cmd='SOUR:VOLT:LEV {}',
                           get_cmd='SOUR:VOLT:LEV?',
                           vals=Numbers(-210, 210),
                           docstring='When in voltage sourcing mode, tries to '
                                     'set voltage to this level.',
                           )
        self.add_parameter('source_voltage_range',
                           unit='V',
                           get_parser=float,
                           set_cmd='SOUR:VOLT:RANG {}',
                           get_cmd='SOUR:VOLT:RANG?',
                           vals=Numbers(200e-3, 200)
                           )
        self.add_parameter('source_delay_auto',
                           set_cmd=':SOUR:DEL:AUTO {}',
                           get_cmd=':SOUR:DEL:AUTO?',
                           val_mapping=on_off_vals,
                           docstring=""Automatically set a delay period that ""
                                     ""is appropriate for the present ""
                                     ""source/measure setup configuration."",
                           )
        self.add_parameter('source_delay',
                           unit='s',
                           get_parser=float,
                           set_cmd=':SOUR:DEL {}',
                           get_cmd=':SOUR:DEL?',
                           vals=Numbers(0, 9999.998),
                           docstring=""Settling time after setting source ""
                                     ""value."",
                           )
        self.add_parameter('output_enabled',
                           set_cmd='OUTP {}',
                           get_cmd='OUTP?',
                           val_mapping=on_off_vals,
                           docstring='Turns the source on or off.',
                           )
        self.add_parameter('output_auto_off_enabled',
                           set_cmd=':SOUR:CLE:AUTO {}',
                           get_cmd='OUTP?',
                           val_mapping=on_off_vals,
                           )
        self.add_parameter('source_mode',
                           set_cmd='SOUR:FUNC {}',
                           get_cmd=self._get_source_mode,
                           vals=Enum('VOLT', 'CURR'),
                           docstring=""Either 'VOLT' to source voltage, ""
                                     ""or 'CURR' for current."",
                           )
        self.add_parameter('sense_mode',
                           set_cmd=self._set_sense_mode,
                           get_cmd=self._get_sense_mode,
                           vals=Strings(),
                           docstring=""Sensing mode.""
                                     ""Set to 'VOLT:DC', ""
                                     ""'CURR:DC', or 'RES', or a combination ""
                                     ""thereof by using comma."",
                           )
        self.add_parameter('sense_autorange',
                           set_cmd=self._set_sense_autorange,
                           get_cmd=self._get_sense_autorange,
                           vals=Bool(),
                           docstring=""If True, all ranges in all modes are""
                                     "" chosen automatically"",
                           )
        self.add_parameter('sense_current_range',
                           unit='A',
                           get_parser=float,
                           set_cmd=':SENS:CURR:RANG {}',
                           get_cmd=':SENS:CURR:RANG?',
                           vals=Numbers(1e-12, 1e-1),
                           )
        self.add_parameter('sense_voltage_range',
                           unit='V',
                           get_parser=float,
                           set_cmd=':SENS:VOLT:RANG {}',
                           get_cmd=':SENS:VOLT:RANG?',
                           vals=Enum(200, 20, 2, 0.2),
                           )
        self.add_parameter('sense_resistance_range',
                           unit='Ohm',
                           get_parser=float,
                           set_cmd=':SENS:RES:RANG {}',
                           get_cmd=':SENS:RES:RANG?',
                           vals=Numbers(2, 2e13),
                           )
        self.add_parameter('sense_resistance_offset_comp_enabled',
                           set_cmd=':SENS:RES:OCOM {}',
                           get_cmd=':SENS:RES:OCOM?',
                           val_mapping=on_off_vals,
                           docstring=""Set offset compensation on/off for ""
                                     ""resistance measurements."",
                           )
        self.add_parameter('trigger_source',
                           set_cmd=':TRIG:SOUR {}',
                           get_cmd=':TRIG:SOUR?',
                           vals=Enum('IMM', 'TLIN'),
                           docstring=""Specify trigger control source.""
                                     ""IMMediate or TLINk."",
                           )
        self.add_parameter('arm_source',
                           set_cmd=':ARM:SOUR {}',
                           get_cmd=':ARM:SOUR?',
                           vals=Enum('IMM', 'TLIN', ""TIM"", ""MAN"", ""BUS"",
                                     ""NST"", ""PST"", ""BST""),
                           docstring=""Specify arm control source.""
                                     ""IMMediate, or TLINk, TIMer, MANual,""
                                     "" BUS, NSTest, PSTest, or BSTest."",
                           )
        self.add_parameter('trigger_count',
                           set_cmd=':TRIG:COUN {}',
                           get_cmd=':TRIG:COUN?',
                           vals=Ints(),
                           docstring=""How many times to trigger."",
                           )
        self.add_parameter('arm_count',
                           set_cmd=':ARM:COUN {}',
                           get_cmd=':ARM:COUN?',
                           vals=Ints(),
                           docstring=""How many times to arm."",
                           )
        self.add_parameter('nplc',
                           get_parser=float,
                           set_cmd=':NPLC {}',
                           get_cmd=':NPLC?',
                           vals=Numbers(0.01, 10),
                           docstring=""Set integration time to the specified""
                                     ""value in Number of Powerline Cycles."",
                           )
        self.add_parameter('digits',
                           get_parser=int,
                           set_cmd='DISP:DIG  {}',
                           get_cmd='DISP:DIG?',
                           vals=Ints(4, 7),
                           docstring=""Display resolution."",
                           )
        self.add_parameter('autozero',
                           set_cmd='SYST:AZER:STAT {}',
                           get_cmd='SYST:AZER:STAT?',
                           val_mapping=on_off_vals,
                           docstring=""Enable autozero.""
                                     ""Enabling maximizes accuracy, ""
                                     ""disabling increases speed."",
                           )
        self.add_parameter('filter_auto',
                           set_cmd='AVER:AUTO {}',
                           get_cmd='AVER:AUTO?',
                           val_mapping=on_off_vals,
                           docstring=""Automatically choose filtering."",
                           )
        self.add_parameter('filter_repeat_enabled',
                           set_cmd=':AVER:REP:STAT {}',
                           get_cmd='AVER:AUTO?',
                           val_mapping=on_off_vals,
                           docstring=""Enable repeat filter."",
                           )
        self.add_parameter('filter_median_enabled',
                           set_cmd=':MED:STAT {}',
                           get_cmd=':MED:STAT?',
                           val_mapping=on_off_vals,
                           docstring=""Enable median filter."",
                           )
        self.add_parameter('filter_moving_enabled',
                           set_cmd=':AVER:STAT {}',
                           get_cmd=':AVER:STAT?',
                           val_mapping=on_off_vals,
                           docstring=""Enable moving average."",
                           )
        self.add_parameter('filter_repeat',
                           get_parser=int,
                           set_cmd=':AVER:REP:COUN {}',
                           get_cmd=':AVER:REP:COUN?',
                           vals=Ints(),
                           docstring=""Number of readings that are acquired""
                                     ""and stored in the filter buffer."",
                           )
        self.add_parameter('filter_median',
                           get_parser=int,
                           set_cmd=':MED:RANK {}',
                           get_cmd=':MED:RANK?',
                           vals=Ints(),
                           docstring=""Number of reading samples""
                                     "" for the median filter process."",
                           )
        self.add_parameter('filter_moving',
                           get_parser=int,
                           set_cmd=':AVER:COUN {}',
                           get_cmd=':AVER:COUN?',
                           vals=Ints(),
                           docstring=""Number of reading samples""
                                     "" in the moving average filter."",
                           )

        self.connect_message()

        if reset:
            self.reset()

    def reset(self) -> None:
        r""""""
        Resets instrument to default values
        """"""
        self.write('*RST')

    def read(self) -> Tuple[float, float, float]:
        """"""
        Arm, trigger, and readout. Note that the values may not be valid if
        sense mode doesn't include them.
        Returns:
            tuple of (voltage (V), current (A), resistance (Ohm))
        """"""
        if not (self.output_enabled() or self.output_auto_off_enabled()):
            raise Exception(
                    ""Either source must be turned on manually or ""
                    ""``output_auto_off_enabled`` has to be enabled before ""
                    ""measuring a sense parameter.""
                    )
        s = self.ask(':READ?')
        logging.debug(f'Read: {s}')

        v, i, r = [float(n) for n in s.split(',')][:3]
        return v, i, r

    def _read_value(self, quantity: str) -> float:
        """"""
        Read voltage, current or resistance through the sensing module.
        Issues a warning if reading a value that does not correspond to the
        sensing mode.
        Args:
            quantity: either ""VOLT:DC"", ""CURR:DC"" or ""RES""
        Returns:
            Measured value of the requested quantity.
        """"""
        mode_now = self.sense_mode()
        if quantity not in mode_now:
            warnings.warn(f""{self.short_name} tried reading {quantity}, but ""
                          f""mode is set to {mode_now}. Value might be out of ""
                          f""date."")
        mapping = {""VOLT:DC"": 0, ""CURR:DC"": 1, ""RES"": 2}
        return self.read()[mapping[quantity]]

    def init(self) -> None:
        """"""
        Go into the arm/trigger layers from the idle mode.
        """"""
        self.write(':INIT')

    def set_trigger_immediate(self) -> None:
        """"""
        Set trigger and arm modes to immediate.
        """"""
        self.trigger_source('IMM')
        self.arm_source('IMM')

    def _set_sense_mode(self, mode: str) -> None:
        """"""
        Set the sense_mode to the specified value
        Input:
            mode: mode(s) to be set. Choose from self._sense_modes.
            Use comma to separate multiple modes.
        """"""

        modes = [m.strip(' ') for m in mode.split(',')]

        if not all([m in [""RES"", ""CURR:DC"", ""VOLT:DC""] for m in modes]):
            raise ValueError(f'invalid sense_mode {modes}')

        modes_str = '""' + '"",""'.join(modes) + '""'

        string = f':SENS:FUNC {modes_str}'

        self.write(':SENS:FUNC:OFF:ALL')
        self.write(string)

    def _get_sense_mode(self) -> str:
        """"""
        Read the sense_mode from the device
        """"""
        string = 'SENS:FUNC?'
        ans = self.ask(string).replace('""', '')
        return ans

    def _get_source_mode(self) -> str:
        """"""
        Read the source_mode from the device
        """"""
        string = 'SOUR:FUNC?'
        ans = self.ask(string).strip('""')
        return ans

    def _set_sense_autorange(self, val: bool) -> None:
        """"""
        Switch sense_autorange on or off for all modes.
        """"""
        n = int(val)
        self.write(f'SENS:CURR:RANG:AUTO {n}')
        self.write(f'SENS:VOLT:RANG:AUTO {n}')
        self.write(f'SENS:RES:RANG:AUTO {n}')

    def _get_sense_autorange(self) -> bool:
        """"""
        Get status of sense_autorange. Returns true iff true for all modes
        """"""
        reply0 = bool(int(self.ask('SENS:CURR:RANG:AUTO?')))
        reply1 = bool(int(self.ask('SENS:VOLT:RANG:AUTO?')))
        reply2 = bool(int(self.ask('SENS:RES:RANG:AUTO?')))
        return reply0 and reply1 and reply2
"
40,5.0,USA,"The LDA-5018V Digital Attenuator is a highly accurate, bidirectional, 50 Ohm step attenuator. The LDA-5018V provides calibrated attenuation from 50 to 18000 MHz with an amazing step size of 0.1 dB and typical accuracy <1.0 dB over 50 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-5018V ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-5018V,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attEHHnQFKIW24UvA'), ('width', 394), ('height', 272), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zeeF4yiVae89Ik38o7pIBw/eLePw-86moHmyJFqsNZ_XseV1lOa3R2XNyQCo3hZhIyUEtRrI4fd7mC8Of9-vWOxSYwxESgDHNfFZv1BRz11N9Efr6ZoIU7iB8Z6ntbJxKY/UPdKRB6FPjjAntssoquMWgq_V42g2xxK0Xc51Tb0Bis'), ('filename', 'vaunix-lda-133.png'), ('size', 87729), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iX6dmu2EM7zupdfwfKZQhg/5G1nethi_2McMyJrNW73ljVlQx2kma5ncIoBbXrq5LRDGOm5XiE1fAa-XveKbwFpaKZ62wZBp8NPiOO7CR3vRA/Coq1Imb9dYZaPLKt4iT5W39wU5haweXMQYNQ9aMsIPk'), ('width', 52), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/03fVvq2aWZdscU_6Tn2BoA/p4JVXGtU0rPW6bByT6v3-MwHJVFGQb3GWiTM9Az0IVQChmAfWYs9FiGSYMwF11C0nhoL9Jl9DvTQXDpdh_gWtw/QW4hx8X4is5w7_b399-hhUrOgtTHFALWdD-Xc4xg6wo'), ('width', 394), ('height', 272)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LV412TXXoQ1m6_Bb3mhpwQ/mfxOyy2vQ7LWlEgl5vppg7myY2Wlmrk6elUqDffGHzSwUZ2f-uffDs_qd7drGnIKWdwo984x6FOAUG9P2A_oOA/icgsaMOR6PSU1nA1c9pxnliQWsmmTRaKg2XL52X8dHQ'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-5018v-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,899.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
45,5.0,USA,"The LDA-908V-4 Digital Attenuator is a highly accurate, bidirectional, 50 Ohm step attenuator. The LDA-908V-4 provides calibrated attenuation from 1 to 8000 MHz with an amazing step size of 0.1 dB and typical accuracy <0.25 dB over 90 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-908V-4 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-908V-4,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attONwl5TPTEPYUD9'), ('width', 359), ('height', 423), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/T09DgdDmyTvX9epkLOdiEg/UYNcRpgfPh_0GReIC1ZApVUyCo1c6rhDKZMacfsVypDDFPg0ggbLhnqAbeYrE_R9SS-9dE8IIg6DuwI0IqdmdSRu55aXzDjYU6XGTj4JX5A/a9CkPFlf7wtCuB8ooesfzC4IfHcQj6dCNhwea7ynKG0'), ('filename', 'vaunix-lda908v-4.png'), ('size', 77681), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fbsiYbjrL6FYq_h6xHKdTA/zblp8EjLLnSnfPpqCoup8kxj_Q3vwp1T9wvddVbqeFFXwqhchQfVcIqUI7Lx1aai2Fl9RibQYd7ikQZScJRilA/dSSCbYTJDBiNldgCA-5NyRyP-HerILK7pid4r8z8vp0'), ('width', 31), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ollAzWIGEyOTfbLG-hCWow/aQPtYogQvxnjIo8dUMvLVr66NdAKx_YgywaBwsT2sI1JTp5AMebrQc8WZqVWpFArjBEKvf3Fw79Y0lyNM9q_cA/kPu3njcDE01BkYPWUs3iZgbynaUQGaMmKAjcPD_GzhY'), ('width', 359), ('height', 423)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ypKa69U9aRY9YTpvdgvKew/ZDmGbM4_GwS-DzUjBfJV_BQKOmzsLhO27AXyRYQxg5ta-kPjqBKA2HYE8JQ0D7YDDA0taYxQ_uLaFGOqjfqE0w/DtPqhTnmUA2pjJy23_Fsqw_-ZAVlHb_lv_RFUuh-j_w'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-908v-4-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,2400.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
46,3500.0,"Irvine, California, United States","The AG-UC8 Agilis™ Controller provides USB computer control of up to eight Agilis axes. Power is supplied through the same USB port used for communication. USB hubs may also be used for powering and communication, but must provide the required 5 V supply, e.g. must feature an external power supply. Two holes in the controller allow stacking of several controllers and attachment to optical tables.",AG UC 8,385.0,"Newport provides a wide range of photonics technology and products designed to enhance the capabilities and productivity of our customers' applications.
",Qcodes Community,Newport,"[OrderedDict([('id', 'attXej1yb0ZjvVVtv'), ('width', 119), ('height', 119), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/eJF3UbuXimfV1ihP9bpJbA/aUuQ3ySKJ3Ck7iVo_ttsIYwQYPIPPbW-ymksVpBwfMe-w5ld6x3Jh8N8iEcxVd2FJlnsRm4kZ8Z0AlnnXvdLsLjgt2lHWAUg5pGRgiWing0/cQ7xieJDgP0gXAdYteL8KICPVcN6GPgJHEIBNF93VoM'), ('filename', 'download (4).png'), ('size', 1554), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/sUivBL_K7azt26iNB3Tshw/xhA4U9s8liX3z0U23n6TKINZ4QI7N9tsDVuO1SP0WhZc_oXoUBHeNsKyb7dZH8w-nsltXwRFd7PaocFJ-MdUcQ/EKtnn7Re9BcgDyKHCIBYI98vX1ZWnm1SKaAE33PmUXQ'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ii7mKuM-BnbGEVA8WXszCg/hRwzRTc7Orc7Ckc-pcBWPqOG2cLXBR-VPFP40XU6keLSWkwjLcNVphU3uWS8R7GvT0DYir1pNTc1wydz5QeqbA/yOl2VlnroxlPhZM7jhR2Ndj749JLIlLNhHUsAwMzq78'), ('width', 119), ('height', 119)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/YAUQVRx7gEmmEhPpt9cbAQ/aTYL4VMJe9WxFwtJerL5-KZ6n1bszVY8CRHFuLc-7NDV2R770SqIBOLoVhDQHB1ELoEEkn2F9xJWqK6ok9DhPw/lJaUVpWFk-Sx7N9ATCoaKUz88h2gxXL3ClbGSaaq5Xc'), ('width', 3000), ('height', 3000)]))]))])]",https://www.newport.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} Positional Controller,https://en.wikipedia.org/wiki/Motion_control,['Positional Controller'],"Motion control is a sub-field of automation, encompassing the systems or sub-systems involved in moving parts of machines in a controlled manner. Motion control systems are extensively used in a variety of fields for automation purposes, including precision engineering, micromanufacturing, biotechnology, and nanotechnology.[1] The main components involved typically include a motion controller, an energy amplifier, and one or more prime movers or actuators. Motion control may be open loop or closed loop. In open loop systems, the controller sends a command through the amplifier to the prime mover or actuator, and does not know if the desired motion was actually achieved. Typical systems include stepper motor or fan control. For tighter control with more precision, a measuring device may be added to the system (usually near the end motion). When the measurement is converted to a signal that is sent back to the controller, and the controller compensates for any error, it becomes a Closed loop System.",,https://www.newport.com/mam/celum/celum_assets/np/resources/Agilis_Piezo_Motor_Driven_Components_User_Manual.pdf?1,"[OrderedDict([('id', 'att1f7U3syYdx6rGU'), ('width', 400), ('height', 300), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/TrtCV4PFzCqvuE74BhUYyw/FDdamxvY6StfuDJD_1VCYF1h9bFQ_AKmK0JUnIBzL4g70oAhB4Om_bOESy_OBiQVUs1ic29EOk77by0bkaDoJxdczEn4UM0pfkKBPsfIEL0/ALTEpt8rM3Q9J_7cEmXQOYWzUrbiIBTgAZvF1lWWusY'), ('filename', 'AG-UC8_400w.jpg'), ('size', 15942), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fLHEsW9NgA4dmot8UJr7PA/iNDVh-QRfWmLfmZ2eGRoT2DHYcqZ4PHqtZlgcdBI3xmazCnYYxJVHIgNcz0y0sIJcJ-3zHMS_YfjCAooSHqK1A/9f1Iv09rd4-Wi7WxrUEpmy6PHGkgO3M_jBNPPb7EF0g'), ('width', 48), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/dyO-2QspF1ZQGTIDsg-DOg/J68OlIPG1kGuC_fZu8ZKTBr-etw_Gre9-TbxEw5FGwIY2-KQTIXZmW-igzDcI8S8JrKmjUUhOP8xAEkOwabw5A/4yX2IJZBZLfTeFaLWfhXkQMLssRCXEdNcBVCEI70fNY'), ('width', 400), ('height', 300)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/THw1mV-sgK6Rz-EWeWjj6A/UZDySmL_358fQfRfXAX5h-bx8V5N4AbdF9HcaaUEIajUdxRVcTQ0_vUXhRifQEjJHCZoymYxq12pNwSC0whnSg/XUJhDAWDpE-3ybmimYIQd5zp8RRj3jZD630mIf65PxE'), ('width', 3000), ('height', 3000)]))]))])]",https://www.newport.com/p/AG-UC8,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Newport/AG_UC8.py,https://qcodes.github.io/Qcodes_contrib_drivers/examples/Newport_AG-UC8.html,1022.0,,,,"""""""
QCoDeS driver for Newport AGILIS AG-UC8 Piezo Stepper Controller.
""""""

import logging
import time
from typing import Optional, Dict, Callable

from pyvisa.resources.serial import SerialInstrument

from qcodes import VisaInstrument, InstrumentChannel, ChannelList
from qcodes.utils.validators import Ints

log = logging.getLogger(__name__)


# Meaning of error codes returned by the device.
ERROR_CODES = {
    0: ""No error"",
    -1: ""Unknown command"",
    -2: ""Axis out of range"",
    -3: ""Wrong format for parameter"",
    -4: ""Parameter out of range"",
    -5: ""Not allowed in local mode"",
    -6: ""Not allowed in current state"",
}


def _make_get_parser(cmd: str) -> Callable[[str], int]:
    """"""Return a parser function which expects a line
    starting with <cmd> followed by an integer, and returns
    only the integer.
    """"""

    def get_parser(resp: str) -> int:
        if resp.startswith(cmd):
            try:
                return int(resp[len(cmd):].strip())
            except ValueError:
                # Parsing return value failed.
                # Ignore the error here, we will report it below.
                pass
        log.warning(""Unexpected response from %s: %r"" % (cmd, resp))
        raise Newport_AG_UC8_Exception(""Unexpected response from %s: %r""
                                       % (cmd, resp))

    return get_parser


class Newport_AG_UC8_Exception(Exception):
    pass


class Newport_AG_UC8_ErrorCode(Newport_AG_UC8_Exception):
    def __init__(self, cmd: str, err: int) -> None:
        self.failed_command = cmd
        self.error_code = err
        error_string = ERROR_CODES.get(err, ""unknown error"")
        super().__init__(""Command %s failed with error code %d (%s)""
                         % (cmd, err, error_string))


class Newport_AG_UC8_Axis(InstrumentChannel):
    """"""Represents one of the 2 axes of one channel of an AG-UC8 controller.""""""

    SPEED_TABLE = {
        1: ""5 steps/second at defined step amplitude"",
        2: ""100 steps/second at maximum step amplitude"",
        3: ""1700 steps/second at maximum step amplitude"",
        4: ""666 steps/second at defined step amplitude"",
    }

    def __init__(self, parent: 'Newport_AG_UC8_Channel', axis: int) -> None:
        assert axis in (1, 2)
        super().__init__(parent, ""axis_%d"" % axis)

        self.axis = axis

        self.add_parameter(""step_delay"",
                           label=""Step delay in units of 10 us"",
                           get_cmd=""%dDL?"" % axis,
                           set_cmd=""%dDL{}"" % axis,
                           get_parser=_make_get_parser(""%dDL"" % axis),
                           vals=Ints(0, 200000))
        self.add_parameter(""step_amplitude_pos"",
                           label=""Step amplitude in positive direction"",
                           get_cmd=""%dSU+?"" % axis,
                           set_cmd=""%dSU+{}"" % axis,
                           get_parser=_make_get_parser(""%dSU+"" % axis),
                           vals=Ints(1, 50))
        self.add_parameter(""step_amplitude_neg"",
                           label=""Step amplitude in negative direction"",
                           get_cmd=""%dSU-?"" % axis,
                           set_cmd=""%dSU-{}"" % axis,
                           get_parser=_make_get_parser(""%dSU-"" % axis),
                           vals=Ints(1, 50))
        self.add_parameter(""steps"",
                           label=""Accumulated number of steps since last ""
                                 + ""reset of the step counter"",
                           get_cmd=""%dTP"" % axis,
                           get_parser=_make_get_parser(""%dTP"" % axis))
        self.add_parameter(""status"",
                           label=""Status of the axis"",
                           get_cmd=""%dTS"" % axis,
                           get_parser=_make_get_parser(""%dTS"" % axis),
                           val_mapping={""ready"": 0,
                                        ""stepping"": 1,
                                        ""jogging"": 2,
                                        ""moving_to_limit"": 3})

    def jog(self, speed: int) -> None:
        """"""Start moving in positive (speed > 0) or negative (speed < 0)
        direction.

        Args:
            speed (int): speed and direction of movement.
                Negative values (-1 .. -4) start moving in negative direction.
                Positive values (1 .. 4) start moving in positive direction.
                Magnitude determines speed according to
                Newport_AG_UC8_Axis.SPEED_TABLE.
        """"""
        assert speed >= -4 and speed <= 4
        self.write(""%dJA%d"" % (self.axis, speed))

    def move_limit(self, speed: int) -> None:
        """"""Start moving to positive (speed > 0) or negative (speed < 0) limit.

        Args:
            speed (int): speed and direction of movement.
                Negative values (-1 .. -4) start moving in negative direction.
                Positive values (1 .. 4) start moving in positive direction.
                Magnitude determines speed according to
                Newport_AG_UC8_Axis.SPEED_TABLE.
        """"""
        assert speed >= -4 and speed <= 4
        self.write(""%dMV%d"" % (self.axis, speed))

    def measure_position(self) -> int:
        """"""Measure current position.

        This is a slow command which may take up to 2 minutes to finish.

        Returns:
            int: Current position in range 0 .. 1000 representing
            steps of 1/1000 of total travel.
        """"""
        return self._slow_command(""%dMA"" % self.axis, """")

    def move_abs(self, position: int) -> int:
        """"""Move to absolute position.

        This is a slow command which may take up to 2 minutes to finish.

        Args:
            position (int): Target position in range 0 .. 1000 representing
                steps of 1/1000 of total travel.
        """"""
        assert position >= 0 and position <= 1000
        return self._slow_command(""%dPA"" % self.axis, ""%d"" % position)

    def move_rel(self, steps: int) -> None:
        """"""Start a relative move to current position.

        Args:
            steps (int): Number of steps to move relative to current position.
        """"""
        assert steps >= -(2**31) and steps < 2**31
        self.write(""%dPR%d"" % (self.axis, steps))

    def stop(self):
        """"""Stop current movement.""""""
        self.write(""%dST"" % self.axis)

    def zero_position(self):
        """"""Reset the step counter to zero.""""""
        self.write(""%dZP"" % self.axis)

    def _slow_command(self, cmd: str, arg: str) -> int:
        """"""Execute a slow command with longer timeout and parse
        return value.""""""

        # Temporarily set long timeout to support slow command.
        tmo = self.root_instrument.slow_command_timeout
        self.root_instrument.timeout(tmo)

        try:
            # Execute command.
            resp = self.ask(cmd + arg)
        finally:
            # Restore normal timeout.
            tmo = self.root_instrument.default_timeout
            self.root_instrument.timeout(tmo)

        # Parse response.
        if resp.startswith(cmd):
            try:
                return int(resp[len(cmd):].strip())
            except ValueError:
                # Parsing return value failed.
                # Ignore the error here, we will report it below.
                pass
        log.warning(""Unexpected response from %s: %r"" % (cmd, resp))
        raise Newport_AG_UC8_Exception(""Unexpected response from %s: %r""
                                       % (cmd, resp))


class Newport_AG_UC8_Channel(InstrumentChannel):
    """"""Represents one of the 4 channels of an AG-UC8 controller.

    Each channel drives 2 axes of an optical mount.
    """"""

    def __init__(self, parent: 'Newport_AG_UC8', channel_number: int) -> None:
        assert channel_number in (1, 2, 3, 4)
        super().__init__(parent, ""channel_%d"" % channel_number)

        self._channel_number = channel_number

        self.add_submodule(""axis1"", Newport_AG_UC8_Axis(self, 1))
        self.add_submodule(""axis2"", Newport_AG_UC8_Axis(self, 2))

        self.add_parameter(""limit_status"",
                           label=""Limit switch status"",
                           get_cmd=""PH"",
                           get_parser=_make_get_parser('PH'),
                           val_mapping={""not_active"": 0,
                                        ""active_on_axis_1"": 1,
                                        ""active_on_axis_2"": 2,
                                        ""active_on_both_axes"": 3})

    def write(self, cmd: str) -> None:
        return self.parent.write_channel(self._channel_number, cmd)

    def ask(self, cmd: str) -> str:
        return self.parent.ask_channel(self._channel_number, cmd)


class Newport_AG_UC8(VisaInstrument):
    """"""
    QCoDeS driver for the Newport AGILIS AG-UC8 Piezo Stepper Controller.

    Args:
        name (str): name of the instrument.

        address (str): VISA string describing the serial port,
            for example ""ASRL3"" for COM3.
    """"""

    # By default, expect response to command within 1 second.
    default_timeout = 1.0

    # Some commands (position measurement and absolute move) can take
    # up to 2 minutes to complete.
    slow_command_timeout = 120.0

    # After a command which does not generate a response, a short
    # delay is needed before we can send the following command.
    command_delay = 0.002

    # After a reset command, a longer delay is needed before
    # we can send the following command.
    reset_delay = 0.05

    def __init__(self, name: str, address: str) -> None:
        log.debug(""Opening Newport_AG_UC8 at %s"" % address)

        super().__init__(name,
                         address,
                         timeout=self.default_timeout,
                         terminator=""\r\n"")
        assert isinstance(self.visa_handle, SerialInstrument)
        self.visa_handle.baud_rate = 912600

        self._current_channel: Optional[int] = None

        channels = [Newport_AG_UC8_Channel(self, channel_number)
                    for channel_number in range(1, 4+1)]

        channel_list = ChannelList(self,
                                   ""channels"",
                                   Newport_AG_UC8_Channel,
                                   channels)

        self.add_submodule(""channels"", channel_list)

        self.add_function(""reset"",
                          call_cmd=self.reset,
                          args=())

        # Set controller in remote mode (otherwise many commands don't work).
        self.write(""MR"")

    def get_last_error(self) -> int:
        """"""Send a TE command (get error of previous command) and return
        a numerical error code.

        Returns:
            int: Error code for previous command.
            Value 0 means no error (success).
            See global table ERROR_CODES for the meaning of the codes.

        This function is called automatically after each command sent
        to the device. When a command results in error, exception
        Newport_AG_UC8_ErrorCode is raised.
        """"""
        resp = self.ask('TE')
        if resp.startswith(""TE""):
            try:
                return int(resp.strip()[2:])
            except ValueError:
                # Parsing error code failed.
                # Ignore the error here, we will report it below.
                pass
        log.warning(""Unexpected response to TE command: %r"" % resp)
        raise Newport_AG_UC8_Exception(""Unexpected response to TE command: %r""
                                       % resp)

    def reset(self) -> None:
        """"""Reset the motor controller.""""""
        self._current_channel = None
        # Send reset command.
        super().write(""RS"")
        # Sleep until reset completed.
        time.sleep(self.reset_delay)
        # Switch controller to remote mode (many commands require remote mode).
        self.write(""MR"")

    def get_idn(self) -> Dict[str, Optional[str]]:
        resp = self.ask(""VE"")
        words = resp.strip().split()
        if len(words) == 2:
            model = words[0]
            version = words[1]
        else:
            log.warning(""Unexpected response to VE command: %r"" % resp)
            raise Newport_AG_UC8_Exception(
                ""Unexpected response to VE command: %r"" % resp)
        return {""vendor"": ""Newport"",
                ""model"": model,
                ""firmware"": version}

    def write(self, cmd: str) -> None:
        # Send command.
        super().write(cmd)
        # Sleep until command completed.
        time.sleep(self.command_delay)
        # Check if command produced an error.
        err = self.get_last_error()
        if err != 0:
            log.warning(""Command %s failed with error %d"" % (cmd, err))
            raise Newport_AG_UC8_ErrorCode(cmd, err)

    def _select_channel(self, channel_number: int) -> None:
        """"""Make sure the specified channel is selected.""""""
        if self._current_channel != channel_number:
            # Switch to channel.
            super().write(""CC%d"" % channel_number)
            # Sleep until change channel command completed.
            time.sleep(self.command_delay)
            self._current_channel = channel_number

    def write_channel(self, channel_number: int, cmd: str) -> None:
        """"""Select specified channel, then apply specified command.""""""
        self._select_channel(channel_number)
        self.write(cmd)

    def ask_channel(self, channel_number: int, cmd: str) -> str:
        """"""Select specified channel, then apply specified query
        and return response.""""""
        self._select_channel(channel_number)
        return self.ask(cmd)
"
51,5.0,USA,"The LDA-802-32 Digital Attenuator is a rack mounted 32-channel high dynamic range, bidirectional, 50 Ohm step attenuator. The LDA-802-32 provides 120 dB of attenuation control range from 200 to 8000 MHz with a step size of 0.1 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and user defined fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-802-32 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-802-32,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attquOEHC31yDwYV2'), ('width', 735), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LTlPtun9x52MH8LIAzzj2A/kMVJAseE7b8AxVLeocWASFEXCMTTz-cm9warzqwUtFqqRDf3bxuxiIw-qNrzN-qjsFyt4eFLSzUwIhs4fYeIgHfwaSu3LtOBR_CemEYGBCc/eBrFv31vPIXpVfqsFyG8JvGoitmrfY2FNUsyb-3OmeE'), ('filename', 'lda-802-16-product.png'), ('size', 134941), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/J13WV_YijrHES7WBuqjPow/zBEj62p7Es0qYhn5-BryB-keus3iv89HBtbRjckudEw5OYkoFuxf6uC2-0ypPJl4CPEv8ZbPyc1sLiujt3emKQ/DpXiItH9N5KBhz0YoAHBT5cKmNyOK59vqBykX57IxTw'), ('width', 53), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QAqXOfEcNbgDGwU-z7R6Jw/HREC9EzTGAsUiEawyOjyrvbtFf0wap-wCOk7kDzkizbcz9ruivl8wOINCrtZj2Y592rpRxz9Vh3qf9gC24660w/fMWy-v-GWPHEz5oF1VjKVQWW-EpFzfwartrHKor0F7M'), ('width', 735), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Zu0-Boxk8MG-3oyEzr6jpQ/xsBl3JJnjue_fxRW8pGxFUMb2g6r41xPA4mB5EmWBMKVrWEAeXbYIjcgRnHjwWk3RkuWGrD5C9kn6DjtUTopzg/0K5gIyJMaUhYU9PmymtT8NSjOYoiv-CtktznSoO6y1g'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-802-32-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,19000.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
55,2500.0,"Munich, Germany","The R&S® HMC8043 offers a wide range of logging functions, an integrated energy meter and electronic fuses that can be individually combined for each channel, making it ideal for hardware developers, labs and industrial environments. Linear switching power supplies ensure high efficiency, for minimum heat dissipation even at full load.",HMC 8043,482.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.batronix.com/pdf/Rohde-Schwarz/HMC804X/HMC804X_Datasheet_EN.pdf,"[OrderedDict([('id', 'attLHKOo6MIuMbC2o'), ('width', 640), ('height', 360), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/jszzI42BQPJN-HVS5dbd2Q/ItZFAQ35m42zSQ8aNKT8ab70xBgRc9zhw6CkLESVppO0vKn1SvJLcfJg41RQ8RGFaIdkeOvKhO0mUG5U5I4jjYxj31mRtkkJurinOlPa7GfbRHHdqUC0_YRt8b26Cze548hTuPrKS4ghsw5d6_ZPcE8l5f8AXGyLUjLPxrjALmA/Mnkex0lvzw_yVFRrr1UvFD1Eh02Dfjg_u9MsEgiFFM8'), ('filename', 'hmc804x-dc-power-supply-front-view-rohde-schwarz_200_979_640_360_1.jpg'), ('size', 39364), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KEbCAJ3q29sEdHP7tW8AIg/m-BmL1FEqdarARaRL3bubFl70tdlpY5Zm-YiER4MYDWiI46xrUGDTPDjAnivv4VS1PMBrvlNAosQ8ZgLQKa8rA/jQgG-dWMSyf8E7HwK44Bfp36wWovjEkbJ_XjNJ0kPYo'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LX6TwUv0V653qgpiHz35bQ/JhhaLspR56dhypoaAgsRf7A03POxqe7yvpDLHWg9vEf6gGRQLhbRti-fLqOwwTycjtpf8VylfzYEJbKqSUkypw/oIByI4mp3rO3EthojvLNfJ4PftQe0Oo4ZRnyfgdQ3hA'), ('width', 640), ('height', 360)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/amSoio8OtZIOC1_G4fj38Q/IQM4dFCThQvr4BOISHeI7Yg_ggZ9BJ8VJDmP-lq_xG4A_4UrLWmeRHBCxuOp-I7Od2SClm_VvY98PdyDFerBpg/xWFLiCx02JVDcjsrY8egEjsol-JVLco-HXa9obPsdRs'), ('width', 3000), ('height', 3000)]))]))])]",https://www.batronix.com/shop/power-supplies/Rohde-Schwarz-HMC8043.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMC8043.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043,,,,,"from .private.HMC804x import _RohdeSchwarzHMC804x

class RohdeSchwarzHMC8043(_RohdeSchwarzHMC804x):
    """"""
    This is the qcodes driver for the Rohde & Schwarz HMC8043 Power Supply
    """"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, num_channels=3, **kwargs)
"
59,2500.0,"Munich, Germany",The Rohde & Schwarz HMP4040 power supply belongs to the HMP series and has 4 channels and a power of 384W. All four channels have an output voltage of 0-32V and an output current of 0-10A.,HMP 4040,479.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.farnell.com/datasheets/3677014.pdf,"[OrderedDict([('id', 'attXwLf1bJmAbrGBg'), ('width', 520), ('height', 380), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/c6LH6OM8HEylhCuDlCo80Q/5Vm45tYKg6ADyQCBWblHAQyb_i3zvwZoEOgs9Aeg2ukhGdUcSjdtBXOrE8mOa0FW0I_--qD5CNj6-vw69Y3U6w/UKIR7c3UEXkW0rTVO13iWdJndm9Z5So_TO_2xZB5FDM'), ('filename', '44.jpg'), ('size', 39284), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZbWF4Hh9SLC-c0iCk_HCZg/4_ENigLH-2Yk5eZ5OinR0z_wEo_qzhnTqgvmR2qFd6o1WvoYzN36HtpNxpslaVPMleYVSwYeZH-U3Arxr5paNQ/usqWDo8yGZyFJKE_0sYmuzibxuslgQZXae56DpsEYns'), ('width', 49), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/klRaeltKWjN1s366VUSkQw/jCN9yVrsElup7c57uxBRP2DUVWOAs2q81wahtzw7mMUHvfhZZ-r6uvNGk9AT394T1tpoXuVKbXtZpSIL17qyjA/oXRDUyCIVf5moCs7Rg_OFayg4RRecXILMsfB8I6xyJU'), ('width', 520), ('height', 380)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/pI584b8gnWGZ3Qn-9aheEA/C23s1S4CiAD5dcBh0dTo3NLoLpDcJMsasypDYy-ayRNhrHyVAOs69DGrIz5xZhRk_ADudFahgcCL8Eo1St-bLA/MQJe3ZM34l1La8uwtCOcDJcjdiEgz56RUO58AjNV2yA'), ('width', 3000), ('height', 3000)]))]))])]","https://eleshop.eu/rohde-schwarz-hmp40.html#:~:text=Details,are%20programmable%20DC%20power%20supplies.",https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMP4040.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040,,,,,"from .private.HMP import _RohdeSchwarzHMP


class RohdeSchwarzHMP4040(_RohdeSchwarzHMP):
    """"""
    This is the qcodes driver for the Rohde & Schwarz HMP4040 Power Supply
    """"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, model_no=4040, **kwargs)"
60,1657.0,"Austin, Texas, USA","PXIe, 250 kHz to 20 GHz, PXI RF Analog Signal Generator—The PXIe-5654 features a combination of exceptional phase noise and frequency tuning time. These features address applications such as blocker test/receiver desensitization, high-performance intermodulation distortion measurements, and various electronic warfare applications. The PXIe-5654 is designed to meet the challenging requirements of RFIC characterization, satellite test, and radar applications. Some PXIe-5654 options include a PXIe-5696 Amplitude Extender Module. The PXIe-5696 supports a frequency range of 250 kHz to 20 GHz and an extended amplitude range up to 27 dBm.",Pxie 5654,378.0,"A producer of automated test equipment and virtual instrumentation software. Common applications include data acquisition, instrument control and machine vision. 
",Qcodes Community,National Instruments,"[OrderedDict([('id', 'attXAVi8mGWUwkEk7'), ('width', 960), ('height', 541), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/buqaMhTGWSsLDsPp_ibFaQ/De8HjydUx3EOCX_p1f2SSDo9dGCp11ixF2oTBsR7CR6yGYXYE_XR4FWNSn3MqZ20E_25rrfDoA8lE2RfAkuP7Q/mRTYDKwu5YneGKzi9In5jj7Q0Jc2rufjx4bGgEHckdg'), ('filename', '0x0.webp'), ('size', 3600), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Pv0WHzZMcUe18sDTIk-6mg/jr5uhXQ9KZen3aLRHNCAvPFX560knZg5OC3GuZHWWZUlwbT5OU_POa-kuo1PD5qEWl5eEs1dnPwCnMthpfYMxWBP2ALfrZR8zjpqzA1TrFQ/MbyuehtfHbxyhnrazXO_aVtHoiJ-YxS2aY_z_AlOlI4'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/H2ohCz7JKiucuuY1yKqARA/PC2AnJ8K6bupw239v_vXHNw2Bw02LZLYgFDZExIJ_IYgHKZF3aKphU6VgFnEXdi_JSVfBWTNow1CPi7pJroA801RTFAurSQsjnCQd46i1tI/iQUX1GjeerVvwDnChxusHAS0iRltSIlZ9OIhT6aWeyI'), ('width', 909), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FbZiry0wuZILUwoQONwY7w/TPig8INn4HxQab3cUodGEZ-LmxYwwAgZ-P2q9uDSN0Ldk6LIqGUZwq8U0ONnHe4UeVnJel-tkU0whlEnSfHvMB2WbUcP1DTtJGt-UvawHkI/mGxqe-xjeAIUQCHVOUg5_cDcuiJu0KrjzJiiqkUQRMI'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca.html,Write a Python script that uses Qcodes Community to connect to a NI PXIe-5654 RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",NI PXIe-5654,,"[OrderedDict([('id', 'attDYQn0vronvW6VC'), ('width', 700), ('height', 644), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/y0gKJZHJhrnV9btxkVv6sQ/136HE5v8DZLU_zunhxBqfrDuOVVhj0XLBI-WhiSPJvycM2av9febF2DVOcl-SkPldWrLW95_iSayfM_1aLlXap6Vb93r_M-TB0hBBck9eoA/xL5ou_vbusdNWPZnp9ukRennAN4r8sjTu3RGLenw0H4'), ('filename', 'nai-783126-01.jpg'), ('size', 29885), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GtUHA5TOXOg3Tntmg8eYEA/SRU9tse_HL1bMgNCQzQiDZcRVgYYsaQS4wMd7y33R292aY6CI64UvvU5XbkJKWheG0L_mtKuM-XFBlzNNm7DHQ/1IZ_Uh96Y8o8rEcJQ81aFLco6S5mXUNWt9PspB0nPJA'), ('width', 39), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/wF8QsE4-aI-r6ThtpFtXeg/UA6jBTy0VWfzdpof6-dXxV08UtoEzFbwlYuZm9dymwxszGgpfqSH3NCbQib7M1gFaNxrluloRm63J9SPdFwcFg/9kkIRcFHoxdBYd3eBtgj_YA1sFnXiVr_g4LLMPsKlMM'), ('width', 557), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/5T6RAz7_4-Vr3TT85XZ_Yw/uXZuDdGUPtvm9zO97_R2nEF4kSsAHC3kDuTGdpqHVJ6rvabUzRnsnRDVVUlsdg2tUtEjxtZh_Pa4I_0RBaG7ZA/oe1iVk7Q_bJV0ifZ37f_aAHOBASpMI2R7kVMzqEop6c'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca/support/model.pxie-5654.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/NationalInstruments/PXIe_5654.py,https://qcodes.github.io/Qcodes_contrib_drivers/examples/NationalInstruments_RFSG.html,27815.61,,,https://www.apexwaves.com/pdf/manuals/PXIe-5654/ni-pxie-5654-getting-started-guide.pdf,"from typing import Optional
from .RFSG import NI_RFSG
from qcodes.utils.validators import Numbers


class NationalInstruments_PXIe_5654(NI_RFSG):
    r""""""
    Device-specific driver for the PXIe-5654 signal generator. See the NI_RFSG
    class for further details.

    Args:
        name: Name for this instrument
        resource: Identifier for this instrument in NI MAX.
        dll_path: path to the NI-RFSG library DLL. If not provided, use the
            default location,
            ``C:\Program Files\IVI Foundation\IVI\bin\NiRFSG_64.dll``.
        id_query: whether to perform an ID query on initialization
        reset_device: whether to reset the device on initialization
    """"""
    def __init__(self, name: str, resource: str,
                 dll_path: Optional[str] = None,
                 id_query: bool = False,
                 reset_device: bool = False,
                 **kwargs):

        super().__init__(name=name, resource=resource, dll_path=dll_path,
                         id_query=id_query, reset_device=reset_device,
                         **kwargs)

        # device-specific parameter limits
        self.frequency.vals = Numbers(250e3, 20e9)
        self.power_level.vals = Numbers(-7, 15)

        # check for amplitude extender and update power limits accordingly
        model = self.IDN()[""model""]
        if ""PXIe-5696"" in model:
            self.power_level.vals = Numbers(-110, 24)


NI_PXIe_5654 = NationalInstruments_PXIe_5654
"
62,5800.0,USA,"The AWG520's unique design combines a graphical editing display with powerful output capabilities to simplify the creation of arbitrary and complex waveforms and enable easy on-screen waveform editing. With the AWG520's many built-in intuitive and powerful features, you can easily develop and edit custom waveforms. Option 03 adds an independent 10–bit-wide digital data port that can be used in conjunction with marker outputs for data generation up to 14–bits wide at up to 1 GHz (14–bits, AWG520). Direct waveform transfer capability makes the AWG520 the perfect complement to selected Tektronix oscilloscopes.",AWG 520,580.0,"Tektronix, Inc., historically widely known as Tek, is an American company best known for manufacturing test and measurement devices such as [oscilloscopes](https://en.wikipedia.org/wiki/Oscilloscope), [logic analyzers](https://en.wikipedia.org/wiki/Logic_analyzer), and video and mobile test protocol equipment.
",Qcodes Community,Tektronix,"[OrderedDict([('id', 'attzfMoJltngjLsme'), ('width', 2700), ('height', 487), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Yk4fEYS3Xg6iwQd4rYZnTw/7Zkla4HnvscO18VYF5kzAoEARNa8vsmJ4FgDw0s3WFz3XC3uiSo4Y-tNO4a7Lx3Q8T-u01JdeaNcHAgj_-uthw/GGWzcoJGXu4lukgV27iMaGFDO1ZgnMIO_CUGN7O7rJk'), ('filename', 'tek.jfif'), ('size', 88833), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/h2qL_vjOhZaWUJioVUwfTg/yPEjUaHraXCNuyRFhfVmkUF7uYlChxENVTNI3BPd6LecpsmxmwYkair9LwGP4Bt9AoPnMWLJ1cyq6DHBFozQJg/epibu-T1Te-uMYfpIVGa6Ffj9OhMYrhgGsY6iukjioM'), ('width', 200), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aaQhd1e3804Uwh6S8RvZRQ/l0HPovgnMh9YIQIbwIQf5yfJP5hH70TcJEbi-H_573m_d2tBL45xhI35idMX3ynREnZmtNCV4A8duWfqRIKJaQ/t74DbaTyCi0Q-gIyx_DIKFemz6pS8VLtp2fX2zYbo4U'), ('width', 2700), ('height', 487)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/1qbO_LRtT23qEeaQkpiUyQ/FlzQjfMYno5DLhp3eGZzg5pVuL81DX3ypxZ-DrxvpoWwsEoYXWjjBAsvhRY23xXCOnuoQZSsdXjoDtmW5DnuCg/zpmOx-ced12Bk2CsL2EUFpbLLlIotLiDK-7N2KfqbMA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en,Write a Python script that uses Qcodes Community to connect to a AWG520 RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",AWG520,https://download.tek.com/datasheet/76W_11846_5_1.pdf,"[OrderedDict([('id', 'attxWYvLE8okBv36J'), ('width', 800), ('height', 435), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rbSqey6mmYRX8D5i9CqswA/J01E56BEv6qz5E6T70crLxFsdoxd3a2pMaSSd3BB9ZZLycTON0RPjf_YAN5ZglzUxeOiufDbH_MKbpWE-9rh6RqN99Kjea8u7dXba-na8RI/dnq_zeXMSqhX8esWs8sAdcqHaQdNkm2OyEi0rukehdA'), ('filename', 'Tektronix_AWG520.jpg'), ('size', 100741), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/8SAqK8lXng9RZ0XUurh9Wg/KDZGR24s2Eo1mu1qxjesd7IeE_EkrDrgLFQqIE9aP4tT5VkjHlwZ4gXO6mG3Q1uWo1L-UWW0azWymVR3nQY6GA/_N7xynH6wsvFhM3JhOgsnpSox5Tnt_nIWkq0OdFBWO0'), ('width', 66), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/I01eWD-tgr8KcLCtYn9tBA/LJDlUVvUSXMMGeDTbhOFUu3ofM6mBUSo_ovo35vvYtkVAOgmOdxEW3IXAiDDtE60aF1x6bKKB8gwKVBgeCiO5Q/iXkLfdTSd45sEdh1FwxWdO_HYEfuUGzehTdSY466UmY'), ('width', 800), ('height', 435)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/60aSfnh1FSUZR6s9lo_DNQ/3S4JdHwVNQzyRIGp5_sotiVQAs4qHpH6ou_YBdoj_F3YEVKGNVqTWXxRE0X8RyaEm4BfjtHhwAVmn8s-b2mwww/QQL1F0cRIXgdQZhC7KvLze7CjQQhRgFmJVPP3pLbuaw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en/datasheet/awg520,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Tektronix/AWG520.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Tektronix/AWG520.py,,,True,,"# Tektronix_AWG520.py class, to perform the communication between the Wrapper and the device
# Pieter de Groot <pieterdegroot@gmail.com>, 2008
# Martijn Schaafsma <qtlab@mcschaafsma.nl>, 2008
# Vishal Ranjan, 2012
# Ron schutjens, 2012
# Adriaan Rol, 2016 Ported to QCodes
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


import time
import logging
import numpy as np
import struct
from qcodes import VisaInstrument, validators as vals


class Tektronix_AWG520(VisaInstrument):
    """"""
    This is the python driver for the Tektronix AWG520
    Arbitrary Waveform Generator

    Work pending:

        1) Get All
        2) Remove test_send??
        3) Add docstrings

    Work pending:

        use inheritance for common use with 520, currently contains
        a lot of repetition
    """"""

    def __init__(self, name, address, reset=False, clock=1e9, numpoints=1000,
                 **kw):
        """"""
        Initializes the AWG520.

        Args:
            name (str)    : name of the instrument
            address (str) : GPIB address (Note: 520 cannot be controlled
                               via ethernet)
            reset (bool)     : resets to default values, default=false
            numpoints (int)  : sets the number of datapoints

        Output:
            None
        """"""
        super().__init__(name, address, **kw)

        self._address = address
        self._values = {}
        self._values['files'] = {}
        self._clock = clock
        self._numpoints = numpoints
        self._fname = ''

        self.add_function('reset', call_cmd='*RST')
        self.add_parameter('state',
                           get_cmd=self.get_state)

        # Add parameters
        self.add_parameter('trigger_mode',
                           get_cmd='AWGC:RMOD?',
                           set_cmd='AWGC:RMOD ' + '{}',
                           vals=vals.Enum('CONT', 'TRIG', 'ENH', 'GAT'))
        self.add_parameter('trigger_impedance',
                           unit='Ohm',
                           label='Trigger impedance (Ohm)',
                           get_cmd='TRIG:IMP?',
                           set_cmd='TRIG:IMP '+'{}',
                           vals=vals.Enum(50, 1000),
                           get_parser=float)
        self.add_parameter('trigger_level',
                           unit='V',
                           label='Trigger level (V)',
                           get_cmd='TRIG:LEV?',
                           set_cmd='TRIG:LEV '+'{:.3f}',
                           vals=vals.Numbers(-5, 5),
                           get_parser=float)

        self.add_parameter('clock_freq',
                           label='Clock frequency (Hz)',
                           get_cmd='SOUR:FREQ?',
                           set_cmd='SOUR:FREQ '+'{}',
                           vals=vals.Numbers(1e6, 1e9),
                           get_parser=float)
        # Todo check if max freq is 1.2 GHz for the AWG 520 aswell
        self.add_parameter('numpoints',
                           label='Number of datapoints per wave',
                           get_cmd=self._do_get_numpoints,
                           set_cmd=self._do_set_numpoints,
                           vals=vals.Ints(100, int(1e9)))

        for ch in [1, 2]:
            amp_cmd = 'SOUR{}:VOLT:LEV:IMM:AMPL'.format(ch)
            offset_cmd = 'SOUR{}:VOLT:LEV:IMM:OFFS'.format(ch)

            self.add_parameter(
                'ch{}_filename'.format(ch), set_cmd=self._gen_ch_set_func(
                    self._do_set_filename, ch), vals=vals.Anything())
            self.add_parameter('ch{}_amp'.format(ch),
                               label='Amplitude channel {} (V)'.format(ch),
                               unit='V',
                               get_cmd=amp_cmd + '?',
                               set_cmd=amp_cmd + ' {:.6f}',
                               vals=vals.Numbers(0.02, 2.0),
                               get_parser=float)

            self.add_parameter('ch{}_offset'.format(ch),
                               label='Offset channel {} (V)'.format(ch),
                               unit='V',
                               get_cmd=offset_cmd + '?',
                               set_cmd=offset_cmd + ' {:.3f}',
                               vals=vals.Numbers(-1.0, 1.0),
                               get_parser=float)
            self.add_parameter('ch{}_status'.format(ch),
                               get_cmd='OUTP{}?'.format(ch),
                               set_cmd='OUTP{}'.format(ch) + ' {}',
                               vals=vals.Enum('ON', 'OFF'),
                               get_parser=float)

            for j in [1, 2]:
                # TODO: check that 520 does not have marker delay feature
                # m_del_cmd = 'SOUR{}:MARK{}:DEL'.format(ch, j)
                m_high_cmd = 'SOUR{}:MARK{}:VOLT:LEV:IMM:HIGH'.format(ch, j)
                m_low_cmd = 'SOUR{}:MARK{}:VOLT:LEV:IMM:LOW'.format(ch, j)

                self.add_parameter(
                    'ch{}_m{}_high'.format(ch, j),
                    label='Channel {} Marker {} high level (V)'.format(ch, j),
                    get_cmd=m_high_cmd + '?',
                    set_cmd=m_high_cmd + ' {:.3f}',
                    vals=vals.Numbers(-2., 2.),
                    get_parser=float)
                self.add_parameter(
                    'ch{}_m{}_low'.format(ch, j),
                    label='Channel {} Marker {} low level (V)'.format(ch, j),
                    get_cmd=m_low_cmd + '?',
                    set_cmd=m_low_cmd + ' {:.3f}',
                    vals=vals.Numbers(-2., 2.),
                    get_parser=float)

        # Add functions
        if reset:
            self.reset()
        else:
            self.get_all()
        self.connect_message()

    # Functions
    def _gen_ch_set_func(self, fun, ch):
        def set_func(val):
            return fun(ch, val)
        return set_func

    def _gen_ch_get_func(self, fun, ch):
        def get_func():
            return fun(ch)
        return get_func

    # get state AWG
    def get_state(self):
        state = self.visa_handle.ask('AWGC:RSTATE?')
        if state.startswith('0'):
            return 'Idle'
        elif state.startswith('1'):
            return 'Waiting for trigger'
        elif state.startswith('2'):
            return 'Running'
        else:
            logging.error(__name__ + ' : AWG in undefined state')
            return 'error'

    def start(self):
        self.visa_handle.write('AWGC:RUN')
        return

    def stop(self):
        self.visa_handle.write('AWGC:STOP')

    def get_folder_contents(self):
        return self.visa_handle.ask('mmem:cat?')

    def get_current_folder_name(self):
        return self.visa_handle.ask('mmem:cdir?')

    def set_current_folder_name(self, file_path):
        self.visa_handle.write('mmem:cdir ""%s""' % file_path)

    def change_folder(self, dir):
        self.visa_handle.write('mmem:cdir ""%s""' % dir)

    def goto_root(self):
        self.visa_handle.write('mmem:cdir')

    def make_directory(self, dir, root):
        """"""
        makes a directory
        if root = True, new dir in main folder
        """"""
        if root:
            self.goto_root()
            self.visa_handle.write('MMEMory:MDIRectory ""{}""'.format(dir))
        else:
            self.visa_handle.write('MMEMory:MDIRectory ""{}""'.format(dir))

    def get_all(self, update=True):
        # TODO: fix bug in snapshot where it tries to get setable only param
        # return self.snapshot(update=update)

        return self.snapshot(update=False)

    def clear_waveforms(self):
        """"""
        Clears the waveform on both channels.

        Input:
            None

        Output:
            None
        """"""
        logging.debug(__name__ + ' : Clear waveforms from channels')
        self.visa_handle.write('SOUR1:FUNC:USER """"')
        self.visa_handle.write('SOUR2:FUNC:USER """"')

    def force_trigger(self):
        """"""
        forces a trigger event (used for wait_trigger option in sequences)

        Ron
        """"""
        return self.visa_handle.write('TRIG:SEQ:IMM')

    def force_logicjump(self):
        """"""
        forces a jumplogic event (used as a conditional event during waveform
        executions)

        note: jump_logic events&mode have to be set properly!

        Ron
        """"""
        return self.visa_handle.write('AWGC:EVEN:SEQ:IMM')

    def set_jumpmode(self, mode):
        """"""
        sets the jump mode for jump logic events, possibilities:
        LOGic,TABle,SOFTware
        give mode as string

        note: jump_logic events&mode have to be set properly!

        Ron
        """"""
        return self.visa_handle.write('AWGC:ENH:SEQ:JMOD %s' % mode)

    def get_jumpmode(self, mode):
        """"""
        get the jump mode for jump logic events

        Ron
        """"""
        return self.visa_handle.ask('AWGC:ENH:SEQ:JMOD?')

    def _do_get_numpoints(self):
        """"""
        Returns the number of datapoints in each wave

        Input:
            None

        Output:
            numpoints (int) : Number of datapoints in each wave
        """"""
        return self._numpoints

    def _do_set_numpoints(self, numpts):
        """"""
        Sets the number of datapoints in each wave.
        This acts on both channels.

        Input:
            numpts (int) : The number of datapoints in each wave

        Output:
            None
        """"""
        logging.debug(__name__ + ' : Trying to set numpoints to %s' % numpts)
        if numpts != self._numpoints:
            logging.warning(__name__ + ' : changing numpoints. This will clear all waveforms!')

        response = 'yes'  # raw_input('type ""yes"" to continue')
        if response == 'yes':
            logging.debug(__name__ + ' : Setting numpoints to %s' % numpts)
            self._numpoints = numpts
            self.clear_waveforms()
        else:
            print('aborted')



    def set_setup_filename(self, fname, force_reload=False):
        if self._fname == fname and not force_reload:
            print('File %s already loaded in AWG520' % fname)
            return
        else:
            self._fname = fname
            filename = ""\%s/%s.seq"" % (fname, fname)
            self.set_sequence(filename=filename)
            print('Waiting for AWG to load file ""%s""' % fname)
            sleeptime = 0.5
            # while state idle is not possible due to timeout error while loading
            t0 = time.time()
            while(time.time()-t0 < 360):
                try:
                    if self.get_state() == 'Idle':
                        break
                except:
                    time.sleep(sleeptime)
                    print('.')
            self.get_state()
            print('Loading file took %.2fs' % (time.time()-t0))
            return

    def _do_set_filename(self, name, channel):
        """"""
        Specifies which file has to be set on which channel
        Make sure the file exists, and the numpoints and clock of the file
        matches the instrument settings.

        If file doesn't exist an error is raised, if the numpoints doesn't match
        the command is neglected

        Input:
            name (str) : filename of uploaded file
            channel (int) : 1 or 2, the number of the designated channel

        Output:
            None
        """"""
        logging.debug(__name__ + ' : Try to set {} on channel {}'.format(
                      name, channel))
        exists = False
        if name in self._values['files']:
            exists = True
            logging.debug(__name__ + ' : File exists in loacal memory')
            self._values['recent_channel_%s' % channel] = self._values[
                'files'][name]
            self._values['recent_channel_%s' % channel]['filename'] = name
        else:
            logging.debug(__name__ + ' : File does not exist in memory, \
            reading from instrument')
            lijst = self.visa_handle.ask('MMEM:CAT? ""MAIN""')
            bool = False
            bestand = """"
            for i in range(len(lijst)):
                if (lijst[i] =='""'):
                    bool = True
                elif (lijst[i] == ','):
                    bool = False
                    if (bestand == name):
                        exists = True
                    bestand = """"
                elif bool:
                    bestand = bestand + lijst[i]
        if exists:
            data = self.visa_handle.ask('MMEM:DATA? ""%s""' %name)
            logging.debug(__name__  + ' : File exists on instrument, loading \
            into local memory')
            # string alsvolgt opgebouwd: '#' <lenlen1> <len> 'MAGIC 1000\r\n' '#' <len waveform> 'CLOCK ' <clockvalue>
            len1 = int(data[1])
            len2 = int(data[2:2+len1])
            i = len1
            tekst = """"
            while (tekst !='#'):
                tekst = data[i]
                i = i+1
            len3 = int(data[i])
            len4 = int(data[i+1:i+1+len3])

            w = []
            m1 = []
            m2 = []

            for q in range(i+1+len3, i+1+len3+len4, 5):
                j = int(q)
                c, d = struct.unpack('<fB', data[j:5+j])
                w.append(c)
                m2.append(int(d/2))
                m1.append(d-2*int(d/2))

            clock = float(data[i+1+len3+len4+5:len(data)])

            self._values['files'][name] = {}
            self._values['files'][name]['w'] = w
            self._values['files'][name]['m1'] = m1
            self._values['files'][name]['m2'] = m2
            self._values['files'][name]['clock'] = clock
            self._values['files'][name]['numpoints'] = len(w)

            self._values['recent_channel_%s' %channel] = self._values['files'][name]
            self._values['recent_channel_%s' %channel]['filename'] = name
        else:
            logging.error(__name__ + ' : Invalid filename specified %s' %name)

        if (self._numpoints==self._values['files'][name]['numpoints']):
            logging.debug(__name__  + ' : Set file %s on channel %s' % (name, channel))
            self.visa_handle.write('SOUR%s:FUNC:USER ""%s"",""MAIN""' % (channel, name))
        else:
            self.visa_handle.write('SOUR%s:FUNC:USER ""%s"",""MAIN""' % (channel, name))
            logging.warning(__name__  + ' : Verkeerde lengte %s ipv %s'
                %(self._values['files'][name]['numpoints'], self._numpoints))


    #  Ask for string with filenames
    def get_filenames(self):
        logging.debug(__name__ + ' : Read filenames from instrument')
        return self.visa_handle.ask('MMEM:CAT? ""MAIN""')

    def return_self(self):
        return self
    # Send waveform to the device

    def send_waveform(self, w, m1, m2, filename, clock):
        """"""
        Sends a complete waveform. All parameters need to be specified.
        choose a file extension 'wfm' (must end with .pat)
        See also: resend_waveform()

        Input:
            w (float[numpoints]) : waveform
            m1 (int[numpoints])  : marker1
            m2 (int[numpoints])  : marker2
            filename (str)    : filename
            clock (int)          : frequency (Hz)

        Output:
            None
        """"""
        logging.debug(__name__ + ' : Sending waveform %s to instrument' % filename)

        # Check for errors
        dim = len(w)

        if (not((len(w) == len(m1)) and ((len(m1) == len(m2))))):
            return 'error'
        self._values['files'][filename] = {}
        self._values['files'][filename]['w'] = w
        self._values['files'][filename]['m1'] = m1
        self._values['files'][filename]['m2'] = m2
        self._values['files'][filename]['clock'] = clock
        self._values['files'][filename]['numpoints'] = len(w)

        m = m1 + np.multiply(m2, 2)
        ws = ''
        for i in range(0, len(w)):
            ws = ws + struct.pack('<fB', w[i], int(m[i]))
        s1 = 'MMEM:DATA ""%s"",' % filename
        s3 = 'MAGIC 1000\n'
        s5 = ws
        s6 = 'CLOCK %.10e\n' % clock

        s4 = '#' + str(len(str(len(s5)))) + str(len(s5))
        lenlen = str(len(str(len(s6) + len(s5) + len(s4) + len(s3))))
        s2 = '#' + lenlen + str(len(s6) + len(s5) + len(s4) + len(s3))

        mes = s1 + s2 + s3 + s4 + s5 + s6
        self.visa_handle.write(mes)

    def send_pattern(self, w, m1, m2, filename, clock):
        """"""
        Sends a pattern file.
        similar to waveform except diff file extension
        number of poitns different. diff byte conversion
        See also: resend_waveform()

        Input:
            w (float[numpoints]) : waveform
            m1 (int[numpoints])  : marker1
            m2 (int[numpoints])  : marker2
            filename (str)    : filename
            clock (int)          : frequency (Hz)

        Output:
            None
        """"""
        logging.debug(__name__ + ' : Sending pattern %s to instrument' % filename)

        # Check for errors
        dim = len(w)
        if (not((len(w)==len(m1)) and ((len(m1)==len(m2))))):
            return 'error'
        self._values['files'][filename]={}
        self._values['files'][filename]['w']=w
        self._values['files'][filename]['m1']=m1
        self._values['files'][filename]['m2']=m2
        self._values['files'][filename]['clock']=clock
        self._values['files'][filename]['numpoints']=len(w)

        m = m1 + np.multiply(m2, 2)
        ws = ''
        for i in range(0, len(w)):
            ws = ws + struct.pack('<fB', w[i], int(m[i]))

        s1 = 'MMEM:DATA ""%s"",' % filename
        s3 = 'MAGIC 2000\n'
        s5 = ws
        s6 = 'CLOCK %.10e\n' % clock

        s4 = '#' + str(len(str(len(s5)))) + str(len(s5))
        lenlen=str(len(str(len(s6) + len(s5) + len(s4) + len(s3))))
        s2 = '#' + lenlen + str(len(s6) + len(s5) + len(s4) + len(s3))

        mes = s1 + s2 + s3 + s4 + s5 + s6
        self.visa_handle.write(mes)


    def resend_waveform(self, channel, w=[], m1=[], m2=[], clock=[]):
        """"""
        Resends the last sent waveform for the designated channel
        Overwrites only the parameters specifiedta

        Input: (mandatory)
            channel (int) : 1 or 2, the number of the designated channel

        Input: (optional)
            w (float[numpoints]) : waveform
            m1 (int[numpoints])  : marker1
            m2 (int[numpoints])  : marker2
            clock (int) : frequency

        Output:
            None
        """"""
        filename = self._values['recent_channel_%s' %channel]['filename']
        logging.debug(__name__ + ' : Resending %s to channel %s' % (filename, channel))


        if (w==[]):
            w = self._values['recent_channel_%s' %channel]['w']
        if (m1==[]):
            m1 = self._values['recent_channel_%s' %channel]['m1']
        if (m2==[]):
            m2 = self._values['recent_channel_%s' %channel]['m2']
        if (clock==[]):
            clock = self._values['recent_channel_%s' %channel]['clock']

        if not ( (len(w) == self._numpoints) and (len(m1) == self._numpoints) and (len(m2) == self._numpoints)):
            logging.error(__name__ + ' : one (or more) lengths of waveforms do not match with numpoints')

        self.send_waveform(w, m1, m2, filename, clock)
        self.do_set_filename(filename, channel)

    def delete_all_waveforms_from_list(self):
        """"""
        for compatibillity with awg, is not relevant for AWG520 since it
        has no waveform list
        """"""
        pass

    def send_sequence(self, wfs, rep, wait, goto, logic_jump, filename):
        """"""
        Sends a sequence file (for the moment only for ch1)

        Args:

           wfs:  list of filenames

        Returs:

            None
        """"""
        logging.debug(__name__ + ' : Sending sequence %s to instrument' % filename)
        N = str(len(rep))
        try:
            wfs.remove(N*[None])
        except ValueError:
            pass
        s1 = 'MMEM:DATA ""%s"",' % filename

        if len(np.shape(wfs)) ==1:
            s3 = 'MAGIC 3001\n'
            s5 = ''
            for k in range(len(rep)):
                s5 = s5+ '""%s"",%s,%s,%s,%s\n'%(wfs[k],rep[k],wait[k],goto[k],logic_jump[k])

        else:
            s3 = 'MAGIC 3002\n'
            s5 = ''
            for k in range(len(rep)):
                s5 = s5+ '""%s"",""%s"",%s,%s,%s,%s\n'%(wfs[0][k],wfs[1][k],rep[k],wait[k],goto[k],logic_jump[k])

        s4 = 'LINES %s\n'%N
        lenlen=str(len(str(len(s5) + len(s4) + len(s3))))
        s2 = '#' + lenlen + str(len(s5) + len(s4) + len(s3))


        mes = s1 + s2 + s3 + s4 + s5
        self.visa_handle.write(mes)

    def send_sequence2(self,wfs1,wfs2,rep,wait,goto,logic_jump,filename):
        """"""
        Sends a sequence file

        Args:
            wfs1:  list of filenames for ch1 (all must end with .pat)
            wfs2: list of filenames for ch2 (all must end with .pat)
            rep: list
            wait: list
            goto: list
            logic_jump: list
            filename: name of output file (must end with .seq)

        Returns:
            None
        """"""
        logging.debug(__name__ + ' : Sending sequence %s to instrument' % filename)


        N = str(len(rep))
        s1 = 'MMEM:DATA ""%s"",' % filename
        s3 = 'MAGIC 3002\n'
        s4 = 'LINES %s\n'%N
        s5 = ''


        for k in range(len(rep)):
            s5 = s5+ '""%s"",""%s"",%s,%s,%s,%s\n'%(wfs1[k],wfs2[k],rep[k],wait[k],goto[k],logic_jump[k])

        lenlen=str(len(str(len(s5) + len(s4) + len(s3))))
        s2 = '#' + lenlen + str(len(s5) + len(s4) + len(s3))


        mes = s1 + s2 + s3 + s4 + s5
        self.visa_handle.write(mes)

    def set_sequence(self,filename):
        """"""
        loads a sequence file on all channels.
        Waveforms/patterns to be executed on respective channel
        must be defined inside the sequence file itself
        make sure to send all waveforms before setting a seq
        """"""
        self.visa_handle.write('SOUR%s:FUNC:USER ""%s"",""MAIN""' % (1, filename))

    def load_and_set_sequence(self,wfs,rep,wait,goto,logic_jump,filename):
        """"""
        Loads and sets the awg sequecne
        """"""
        self.send_sequence(wfs,rep,wait,goto,logic_jump,filename)
        self.set_sequence(filename)
"
64,5.0,USA,"The LDA-906V Digital Attenuator is a highly accurate, bidirectional, 50 Ohm step attenuator. The LDA-906V provides calibrated attenuation from 200 to 6000 MHz with an amazing step size of 0.1 dB and typical accuracy <0.25 dB over 90 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-906V ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-906V,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attEHHnQFKIW24UvA'), ('width', 394), ('height', 272), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zeeF4yiVae89Ik38o7pIBw/eLePw-86moHmyJFqsNZ_XseV1lOa3R2XNyQCo3hZhIyUEtRrI4fd7mC8Of9-vWOxSYwxESgDHNfFZv1BRz11N9Efr6ZoIU7iB8Z6ntbJxKY/UPdKRB6FPjjAntssoquMWgq_V42g2xxK0Xc51Tb0Bis'), ('filename', 'vaunix-lda-133.png'), ('size', 87729), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iX6dmu2EM7zupdfwfKZQhg/5G1nethi_2McMyJrNW73ljVlQx2kma5ncIoBbXrq5LRDGOm5XiE1fAa-XveKbwFpaKZ62wZBp8NPiOO7CR3vRA/Coq1Imb9dYZaPLKt4iT5W39wU5haweXMQYNQ9aMsIPk'), ('width', 52), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/03fVvq2aWZdscU_6Tn2BoA/p4JVXGtU0rPW6bByT6v3-MwHJVFGQb3GWiTM9Az0IVQChmAfWYs9FiGSYMwF11C0nhoL9Jl9DvTQXDpdh_gWtw/QW4hx8X4is5w7_b399-hhUrOgtTHFALWdD-Xc4xg6wo'), ('width', 394), ('height', 272)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LV412TXXoQ1m6_Bb3mhpwQ/mfxOyy2vQ7LWlEgl5vppg7myY2Wlmrk6elUqDffGHzSwUZ2f-uffDs_qd7drGnIKWdwo984x6FOAUG9P2A_oOA/icgsaMOR6PSU1nA1c9pxnliQWsmmTRaKg2XL52X8dHQ'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-906v-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,559.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
74,110.6,"Cleveland, Ohio, United States","6½ digit bench/system digital multimeter with large 5"" (12.7cm) multi touch capacitive touchscreen and graphical display. It supports SCPI, TSP® scripting, Keithley 2000 SCPI emulation and Keysight 34401A SCPI emulation language modes.",Keithley 6500,575.0,"Keithley Instruments is a measurement and instrument company headquartered in Solon, Ohio, that develops, manufactures, markets, and sells data acquisition products, as well as complete systems for high-volume production and assembly testing.
",Qcodes Community,Keithley,"[OrderedDict([('id', 'att7PoO6FUHxnCmlK'), ('width', 900), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/NeO02HKgoFPV3DNb9vOFuQ/oUOnoE3G5-QeCMyfgXyg8FqsnOeauIly5GBoFYr9Za8Zrr0680YSs6QaLZbjSLo7PoMQ00w0RPeo8KNMcbYt2atP2MKHb0B4-GyFD_CU3NjI0vDcK8LLowKujulyPoKADY3pAVNPMgBCEnKshd91bg/0TQRCCKsz0gJy1NFGfGsJsjM3QdRGQ8MoPDdSPPJdCA'), ('filename', 'keithley-a-tektronix-company-vector-logo.png'), ('size', 4698), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZnO_WGoJzGnSlUctBDqWew/3IevGml9FN4w1wC95p0SxkWfy9Or2KbV9QY3D0d1q_Sej0Zp6VH3gJgIsG75z_GB4Ob04GciukrNLZqRSkqxUA/uTVK9YUV68keAgFRR7IKhzRM4i5JrKr9C0Qtw0T9sOo'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qLTzFSMkPTLA6g9lkPJmsg/zyqBAfflKt_8lvw15arx51Xd9fYqp17v4WFX71buJSr6egMKaBsN1l-whDpCpYtjxp2PsM9RQH8m8m3yxtquXw/52L-EUk-XUGAnw0eN3grANao1iKKOIuxmavJUlgreXQ'), ('width', 900), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DD76F3FSvA0sLYAXfST7DA/Y9vIBAtL1_Fy2BC2SLgyVwDmN2BpqCN-RepHfRd6uBzNVwzsKrLvHbBvYJti5ZoIf_VLDikmzoIRrzQ6Veuw7g/bIGTWhsUS3UoKan-BcRmMtd0TCP2TPvDoZpnD5k1pXQ'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en,Write a Python script that uses Qcodes Community to connect to a DMM6500 ,https://en.wikipedia.org/wiki/Multimeter,,"A multimeter (also known as a volt-ohm-milliammeter, volt-ohmmeter or VOM) is a measuring instrument that can measure multiple electrical properties. A typical multimeter can measure voltage, resistance, and current, in which case can be used as a voltmeter, ammeter, and ohmmeter. Some feature the measurement of additional properties such as temperature and capacitance.",DMM6500,https://www.farnell.com/datasheets/2607096.pdf?_ga=2.134065926.922366921.1579493884-611634051.1579231713,"[OrderedDict([('id', 'attptYwWAOrQzTAZz'), ('width', 320), ('height', 169), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/NRnmfFNMUnkVqE5tQHJAXA/u6w6nju2-6f4M8L5S2g1_KGpkawJMWsxKOy5x1SZJi4YShjoVeAlISBPY0EqE7vJ7pNuXE1rUd-g1qY8CYf4BYL723gAQT-gJQLQ0GngJHQ/UzZxBI-e6x7X5HRr4o82bmOhxxecYPGem5r26ETajI8'), ('filename', '6500.webp'), ('size', 7262), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/14YFrAxBOCAP_rzbzuuJcQ/Q5GHo0wJS2-vje3Et7_aqo_XZgvHzoKcoWqF2p9-BRUZH2RqrUYT1bbwAtAjyuRLqK58AJscEcWju3qXhU8BAe--X7Y3kOhejKtOtdTQPMY/-vOYgO7yB9DHVg65EzzeCCHoJ7cEPtWAOVA1uGTyOuE'), ('width', 68), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/s9vkISqMvKmqCKqHFe5dBw/QTS6TuobWB1ey6xaDVuSMm-38CjL61PWlGCf3v2kWqsfYGATIlVkYcpl86GTCq9bcK9suOebcsgcVaSDQbLStq6uB6BaEu276XVzDkPhdHg/mYYBTWky54oEAMJeh4121K31kvxHSi-E_j-55eqKI4s'), ('width', 320), ('height', 169)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/TeVRUQ1qU0uSoRYfHSSiIQ/JHci_vs123XKTOi574DShDlqfsQG5fdLIb-QlqUum3uSJ14fvlS5d6nWiJ3SWfA4EyvAaA2aTa-N7xySm9ofF0SdPvWqwjqenUd5D1e5MNU/So5M0KjZaSN-Tn6vim4D3kaXU8KRln1DwrtaoIXK-8A'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en/products/keithley/digital-multimeter/dmm6500,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Tektronix/Keithley_6500.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Tektronix_Keithley_6500.ipynb,1670.0,,,,"from qcodes.instrument.visa import VisaInstrument
from qcodes.instrument import InstrumentChannel
from qcodes.utils.validators import Numbers
from functools import partial
from .Keithley_2000_Scan import Keithley_2000_Scan_Channel


class Keithley_Sense(InstrumentChannel):
    """"""
    This is the class for a measurement channel, i.e. the quantity to be measured (e.g. resistance, voltage).
    """"""
    def __init__(self, parent: VisaInstrument, name: str, channel: str) -> None:
        """"""

        Args:
            parent: VisaInstrument instance of the Keithley Digital Multimeter
            name: Channel name (e.g. 'CH1')
            channel: Name of the quantity to measure (e.g. 'VOLT' for DC voltage measurement)
        """"""
        valid_channels = ['VOLT', 'CURR', 'RES', 'FRES', 'TEMP']
        if channel.upper() not in valid_channels:
            raise ValueError(f""Channel must be one of the following: {', '.join(valid_channels)}"")
        super().__init__(parent, name)

        self.add_parameter('measure',
                           unit=self._get_unit(channel),
                           label=self._get_label(channel),
                           get_parser=float,
                           get_cmd=partial(self.parent._measure, channel),
                           docstring=""Measure value of chosen quantity (Current/Voltage/Resistance/Temperature).""
                           )

        self.add_parameter('nplc',
                           label='NPLC',
                           get_parser=float,
                           get_cmd=f""SENS:{channel}:NPLC?"",
                           set_cmd=f""SENS:{channel}:NPLC {{:.4f}}"",
                           vals=Numbers(0.0005, 12),
                           docstring=""Integration rate (Number of Power Line Cycles)""
                           )

    @staticmethod
    def _get_unit(quantity: str) -> str:
        """"""

        Args:
            quantity: Quantity to be measured

        Returns: Corresponding unit string

        """"""
        channel_units = {'VOLT': 'V', 'CURR': 'A', 'RES': 'Ohm', 'FRES': 'Ohm', 'TEMP': 'C'}
        return channel_units[quantity]

    @staticmethod
    def _get_label(quantity: str) -> str:
        """"""

        Args:
            quantity: Quantity to be measured

        Returns: Corresponding parameter label

        """"""
        channel_labels = {'VOLT': 'Measured voltage.',
                          'CURR': 'Measured current.',
                          'RES': 'Measured resistance',
                          'FRES': 'Measured resistance (4w)',
                          'TEMP': 'Measured temperature'}
        return channel_labels[quantity]


class Keithley_6500(VisaInstrument):
    """"""
    This is the qcodes driver for a Keithley DMM6500 digital multimeter.
    """"""
    def __init__(self, name: str,
                 address: str,
                 terminator=""\n"",
                 **kwargs):
        """"""
        Initialize instance of digital multimeter Keithley6500. Check if scanner card is inserted.
        Args:
            name: Name of instrument
            address: Address of instrument
            terminator: Termination character for SCPI commands
            **kwargs: Keyword arguments to pass to __init__ function of VisaInstrument class
        """"""
        super().__init__(name, address, terminator=terminator, **kwargs)
        for quantity in ['VOLT', 'CURR', 'RES', 'FRES', 'TEMP']:
            channel = Keithley_Sense(self, quantity.lower(), quantity)
            self.add_submodule(quantity.lower(), channel)

        self.add_parameter('active_terminal',
                           label='active terminal',
                           get_cmd=""ROUTe:TERMinals?"",
                           docstring=""Active terminal of instrument. Can only be switched via knob on front panel."")

        self.add_parameter('resistance',
                           unit='Ohm',
                           label='Measured resistance',
                           get_parser=float,
                           get_cmd=partial(self._measure, 'RES'),
                           )

        self.add_parameter('resistance_4w',
                           unit='Ohm',
                           label='Measured resistance',
                           get_parser=float,
                           get_cmd=partial(self._measure, 'FRES')
                           )

        self.add_parameter('voltage_dc',
                           unit='V',
                           label='Measured DC voltage',
                           get_parser=float,
                           get_cmd=partial(self._measure, 'VOLT')
                           )

        self.add_parameter('current_dc',
                           unit='A',
                           label='Measured DC current',
                           get_parser=float,
                           get_cmd=partial(self._measure, 'CURR')
                           )

        self.add_parameter('temperature',
                           unit='C',
                           label='Measured temperature',
                           get_parser=float,
                           get_cmd=partial(self._measure, 'TEMP')
                           )

        self.connect_message()

        # check if scanner card is connected
        # If no scanner card is connected, the query below returns ""Empty Slot"".
        # For the Scanner Card 2000-SCAN used for development of this driver the output was
        # ""2000,10-Chan Mux,0.0.0a,00000000"".
        scan_idn_msg = self.ask("":SYSTem:CARD1:IDN?"")
        if scan_idn_msg != ""Empty Slot"":
            msg_parts = scan_idn_msg.split("","")
            print(f""Scanner card {msg_parts[0]}-SCAN detected."")
            for ch_number in range(1, 11):
                scan_channel = Keithley_2000_Scan_Channel(self, ch_number)
                self.add_submodule(f""ch{ch_number:d}"", scan_channel)

    # only measure if front terminal is active
    def _measure(self, quantity: str) -> str:
        """"""
        Measure given quantity at front terminal of the instrument. Only perform measurement if front terminal is
        active. Send SCPI command to measure and read out given quantity.
        Args:
            quantity: Quantity to be measured

        Returns: Measurement result

        """"""
        if self.active_terminal.get() == 'FRON':
            return self.ask(f""MEAS:{quantity}?"")
        else:
            raise RuntimeError(""Rear terminal is active instead of front terminal."")
"
88,2.0,"COPENHAGEN, DENMARK","QDAC-II is the next generation of the successful QDAC from QDevil. It has all the outstanding features from its predecessor but is even more versatile and with superior performance. QDAC-II is a high-precision ultra-low-noise computer controlled DAC with 24 voltage generators, operating at a sample rate of 1MS/s – a thousand times faster than its predecessor. It is designed for DC and intermediate-frequency control of quantum devices, including, for example, gate electrodes and flux bias coils in qubits, but is a very versatile instrument that can be used for many other purposes. Each of the 24 channels has five voltage generators working in parallel: One for DC, a sine generator, a triangle generator, a square wave generator, and an arbitrary waveform generator (1 million points/second). Additionally, each channel is equipped with a DC current sensor with a resolution down to a few tens of pA, typically used for gate leakage detection and with sample rates up to 3 kHz.",Qdac 2,424.0,"Founded in 2016, QDevil is an international quantum technology company focused on developing and manufacturing auxiliary electronics and specialized components, operating from mK to room temperature. The mission is to accelerate research and development in quantum electronics labs. To fulfill the mission QDevil helps customers around the world by supplying world-class auxiliary electronics.
",Qcodes Community,Qdevil,"[OrderedDict([('id', 'attz9erwtKcDDy955'), ('width', 150), ('height', 22), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Iaef-6NIciOWKsa10JxRkQ/2GD5HG7BPockb2ex1jGFrrTiU7BBCn-BUh4yFbVUC5HnbjZi95IkzXzO47AqXvh4ovR1NzYgfo7u3K7F-Iy8CnFqjwnWhHdoP_drQzUgyBk/oOtNVvCMSwDpcFzmES9UhD5dKEVKxrogflaoIXeeec8'), ('filename', 'QM-and-QD-logos4.svg'), ('size', 30131), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FEuZ28mowNgi5RsJVepsLA/nE8QsdJyxc7HF5HxYg-4FFyeNkCTIKwJqjAwoaeytJ-iQqogaf-JVLfsCMLSML3dXxikZxzR6Rup1FkWKPSsp6TdH_lwDt2uwXfZZObRFaw/Mr8sxOK6ErffdVcGCGd9Noq-q8_R0fFznaYT4z6B90Y'), ('width', 150), ('height', 22)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Bc9p_dlutAJiwDTZk-lRuA/xZRaVdQKhbsxI4GHc1mwsR36JbnSB5oSf8NvVCn4V_nuitBVHtQnG-gO3jON58ALpa1lVZoXLx1CboupbmfRHo3f8f4YYwqAuWrV1agWFVk/kFtddMZcEdyeo4wkQWKEZgqJAOXxNMFF7M0ly33iR-U'), ('width', 150), ('height', 22)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZWUIK3fC6Wb-Ng9czNLYlA/m5_LISZrGWJewXrhSx_993pJ9dPAO2-JAj8Mg-w58KQZkiDxtbCozX6QJOc4ji80rHiwF-hC-y3R2Iq50RB-K7PdX7GbvFYACEcEIz4kCkg/5N7AzqvO5ZJj-aPr-dLGjU-y_oooID3NX9eRPyvp5zE'), ('width', 3000), ('height', 3000)]))]))])]",https://qdevil.com/,"Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies, Digital-Analog Converter",https://en.wikipedia.org/wiki/Electric_generator,"['Power Supplies', 'Digital-Analog Converter']","In electricity generation, a generator[1] is a device that converts motive power (mechanical energy) or fuel-based power (chemical energy) into electric power for use in an external circuit. Sources of mechanical energy include steam turbines, gas turbines, water turbines, internal combustion engines, wind turbines and even hand cranks. The first electromagnetic generator, the Faraday disk, was invented in 1831 by British scientist Michael Faraday. Generators provide nearly all of the power for electric power grids.",,,"[OrderedDict([('id', 'att3KT0VioIKKqGNv'), ('width', 300), ('height', 189), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rWSvt_13P_X0En_oYBahrw/C6vWeLYG8U0SKP7rMXL7FYsQLUtc2jvnmXihj5IlcLy0entxrCtzaJm-Vx4FUiyfqaZWpnk1IX39gl4PUhod_EKU-Av-FtRvZe86qeTEAsU/dhYq6pE-x2NJNxViMTnYiC3K1YihIj8TuDjCL0ZPo-Q'), ('filename', 'QDAC-II_01-300x189.jpg'), ('size', 5690), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/I51twKvYWi-umlA_p42IWg/_I_Ghg8_MKj_trt0eBGoVxOztmDB6STSOd83kw4sezJK3xjplgEESKxbCOvW8TFJXmFEYDcLr9w442jfN9qvJQ/1d5fsrJXXWnsJwPqTkMxYbVtLsPMGbn3pcxwIzSwhH4'), ('width', 57), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uH3VqPc62w8_Wm1IwZTpow/TWdTFx6u1KbJnfJZZK0AJk4lvseT0kO8p99LI_zf65XeEJcI7DbsKz8RwpbFRbf4_47ObHzdA1UWchyp5FgFsQ/JuZK1TY_uPhtN3ARiE-KsI9iALZq_LEQ7E6gJrd-aQI'), ('width', 300), ('height', 189)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/t3SRBGOyfjAquJTWOXEEzw/EPCQZvq1MkrTTfXdCAQwaiOpU6VJ5daYENHiVAKMgMAgu2xXoa0O29UZNRCuUp8U6tQ1S20pcY0u7mjsCNcwGw/k9SMwcAtYK7pQXRKYcXGrVrBbA57Cw6CVLqkO52J8UQ'), ('width', 3000), ('height', 3000)]))]))])]",https://qdevil.com/qdac-ii/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QDevil/QDAC2.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QDevil.html#module-qcodes_contrib_drivers.drivers.QDevil.QDAC2,,,,,"import numpy as np
import itertools
import uuid
from time import sleep as sleep_s
from qcodes.instrument.channel import InstrumentChannel, ChannelList
from qcodes.instrument.visa import VisaInstrument
from pyvisa.errors import VisaIOError
from qcodes.utils import validators
from typing import NewType, Tuple, Sequence, List, Dict, Optional
from packaging.version import Version, parse
import abc

# Version 1.2.0
#
# Guiding principles for this driver for QDevil QDAC-II
# -----------------------------------------------------
#
# 1. Each command should be self-contained, so
#
#        qdac.ch02.dc_constant_V(0.1)
#
#    should make sure that channel 2 is in the right mode for outputting
#    a constant voltage.
#
# 2. Numeric values should be in ISO units and/or their unit should be an
#    explicitly part of the function name, like above.  If the numeric is
#    a unit-less number, then prefixed by n_ like
#
#        qdac.n_channels()
#
# 3. Allocation of resources should be automated as much as possible, preferably
#    by python context managers that automatically clean up on exit.  Such
#    context managers have a name with a '_Context' suffix.
#
# 4. Any generator should by default be set to start on the BUS trigger
#    (*TRG) so that it is possible to synchronise several generators without
#    further setup; which also eliminates the need for special cases for the
#    BUS trigger.


#
# Future improvements
# -------------------
#
# - Detect and handle mixing of internal and external triggers (_trigger).
#

error_ambiguous_wave = 'Only one of frequency_Hz or period_s can be ' \
                       'specified for a wave form'


def ints_to_comma_separated_list(array: Sequence[int]) -> str:
    return ','.join([str(x) for x in array])


def floats_to_comma_separated_list(array: Sequence[float]) -> str:
    rounded = [format(x, 'g') for x in array]
    return ','.join(rounded)


def comma_sequence_to_list(sequence: str) -> Sequence[str]:
    if not sequence:
        return []
    return [x.strip() for x in sequence.split(',')]


def comma_sequence_to_list_of_floats(sequence: str) -> Sequence[float]:
    if not sequence:
        return []
    return [float(x.strip()) for x in sequence.split(',')]


def diff_matrix(initial: Sequence[float],
                measurements: Sequence[Sequence[float]]) -> np.ndarray:
    """"""Subtract an array of measurements by an initial measurement
    """"""
    matrix = np.asarray(measurements)
    return matrix - np.asarray(list(itertools.repeat(initial, matrix.shape[1])))


def split_version_string_into_components(version: str) -> List[str]:
    return version.split('-')


""""""External input trigger

There are four 3V3 non-isolated triggers on the back (1, 2, 3, 4).
""""""
ExternalInput = NewType('ExternalInput', int)


class QDac2Trigger_Context:
    """"""Internal Triggers with automatic deallocation

    This context manager wraps an already-allocated internal trigger number so
    that the trigger can be automatically reclaimed when the context exits.
    """"""

    def __init__(self, parent: 'QDac2', value: int):
        self._parent = parent
        self._value = value

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._parent.free_trigger(self)
        # Propagate exceptions
        return False

    @property
    def value(self) -> int:
        """"""internal SCPI trigger number""""""
        return self._value


def _trigger_context_to_value(trigger: QDac2Trigger_Context) -> int:
    return trigger.value


class QDac2ExternalTrigger(InstrumentChannel):
    """"""External output trigger

    There are three 5V isolated triggers on the front (1, 2, 3) and two
    non-isolated 3V3 on the back (4, 5).
    """"""

    def __init__(self, parent: 'QDac2', name: str, external: int):
        super().__init__(parent, name)
        self.add_function(
            name='source_from_bus',
            call_cmd=f'outp:trig{external}:sour bus'
        )
        self.add_parameter(
            name='source_from_input',
            # Route external input to external output
            set_cmd='outp:trig{0}:sour ext{1}'.format(external, '{}'),
            get_parser=int
        )
        self.add_parameter(
            name='source_from_trigger',
            # Route internal trigger to external output
            set_parser=_trigger_context_to_value,
            set_cmd='outp:trig{0}:sour int{1}'.format(external, '{}'),
            get_parser=int
        )
        self.add_parameter(
            name='width_s',
            label='width',
            unit='s',
            set_cmd='outp:trig{0}:widt {1}'.format(external, '{}'),
            get_cmd=f'outp:trig{external}:widt?',
            get_parser=float
        )
        self.add_parameter(
            name='polarity',
            label='polarity',
            set_cmd='outp:trig{0}:pol {1}'.format(external, '{}'),
            get_cmd=f'outp:trig{external}:pol?',
            get_parser=str,
            vals=validators.Enum('inv', 'norm')
        )
        self.add_parameter(
            name='delay_s',
            label='delay',
            unit='s',
            set_cmd='outp:trig{0}:del {1}'.format(external, '{}'),
            get_cmd=f'outp:trig{external}:del?',
            get_parser=float
        )
        self.add_function(
            name='signal',
            call_cmd=f'outp:trig{external}:sign'
        )


class _Channel_Context(metaclass=abc.ABCMeta):

    def __init__(self, channel: 'QDac2Channel'):
        self._channel = channel

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Propagate exceptions
        return False

    def allocate_trigger(self) -> QDac2Trigger_Context:
        """"""Allocate internal trigger

        Returns:
            QDac2Trigger_Context: Context that wraps the trigger
        """"""
        return self._channel._parent.allocate_trigger()

    @abc.abstractmethod
    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        pass

    @abc.abstractmethod
    def start_on_external(self, trigger: ExternalInput) -> None:
        pass

    @abc.abstractmethod
    def abort(self) -> None:
        pass

    def _write_channel(self, cmd: str) -> None:
        self._channel.write_channel(cmd)

    def _write_channel_floats(self, cmd: str, values: Sequence[float]) -> None:
        self._channel.write_channel_floats(cmd, values)

    def _ask_channel(self, cmd: str) -> str:
        return self._channel.ask_channel(cmd)

    def _channel_message(self, template: str) -> None:
        return self._channel._channel_message(template)


class _Dc_Context(_Channel_Context):

    def __init__(self, channel: 'QDac2Channel'):
        super().__init__(channel)
        self._write_channel('sour{0}:dc:trig:sour hold')
        self._trigger: Optional[QDac2Trigger_Context] = None
        self._marker_start: Optional[QDac2Trigger_Context] = None
        self._marker_end: Optional[QDac2Trigger_Context] = None
        self._marker_step_start: Optional[QDac2Trigger_Context] = None
        self._marker_step_end: Optional[QDac2Trigger_Context] = None

    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        """"""Attach internal trigger to DC generator

        Args:
            trigger (QDac2Trigger_Context): trigger that will start DC
        """"""
        self._trigger = trigger
        internal = _trigger_context_to_value(trigger)
        self._write_channel(f'sour{""{0}""}:dc:trig:sour int{internal}')
        self._make_ready_to_start()

    def start_on_external(self, trigger: ExternalInput) -> None:
        """"""Attach external trigger to DC generator

        Args:
            trigger (ExternalInput): trigger that will start DC generator
        """"""
        self._trigger = None
        self._write_channel(f'sour{""{0}""}:dc:trig:sour ext{trigger}')
        self._make_ready_to_start()

    def abort(self) -> None:
        """"""Abort any DC running generator on the channel
        """"""
        self._write_channel('sour{0}:dc:abor')

    def end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of the DC generator

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end
        """"""
        if not self._marker_end:
            self._marker_end = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:dc:mark:end {self._marker_end.value}')
        return self._marker_end

    def start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of the DC generator

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning
        """"""
        if not self._marker_start:
            self._marker_start = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:dc:mark:star {self._marker_start.value}')
        return self._marker_start

    def step_end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of each step

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end of each step
        """"""
        if not self._marker_step_end:
            self._marker_step_end = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:dc:mark:send {self._marker_step_end.value}')
        return self._marker_step_end

    def step_start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of each step

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end of each step
        """"""
        if not self._marker_step_start:
            self._marker_step_start = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:dc:mark:sst {self._marker_step_start.value}')
        return self._marker_step_start

    def _set_delay(self, delay_s: float) -> None:
        self._write_channel(f'sour{""{0}""}:dc:del {delay_s}')

    def _set_triggering(self) -> None:
        self._write_channel('sour{0}:dc:trig:sour bus')
        self._make_ready_to_start()

    def _start(self, description: str) -> None:
        if self._trigger:
            self._make_ready_to_start()
            return self._write_channel(f'tint {self._trigger.value}')
        self._switch_to_immediate_trigger()
        self._write_channel('sour{0}:dc:init')

    def _make_ready_to_start(self) -> None:
        self._write_channel('sour{0}:dc:init:cont on')
        self._write_channel('sour{0}:dc:init')

    def _switch_to_immediate_trigger(self) -> None:
        self._write_channel('sour{0}:dc:init:cont off')
        self._write_channel('sour{0}:dc:trig:sour imm')


class Sweep_Context(_Dc_Context):

    def __init__(self, channel: 'QDac2Channel', start_V: float, stop_V: float,
                 points: int, repetitions: int, dwell_s: float, delay_s: float,
                 backwards: bool, stepped: bool):
        self._repetitions = repetitions
        super().__init__(channel)
        channel.write_channel('sour{0}:volt:mode swe')
        self._set_voltages(start_V, stop_V)
        channel.write_channel(f'sour{""{0}""}:swe:poin {points}')
        self._set_trigger_mode(stepped)
        channel.write_channel(f'sour{""{0}""}:swe:dwel {dwell_s}')
        super()._set_delay(delay_s)
        self._set_direction(backwards)
        self._set_repetitions()
        self._set_triggering()

    def _set_voltages(self, start_V: float, stop_V: float):
        self._write_channel(f'sour{""{0}""}:swe:star {start_V}')
        self._write_channel(f'sour{""{0}""}:swe:stop {stop_V}')

    def _set_trigger_mode(self, stepped: bool) -> None:
        if stepped:
            return self._write_channel('sour{0}:swe:gen step')
        self._write_channel('sour{0}:swe:gen auto')

    def _set_direction(self, backwards: bool) -> None:
        if backwards:
            return self._write_channel('sour{0}:swe:dir down')
        self._write_channel('sour{0}:swe:dir up')

    def _set_repetitions(self) -> None:
        self._write_channel(f'sour{""{0}""}:swe:coun {self._repetitions}')

    def _perpetual(self) -> bool:
        return self._repetitions < 0

    def start(self) -> None:
        """"""Start the DC sweep
        """"""
        self._start('DC sweep')

    def points(self) -> int:
        """"""
        Returns:
            int: Number of steps in the DC sweep
        """"""
        return int(self._ask_channel('sour{0}:swe:poin?'))

    def cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of cycles remaining in the DC sweep
        """"""
        return int(self._ask_channel('sour{0}:swe:ncl?'))

    def time_s(self) -> float:
        """"""
        Returns:
            float: Seconds that it will take to do the sweep
        """"""
        return float(self._ask_channel('sour{0}:swe:time?'))

    def start_V(self) -> float:
        """"""
        Returns:
            float: Starting voltage
        """"""
        return float(self._ask_channel('sour{0}:swe:star?'))

    def stop_V(self) -> float:
        """"""
        Returns:
            float: Ending voltage
        """"""
        return float(self._ask_channel('sour{0}:swe:stop?'))

    def values_V(self) -> Sequence[float]:
        """"""
        Returns:
            Sequence[float]: List of voltages
        """"""
        return list(np.linspace(self.start_V(), self.stop_V(), self.points()))


class List_Context(_Dc_Context):

    def __init__(self, channel: 'QDac2Channel', voltages: Sequence[float],
                 repetitions: int, dwell_s: float, delay_s: float,
                 backwards: bool, stepped: bool):
        super().__init__(channel)
        self._repetitions = repetitions
        self._write_channel('sour{0}:volt:mode list')
        self._set_voltages(voltages)
        self._set_trigger_mode(stepped)
        self._write_channel(f'sour{""{0}""}:list:dwel {dwell_s}')
        super()._set_delay(delay_s)
        self._set_direction(backwards)
        self._set_repetitions()
        self._set_triggering()

    def _set_voltages(self, voltages: Sequence[float]) -> None:
        self._write_channel_floats('sour{0}:list:volt ', voltages)

    def _set_trigger_mode(self, stepped: bool) -> None:
        if stepped:
            return self._write_channel('sour{0}:list:tmod step')
        self._write_channel('sour{0}:list:tmod auto')

    def _set_direction(self, backwards: bool) -> None:
        if backwards:
            return self._write_channel('sour{0}:list:dir down')
        self._write_channel('sour{0}:list:dir up')

    def _set_repetitions(self) -> None:
        self._write_channel(f'sour{""{0}""}:list:coun {self._repetitions}')

    def _perpetual(self) -> bool:
        return self._repetitions < 0

    def start(self) -> None:
        """"""Start the DC list generator
        """"""
        self._start('DC list')

    def append(self, voltages: Sequence[float]) -> None:
        """"""Append voltages to the existing list

        Arguments:
            voltages (Sequence[float]): Sequence of voltages
        """"""
        self._write_channel_floats('sour{0}:list:volt:app ', voltages)
        self._make_ready_to_start()

    def points(self) -> int:
        """"""
        Returns:
            int: Number of steps in the DC list
        """"""
        return int(self._ask_channel('sour{0}:list:poin?'))

    def cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of cycles remaining in the DC list
        """"""
        return int(self._ask_channel('sour{0}:list:ncl?'))

    def values_V(self) -> Sequence[float]:
        """"""
        Returns:
            Sequence[float]: List of voltages
        """"""
        # return comma_sequence_to_list_of_floats(
        #     self._ask_channel('sour{0}:list:volt?'))
        return comma_sequence_to_list_of_floats(
            self._ask_channel('sour{0}:list:volt?'))


class _Waveform_Context(_Channel_Context):

    def __init__(self, channel: 'QDac2Channel'):
        super().__init__(channel)
        self._trigger: Optional[QDac2Trigger_Context] = None
        self._marker_start: Optional[QDac2Trigger_Context] = None
        self._marker_end: Optional[QDac2Trigger_Context] = None
        self._marker_period_start: Optional[QDac2Trigger_Context] = None
        self._marker_period_end: Optional[QDac2Trigger_Context] = None

    def _start(self, wave_kind: str, description: str) -> None:
        if self._trigger:
            self._make_ready_to_start(wave_kind)
            return self._write_channel(f'tint {self._trigger.value}')
        self._switch_to_immediate_trigger(wave_kind)
        self._write_channel(f'sour{""{0}""}:{wave_kind}:init')

    def _start_on(self, trigger: QDac2Trigger_Context, wave_kind: str) -> None:
        self._trigger = trigger
        internal = _trigger_context_to_value(trigger)
        self._write_channel(f'sour{""{0}""}:{wave_kind}:trig:sour int{internal}')
        self._make_ready_to_start(wave_kind)

    def _start_on_external(self, trigger: ExternalInput, wave_kind: str) -> None:
        self._trigger = None
        self._write_channel(f'sour{""{0}""}:{wave_kind}:trig:sour ext{trigger}')
        self._make_ready_to_start(wave_kind)

    def _end_marker(self, wave_kind: str) -> QDac2Trigger_Context:
        if not self._marker_end:
            self._marker_end = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:{wave_kind}:mark:end {self._marker_end.value}')
        return self._marker_end

    def _start_marker(self, wave_kind: str) -> QDac2Trigger_Context:
        if not self._marker_start:
            self._marker_start = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:{wave_kind}:mark:star {self._marker_start.value}')
        return self._marker_start

    def _period_end_marker(self, wave_kind: str) -> QDac2Trigger_Context:
        if not self._marker_period_end:
            self._marker_period_end = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:{wave_kind}:mark:pend {self._marker_period_end.value}')
        return self._marker_period_end

    def _period_start_marker(self, wave_kind: str) -> QDac2Trigger_Context:
        if not self._marker_period_start:
            self._marker_period_start = self.allocate_trigger()
        self._write_channel(f'sour{""{0}""}:{wave_kind}:mark:pstart {self._marker_period_start.value}')
        return self._marker_period_start

    def _make_ready_to_start(self, wave_kind: str) -> None:
        self._write_channel(f'sour{""{0}""}:{wave_kind}:init:cont on')
        self._write_channel(f'sour{""{0}""}:{wave_kind}:init')

    def _switch_to_immediate_trigger(self, wave_kind: str):
        self._write_channel(f'sour{""{0}""}:{wave_kind}:init:cont off')
        self._write_channel(f'sour{""{0}""}:{wave_kind}:trig:sour imm')

    def _set_delay(self, wave_kind: str, delay_s) -> None:
        self._write_channel(f'sour{""{0}""}:{wave_kind}:del {delay_s}')

    def _set_slew(self, wave_kind: str, slew_V_s: Optional[float]) -> None:
        if slew_V_s:
            # Bug, see https://trello.com/c/SeeUrRNY
            self._write_channel(f'sour{""{0}""}:{wave_kind}:slew {slew_V_s}')
        else:
            self._write_channel(f'sour{""{0}""}:{wave_kind}:slew inf')


class Square_Context(_Waveform_Context):

    def __init__(self, channel: 'QDac2Channel', frequency_Hz: Optional[float],
                 repetitions: int, period_s: Optional[float],
                 duty_cycle_percent: float, kind: str, inverted: bool,
                 span_V: float, offset_V: float, delay_s: float,
                 slew_V_s: Optional[float]):
        super().__init__(channel)
        self._repetitions = repetitions
        self._write_channel('sour{0}:squ:trig:sour hold')
        self._set_frequency(frequency_Hz, period_s)
        self._write_channel(f'sour{""{0}""}:squ:dcyc {duty_cycle_percent}')
        self._set_type(kind)
        self._set_polarity(inverted)
        self._write_channel(f'sour{""{0}""}:squ:span {span_V}')
        self._write_channel(f'sour{""{0}""}:squ:offs {offset_V}')
        self._set_slew('squ', slew_V_s)
        super()._set_delay('squ', delay_s)
        self._write_channel(f'sour{""{0}""}:squ:coun {repetitions}')
        self._set_triggering()

    def start(self) -> None:
        """"""Start the square wave generator
        """"""
        self._start('squ', 'square wave')

    def abort(self) -> None:
        """"""Abort any running square wave generator
        """"""
        self._write_channel('sour{0}:squ:abor')

    def cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of cycles remaining in the square wave
        """"""
        return int(self._ask_channel('sour{0}:squ:ncl?'))

    def _set_frequency(self, frequency_Hz: Optional[float],
                       period_s: Optional[float]) -> None:
        if frequency_Hz:
            return self._write_channel(f'sour{""{0}""}:squ:freq {frequency_Hz}')
        if period_s:
            self._write_channel(f'sour{""{0}""}:squ:per {period_s}')

    def _set_type(self, kind: str) -> None:
        if kind == 'positive':
            self._write_channel('sour{0}:squ:typ pos')
        elif kind == 'negative':
            self._write_channel('sour{0}:squ:typ neg')
        else:
            self._write_channel('sour{0}:squ:typ symm')

    def _set_polarity(self, inverted: bool) -> None:
        if inverted:
            self._write_channel('sour{0}:squ:pol inv')
        else:
            self._write_channel('sour{0}:squ:pol norm')

    def _set_triggering(self) -> None:
        self._write_channel('sour{0}:squ:trig:sour bus')
        self._make_ready_to_start('squ')

    def end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of the square wave

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end
        """"""
        return super()._end_marker('squ')

    def start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of the square wave

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning
        """"""
        return super()._start_marker('squ')

    def period_end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end of each period
        """"""
        return super()._period_end_marker('squ')

    def period_start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning of each period
        """"""
        return super()._period_start_marker('squ')

    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        """"""Attach internal trigger to start the square wave generator

        Args:
            trigger (QDac2Trigger_Context): trigger that will start square wave
        """"""
        return super()._start_on(trigger, 'squ')

    def start_on_external(self, trigger: ExternalInput) -> None:
        """"""Attach external trigger to start the square wave generator

        Args:
            trigger (ExternalInput): external trigger that will start square wave
        """"""
        return super()._start_on_external(trigger, 'squ')


class Sine_Context(_Waveform_Context):

    def __init__(self, channel: 'QDac2Channel', frequency_Hz: Optional[float],
                 repetitions: int, period_s: Optional[float], inverted: bool,
                 span_V: float, offset_V: float, delay_s: float,
                 slew_V_s: Optional[float]):
        super().__init__(channel)
        self._repetitions = repetitions
        self._write_channel('sour{0}:sine:trig:sour hold')
        self._set_frequency(frequency_Hz, period_s)
        self._set_polarity(inverted)
        self._write_channel(f'sour{""{0}""}:sine:span {span_V}')
        self._write_channel(f'sour{""{0}""}:sine:offs {offset_V}')
        self._set_slew('sine', slew_V_s)
        super()._set_delay('sine', delay_s)
        self._write_channel(f'sour{""{0}""}:sine:coun {repetitions}')
        self._set_triggering()

    def start(self) -> None:
        """"""Start the sine wave generator
        """"""
        self._start('sine', 'sine wave')

    def abort(self) -> None:
        """"""Abort any running sine wave generator
        """"""
        self._write_channel('sour{0}:sine:abor')

    def cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of cycles remaining in the sine wave
        """"""
        return int(self._ask_channel('sour{0}:sine:ncl?'))

    def _set_frequency(self, frequency_Hz: Optional[float],
                       period_s: Optional[float]) -> None:
        if frequency_Hz:
            return self._write_channel(f'sour{""{0}""}:sine:freq {frequency_Hz}')
        if period_s:
            self._write_channel(f'sour{""{0}""}:sine:per {period_s}')

    def _set_polarity(self, inverted: bool) -> None:
        if inverted:
            self._write_channel('sour{0}:sine:pol inv')
        else:
            self._write_channel('sour{0}:sine:pol norm')

    def _set_triggering(self) -> None:
        self._write_channel('sour{0}:sine:trig:sour bus')
        self._make_ready_to_start('sine')

    def end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of the sine wave

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end
        """"""
        return super()._end_marker('sine')

    def start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of the sine wave

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning
        """"""
        return super()._start_marker('sine')

    def period_end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end of each period
        """"""
        return super()._period_end_marker('sine')

    def period_start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning of each period
        """"""
        return super()._period_start_marker('sine')

    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        """"""Attach internal trigger to start the sine wave generator

        Args:
            trigger (QDac2Trigger_Context): trigger that will start sine wave
        """"""
        return super()._start_on(trigger, 'sine')

    def start_on_external(self, trigger: ExternalInput) -> None:
        """"""Attach external trigger to start the sine wave generator

        Args:
            trigger (ExternalInput): external trigger that will start sine wave
        """"""
        return super()._start_on_external(trigger, 'sine')


class Triangle_Context(_Waveform_Context):

    def __init__(self, channel: 'QDac2Channel', frequency_Hz: Optional[float],
                 repetitions: int, period_s: Optional[float],
                 duty_cycle_percent: float, inverted: bool, span_V: float,
                 offset_V: float, delay_s: float, slew_V_s: Optional[float]):
        super().__init__(channel)
        self._repetitions = repetitions
        self._write_channel('sour{0}:tri:trig:sour hold')
        self._set_frequency(frequency_Hz, period_s)
        self._write_channel(f'sour{""{0}""}:tri:dcyc {duty_cycle_percent}')
        self._set_polarity(inverted)
        self._write_channel(f'sour{""{0}""}:tri:span {span_V}')
        self._write_channel(f'sour{""{0}""}:tri:offs {offset_V}')
        self._set_slew('tri', slew_V_s)
        super()._set_delay('tri', delay_s)
        self._write_channel(f'sour{""{0}""}:tri:coun {repetitions}')
        self._set_triggering()

    def start(self) -> None:
        """"""Start the triangle wave generator
        """"""
        self._start('tri', 'triangle wave')

    def abort(self) -> None:
        """"""Abort any running triangle wave generator
        """"""
        self._write_channel('sour{0}:tri:abor')

    def cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of cycles remaining in the triangle wave
        """"""
        return int(self._ask_channel('sour{0}:tri:ncl?'))

    def _set_frequency(self, frequency_Hz: Optional[float],
                       period_s: Optional[float]) -> None:
        if frequency_Hz:
            return self._write_channel(f'sour{""{0}""}:tri:freq {frequency_Hz}')
        if period_s:
            self._write_channel(f'sour{""{0}""}:tri:per {period_s}')

    def _set_type(self, kind: bool) -> None:
        if kind == 'positive':
            self._write_channel('sour{0}:tri:typ pos')
        elif kind == 'negative':
            self._write_channel('sour{0}:tri:typ neg')
        else:
            self._write_channel('sour{0}:tri:typ symm')

    def _set_polarity(self, inverted: bool) -> None:
        if inverted:
            self._write_channel('sour{0}:tri:pol inv')
        else:
            self._write_channel('sour{0}:tri:pol norm')

    def _set_triggering(self) -> None:
        self._write_channel('sour{0}:tri:trig:sour bus')
        self._make_ready_to_start('tri')

    def end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of the triangle wave

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end
        """"""
        return super()._end_marker('tri')

    def start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of the triangle wave

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning
        """"""
        return super()._start_marker('tri')

    def period_end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end of each period
        """"""
        return super()._period_end_marker('tri')

    def period_start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning of each period
        """"""
        return super()._period_start_marker('tri')

    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        """"""Attach internal trigger to start the triangle wave generator

        Args:
            trigger (QDac2Trigger_Context): trigger that will start triangle
        """"""
        return super()._start_on(trigger, 'tri')

    def start_on_external(self, trigger: ExternalInput) -> None:
        """"""Attach external trigger to start the triangle wave generator

        Args:
            trigger (ExternalInput): external trigger that will start triangle
        """"""
        return super()._start_on_external(trigger, 'tri')


class Awg_Context(_Waveform_Context):

    def __init__(self, channel: 'QDac2Channel', trace_name: str,
                 repetitions: int, scale: float, offset_V: float,
                 slew_V_s: Optional[float]):
        super().__init__(channel)
        self._repetitions = repetitions
        self._write_channel('sour{0}:awg:trig:sour hold')
        self._write_channel(f'sour{""{0}""}:awg:def ""{trace_name}""')
        self._write_channel(f'sour{""{0}""}:awg:scal {scale}')
        self._write_channel(f'sour{""{0}""}:awg:offs {offset_V}')
        self._set_slew('awg', slew_V_s)
        self._write_channel(f'sour{""{0}""}:awg:coun {repetitions}')
        self._set_triggering()

    def start(self) -> None:
        """"""Start the AWG
        """"""
        self._start('awg', 'AWG')

    def abort(self) -> None:
        """"""Abort any running AWG
        """"""
        self._write_channel('sour{0}:awg:abor')

    def cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of cycles remaining in the AWG
        """"""
        return int(self._ask_channel('sour{0}:awg:ncl?'))

    def _set_triggering(self) -> None:
        self._write_channel('sour{0}:awg:trig:sour bus')
        self._make_ready_to_start('awg')

    def end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of the AWG

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end
        """"""
        return super()._end_marker('awg')

    def start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of the AWG

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning
        """"""
        return super()._start_marker('awg')

    def period_end_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the end of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the end of each period
        """"""
        return super()._period_end_marker('awg')

    def period_start_marker(self) -> QDac2Trigger_Context:
        """"""Internal trigger that will mark the beginning of each period

        A new internal trigger is allocated if necessary.

        Returns:
            QDac2Trigger_Context: trigger that will mark the beginning of each period
        """"""
        return super()._period_start_marker('awg')

    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        """"""Attach internal trigger to start the AWG

        Args:
            trigger (QDac2Trigger_Context): trigger that will start AWG
        """"""
        return super()._start_on(trigger, 'awg')

    def start_on_external(self, trigger: ExternalInput) -> None:
        """"""Attach external trigger to start the AWG

        Args:
            trigger (ExternalInput): external trigger that will start AWG
        """"""
        return super()._start_on_external(trigger, 'awg')


class Measurement_Context(_Channel_Context):

    def __init__(self, channel: 'QDac2Channel', delay_s: float,
                 repetitions: int, current_range: str,
                 aperture_s: Optional[float], nplc: Optional[int]):
        super().__init__(channel)
        self._trigger: Optional[QDac2Trigger_Context] = None
        self._write_channel(f'sens{""{0}""}:del {delay_s}')
        self._write_channel(f'sens{""{0}""}:rang {current_range}')
        self._set_aperture(aperture_s, nplc)
        self._write_channel(f'sens{""{0}""}:coun {repetitions}')
        self._set_triggering()

    def start(self) -> None:
        """"""Start a current measurement
        """"""
        if self._trigger:
            return self._write_channel(f'tint {self._trigger.value}')
        self._switch_to_immediate_trigger()
        self._write_channel('sens{0}:init')

    def _switch_to_immediate_trigger(self) -> None:
        self._write_channel('sens{0}:init:cont off')
        self._write_channel('sens{0}:trig:sour imm')

    def start_on(self, trigger: QDac2Trigger_Context) -> None:
        """"""Attach internal trigger to start the current measurement

        Args:
            trigger (QDac2Trigger_Context): trigger that will start measurement
        """"""
        self._trigger = trigger
        internal = _trigger_context_to_value(trigger)
        self._write_channel(f'sens{""{0}""}:trig:sour int{internal}')
        self._write_channel(f'sens{""{0}""}:init:cont on')
        self._write_channel(f'sens{""{0}""}:init')

    def start_on_external(self, trigger: ExternalInput) -> None:
        """"""Attach external trigger to start the current measurement

        Args:
            trigger (ExternalInput): trigger that will start measurement
        """"""
        self._write_channel(f'sens{""{0}""}:trig:sour ext{trigger}')
        self._write_channel(f'sens{""{0}""}:init:cont on')
        self._write_channel(f'sens{""{0}""}:init')

    def abort(self) -> None:
        """"""Abort current measurement
        """"""
        self._write_channel('sens{0}:abor')

    def n_cycles_remaining(self) -> int:
        """"""
        Returns:
            int: Number of measurements remaining
        """"""
        return int(self._ask_channel('sens{0}:ncl?'))

    def n_available(self) -> int:
        """"""
        Returns:
            int: Number of measurements available
        """"""
        return int(self._ask_channel('sens{0}:data:poin?'))

    def available_A(self) -> Sequence[float]:
        """"""Retrieve current measurements

        The available measurements will be removed from measurement queue.

        Returns:
            Sequence[float]: list of available current measurements
        """"""
        # Bug circumvention
        if self.n_available() == 0:
            return list()
        return comma_sequence_to_list_of_floats(
            self._ask_channel('sens{0}:data:rem?'))

    def peek_A(self) -> float:
        """"""Peek at the first available current measurement

        Returns:
            float: current in Amperes
        """"""
        return float(self._ask_channel('sens{0}:data:last?'))

    def _set_aperture(self, aperture_s: Optional[float], nplc: Optional[int]
                      ) -> None:
        if aperture_s:
            return self._write_channel(f'sens{""{0}""}:aper {aperture_s}')
        self._write_channel(f'sens{""{0}""}:nplc {nplc}')

    def _set_triggering(self) -> None:
        self._write_channel('sens{0}:trig:sour bus')
        self._write_channel('sens{0}:init')


class QDac2Channel(InstrumentChannel):

    def __init__(self, parent: 'QDac2', name: str, channum: int):
        super().__init__(parent, name)
        self._channum = channum
        self.add_parameter(
            name='measurement_range',
            label='range',
            set_cmd='sens{1}:rang {0}'.format('{}', channum),
            get_cmd=f'sens{channum}:rang?',
            vals=validators.Enum('low', 'high')
        )
        self.add_parameter(
            name='measurement_aperture_s',
            label='aperture',
            unit='s',
            set_cmd='sens{1}:aper {0}'.format('{}', channum),
            get_cmd=f'sens{channum}:aper?',
            get_parser=float
        )
        self.add_parameter(
            name='measurement_nplc',
            label='PLC',
            set_cmd='sens{1}:nplc {0}'.format('{}', channum),
            get_cmd=f'sens{channum}:nplc?',
            get_parser=int
        )
        self.add_parameter(
            name='measurement_delay_s',
            label=f'delay',
            unit='s',
            set_cmd='sens{1}:del {0}'.format('{}', channum),
            get_cmd=f'sens{channum}:del?',
            get_parser=float
        )
        self.add_function(
            name='measurement_abort',
            call_cmd=f'sens{channum}:abor'
        )
        self.add_parameter(
            name='measurement_count',
            label='count',
            set_cmd='sens{1}:coun {0}'.format('{}', channum),
            get_cmd=f'sens{channum}:coun?',
            get_parser=int
        )
        self.add_parameter(
            name='n_masurements_remaining',
            label='remaning',
            get_cmd=f'sens{channum}:ncl?',
            get_parser=int
        )
        self.add_parameter(
            name='current_last_A',
            label='last',
            unit='A',
            get_cmd=f'sens{channum}:data:last?',
            get_parser=float
        )
        self.add_parameter(
            name='n_measurements_available',
            label='available',
            get_cmd=f'sens{channum}:data:poin?',
            get_parser=int
        )
        self.add_parameter(
            name='current_start_on',
            # Channel {channum} current measurement on internal trigger
            set_parser=_trigger_context_to_value,
            set_cmd='sens{1}:trig:sour int{0}'.format('{}', channum),
        )
        self.add_parameter(
            name='measurement_start_on_external',
            # Channel {channum} current measurement on external input
            set_cmd='sens{1}:trig:sour ext{0}'.format('{}', channum),
        )
        self.add_parameter(
            name='output_range',
            label='range',
            set_cmd='sour{1}:rang {0}'.format('{}', channum),
            get_cmd=f'sour{channum}:rang?',
            vals=validators.Enum('low', 'high')
        )
        self.add_parameter(
            name='output_low_range_minimum_V',
            label='low range min',
            unit='V',
            get_cmd=f'sour{channum}:rang:low:min?',
            get_parser=float
        )
        self.add_parameter(
            name='output_low_range_maximum_V',
            label='low voltage max',
            unit='V',
            get_cmd=f'sour{channum}:rang:low:max?',
            get_parser=float
        )
        self.add_parameter(
            name='output_high_range_minimum_V',
            label='high voltage min',
            unit='V',
            get_cmd=f'sour{channum}:rang:high:min?',
            get_parser=float
        )
        self.add_parameter(
            name='output_high_range_maximum_V',
            label='high voltage max',
            unit='V',
            get_cmd=f'sour{channum}:rang:high:max?',
            get_parser=float
        )
        self.add_parameter(
            name='output_filter',
            label=f'low-pass cut-off',
            unit='Hz',
            set_cmd='sour{1}:filt {0}'.format('{}', channum),
            get_cmd=f'sour{channum}:filt?',
            get_parser=str,
            vals=validators.Enum('dc', 'med', 'high')
        )
        self.add_parameter(
            name='dc_constant_V',
            label=f'ch{channum}',
            unit='V',
            set_cmd=self._set_fixed_voltage_immediately,
            get_cmd=f'sour{channum}:volt?',
            get_parser=float,
            vals=validators.Numbers(-10.0, 10.0)
        )
        self.add_parameter(
            name='dc_last_V',
            label=f'ch{channum}',
            unit='V',
            get_cmd=f'sour{channum}:volt:last?',
            get_parser=float
        )
        self.add_parameter(
            name='dc_next_V',
            label=f'ch{channum}',
            unit='V',
            set_cmd='sour{1}:volt:trig {0}'.format('{}', channum),
            get_cmd=f'sour{channum}:volt:trig?',
            get_parser=float
        )
        self.add_parameter(
            name='dc_slew_rate_V_per_s',
            label=f'ch{channum}',
            unit='V/s',
            set_cmd='sour{1}:volt:slew {0}'.format('{}', channum),
            get_cmd=f'sour{channum}:volt:slew?',
            get_parser=float
        )
        self.add_parameter(
            name='read_current_A',
            # Perform immediate current measurement on channel
            label=f'ch{channum}',
            unit='A',
            get_cmd=f'read{channum}?',
            get_parser=comma_sequence_to_list_of_floats
        )
        self.add_parameter(
            name='fetch_current_A',
            # Retrieve all available current measurements on channel
            label=f'ch{channum}',
            unit='A',
            get_cmd=f'fetc{channum}?',
            get_parser=comma_sequence_to_list_of_floats
        )
        self.add_parameter(
            name='dc_mode',
            label=f'DC mode',
            set_cmd='sour{1}:volt:mode {0}'.format('{}', channum),
            get_cmd=f'sour{channum}:volt:mode?',
            vals=validators.Enum('fixed', 'list', 'sweep')
        )
        self.add_function(
            name='dc_initiate',
            call_cmd=f'sour{channum}:dc:init'
        )
        self.add_function(
            name='dc_abort',
            call_cmd=f'sour{channum}:dc:abor'
        )
        self.add_function(
            name='abort',
            call_cmd=f'sour{channum}:all:abor'
        )

    @property
    def number(self) -> int:
        """"""Channel number""""""
        return self._channum

    def clear_measurements(self) -> Sequence[float]:
        """"""Retrieve current measurements

        The available measurements will be removed from measurement queue.

        Returns:
            Sequence[float]: list of available current measurements
        """"""
        # Bug circumvention
        if int(self.ask_channel('sens{0}:data:poin?')) == 0:
            return list()
        return comma_sequence_to_list_of_floats(
            self.ask_channel('sens{0}:data:rem?'))

    def measurement(self, delay_s: float = 0.0, repetitions: int = 1,
                    current_range: str = 'high',
                    aperture_s: Optional[float] = None,
                    nplc: Optional[int] = None
                    ) -> Measurement_Context:
        """"""Set up a sequence of current measurements

        Args:
            delay_s (float, optional): Seconds to delay the actual measurement after trigger (default 0)
            repetitions (int, optional): Number of consecutive measurements (default 1)
            current_range (str, optional): high (10mA, default) or low (200nA)
            nplc (None, optional): Integration time in power-line cycles (default 1)
            aperture_s (None, optional): Seconds of integration time instead of NPLC

        Returns:
            Measurement_Context: context manager

        Raises:
            ValueError: configuration error
        """"""
        if aperture_s and nplc:
            raise ValueError('Only one of nplc or aperture_s can be '
                             'specified for a current measurement')
        if not aperture_s and not nplc:
            nplc = 1
        return Measurement_Context(self, delay_s, repetitions, current_range,
                                   aperture_s, nplc)

    def output_mode(self, range: str = 'high', filter: str = 'high') -> None:
        """"""Set the output voltage

        Args:
            range (str, optional): Low or high (default) current range
            filter (str, optional): DC (10Hz), medium (10kHz) or high (300kHz, default) voltage filter
        """"""
        self.output_range(range)
        self.output_filter(filter)

    def dc_list(self, voltages: Sequence[float], repetitions: int = 1,
                dwell_s: float = 1e-03, delay_s: float = 0,
                backwards: bool = False, stepped: bool = False
                ) -> List_Context:
        """"""Set up a DC-list generator

        Args:
            voltages (Sequence[float]): Voltages in list
            repetitions (int, optional): Number of repetitions of the list (default 1)
            dwell_s (float, optional): Seconds between each voltage (default 1ms)
            delay_s (float, optional): Seconds of delay after receiving a trigger (default 0)
            backwards (bool, optional): Use list in reverse (default is forward)
            stepped (bool, optional): True means that each step needs to be triggered (default False)

        Returns:
            List_Context: context manager
        """"""
        return List_Context(self, voltages, repetitions, dwell_s, delay_s,
                            backwards, stepped)

    def dc_sweep(self, start_V: float, stop_V: float, points: int,
                 repetitions: int = 1, dwell_s: float = 1e-03,
                 delay_s: float = 0, backwards=False, stepped=True
                 ) -> Sweep_Context:
        """"""Set up a DC sweep

        Args:
            start_V (float): Start voltage
            stop_V (float): Send voltage
            points (int): Number of steps
            repetitions (int, optional): Number of repetition (default 1)
            dwell_s (float, optional): Seconds between each voltage (default 1ms)
            delay_s (float, optional): Seconds of delay after receiving a trigger (default 0)
            backwards (bool, optional): Sweep in reverse (default is forward)
            stepped (bool, optional): True means that each step needs to be triggered (default False)

        Returns:
            Sweep_Context: context manager
        """"""
        return Sweep_Context(self, start_V, stop_V, points, repetitions,
                             dwell_s, delay_s, backwards, stepped)

    def square_wave(self, frequency_Hz: Optional[float] = None,
                    period_s: Optional[float] = None, repetitions: int = -1,
                    duty_cycle_percent: float = 50.0, kind: str = 'symmetric',
                    inverted: bool = False, span_V: float = 0.2,
                    offset_V: float = 0.0, delay_s: float = 0,
                    slew_V_s: Optional[float] = None
                    ) -> Square_Context:
        """"""Set up a square-wave generator

        Args:
            frequency_Hz (float, optional): Frequency
            period_s (float, optional): Period length (instead of frequency)
            repetitions (int, optional): Number of repetition (default infinite)
            duty_cycle_percent (float, optional): Percentage on-time (default 50%)
            kind (str, optional): Positive, negative or symmetric (default) around the offset
            inverted (bool, optional): True means flipped (default False)
            span_V (float, optional): Voltage span (default 200mV)
            offset_V (float, optional): Offset (default 0V)
            delay_s (float, optional): Seconds of delay after receiving a trigger (default 0)
            slew_V_s (float, optional): Max slew rate in V/s (default None)

        Returns:
            Square_Context: context manager

        Raises:
            ValueError: configuration error
        """"""
        if frequency_Hz and period_s:
            raise ValueError(error_ambiguous_wave)
        if not frequency_Hz and not period_s:
            frequency_Hz = 1000
        return Square_Context(self, frequency_Hz, repetitions, period_s,
                              duty_cycle_percent, kind, inverted, span_V,
                              offset_V, delay_s, slew_V_s)

    def sine_wave(self, frequency_Hz: Optional[float] = None,
                  period_s: Optional[float] = None, repetitions: int = -1,
                  inverted: bool = False, span_V: float = 0.2,
                  offset_V: float = 0.0, delay_s: float = 0,
                  slew_V_s: Optional[float] = None
                  ) -> Sine_Context:
        """"""Set up a sine-wave generator

        Args:
            frequency_Hz (float, optional): Frequency
            period_s (float, optional): Period length (instead of frequency)
            repetitions (int, optional): Number of repetition (default infinite)
            inverted (bool, optional): True means flipped (default False)
            span_V (float, optional): Voltage span (default 200mV)
            offset_V (float, optional): Offset (default 0V)
            delay_s (float, optional): Seconds of delay after receiving a trigger (default 0)
            slew_V_s (None, optional): Max slew rate in V/s (default None)

        Returns:
            Sine_Context: context manager

        Raises:
            ValueError: configuration error
        """"""
        if frequency_Hz and period_s:
            raise ValueError(error_ambiguous_wave)
        if not frequency_Hz and not period_s:
            frequency_Hz = 1000
        return Sine_Context(self, frequency_Hz, repetitions, period_s,
                            inverted, span_V, offset_V, delay_s, slew_V_s)

    def triangle_wave(self, frequency_Hz: Optional[float] = None,
                      period_s: Optional[float] = None, repetitions: int = -1,
                      duty_cycle_percent: float = 50.0, inverted: bool = False,
                      span_V: float = 0.2, offset_V: float = 0.0,
                      delay_s: float = 0, slew_V_s: Optional[float] = None
                      ) -> Triangle_Context:
        """"""Set up a triangle-wave generator

        Args:
            frequency_Hz (float, optional): Frequency
            period_s (float, optional): Period length (instead of frequency)
            repetitions (int, optional): Number of repetition (default infinite)
            duty_cycle_percent (float, optional): Percentage on-time (default 50%)
            inverted (bool, optional): True means flipped (default False)
            span_V (float, optional): Voltage span (default 200mV)
            offset_V (float, optional): Offset (default 0V)
            delay_s (float, optional): Seconds of delay after receiving a trigger (default 0)
            slew_V_s (float, optional): Max slew rate in V/s (default None)

        Returns:
            Triangle_Context: context manager

        Raises:
            ValueError: configuration error
        """"""
        if frequency_Hz and period_s:
            raise ValueError(error_ambiguous_wave)
        if not frequency_Hz and not period_s:
            frequency_Hz = 1000
        return Triangle_Context(self, frequency_Hz, repetitions, period_s,
                                duty_cycle_percent, inverted, span_V,
                                offset_V, delay_s, slew_V_s)

    def arbitrary_wave(self, trace_name: str, repetitions: int = 1,
                       scale: float = 1.0, offset_V: float = 0.0,
                       slew_V_s: Optional[float] = None
                       ) -> Awg_Context:
        """"""Set up an arbitrary-wave generator

        Args:
            trace_name (str): Use data from this named trace
            repetitions (int, optional): Number of repetition (default 1)
            scale (float, optional): Scaling factor of voltages (default 1)
            offset_V (float, optional): Offset (default 0V)
            slew_V_s (None, optional): Max slew rate in V/s (default None)

        Returns:
            Awg_Context: context manager
        """"""
        return Awg_Context(self, trace_name, repetitions, scale, offset_V,
                           slew_V_s)

    def _set_fixed_voltage_immediately(self, v) -> None:
        self.write(f'sour{self._channum}:volt:mode fix')
        self.write(f'sour{self._channum}:volt {v}')

    def ask_channel(self, cmd: str) -> str:
        """"""Inject channel number into SCPI query

        Arguments:
            cmd (str): Must contain a '{0}' placeholder for the channel number

        Returns:
            str: SCPI answer
        """"""
        return self.ask(self._channel_message(cmd))

    def write_channel(self, cmd: str) -> None:
        """"""Inject channel number into SCPI command

        Arguments:
            cmd (str): Must contain a '{0}' placeholder for the channel number
        """"""
        self.write(self._channel_message(cmd))

    def write_channel_floats(self, cmd: str, values: Sequence[float]) -> None:
        """"""Inject channel number and a list of values into SCPI command

        The values are appended to the end of the command.

        Arguments:
            cmd (str): Must contain a '{0}' placeholder for channel number
            values (Sequence[float]): Sequence of numbers
        """"""
        self._parent.write_floats(self._channel_message(cmd), values)

    def write(self, cmd: str) -> None:
        """"""Send a SCPI command

        Args:
            cmd (str): SCPI command
        """"""
        self._parent.write(cmd)

    def _channel_message(self, template: str):
        return template.format(self._channum)


class Trace_Context:

    def __init__(self, parent, name: str, size: int):
        self._parent = parent
        self._size = size
        self._name = name
        self._parent.write(f'trac:def ""{name}"",{size}')

    def __len__(self):
        return self.size

    @property
    def size(self) -> int:
        """"""Number of values in trace""""""
        return self._size

    @property
    def name(self) -> str:
        """"""Name of trace""""""
        return self._name

    def waveform(self, values: Sequence[float]) -> None:
        """"""Fill values into trace

        Args:
            values (Sequence[float]): Sequence of values

        Raises:
            ValueError: size mismatch
        """"""
        if len(values) != self.size:
            raise ValueError(f'trace length {len(values)} does not match '
                             f'allocated length {self.size}')
        self._parent.write_floats(f'trac:data ""{self.name}"",', values)


class Virtual_Sweep_Context:

    def __init__(self, arrangement: 'Arrangement_Context', sweep: np.ndarray,
                 start_trigger: Optional[str], step_time_s: float,
                 step_trigger: Optional[str], repetitions: Optional[int]):
        self._arrangement = arrangement
        self._sweep = sweep
        self._step_trigger = step_trigger
        self._step_time_s = step_time_s
        self._repetitions = repetitions
        self._allocate_triggers(start_trigger)
        self._qdac_ready = False

    def __enter__(self):
        self._ensure_qdac_setup()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Let Arrangement take care of freeing triggers
        return False

    def actual_values_V(self, contact: str) -> np.ndarray:
        """"""The corrected values that would actually be sent to the contact

        Args:
            contact (str): Name of contact

        Returns:
            np.ndarray: Corrected voltages
        """"""
        index = self._arrangement._contact_index(contact)
        return self._sweep[:, index]

    def start(self) -> None:
        """"""Start the 2D sweep
        """"""
        self._ensure_qdac_setup()
        trigger = self._arrangement.get_trigger_by_name(self._start_trigger_name)
        self._arrangement._qdac.trigger(trigger)

    def _allocate_triggers(self, start_sweep: Optional[str]) -> None:
        if not start_sweep:
            # Use a random, unique name
            start_sweep = uuid.uuid4().hex
        self._arrangement._allocate_internal_triggers([start_sweep])
        self._start_trigger_name = start_sweep

    def _ensure_qdac_setup(self) -> None:
        if self._qdac_ready:
            return self._make_ready_to_start()
        self._route_inner_trigger()
        self._send_lists_to_qdac()
        self._qdac_ready = True

    def _route_inner_trigger(self) -> None:
        if not self._step_trigger:
            return
        trigger = self._arrangement.get_trigger_by_name(self._step_trigger)
        # All channels change in sync, so just use the first channel to make the
        # external trigger.
        channel = self._get_channel(0)
        channel.write_channel(f'sour{""{0}""}:dc:mark:sst '
                              f'{_trigger_context_to_value(trigger)}')

    def _get_channel(self, contact_index: int) -> 'QDac2Channel':
        channel_number = self._arrangement._channels[contact_index]
        qdac = self._arrangement._qdac
        return qdac.channel(channel_number)

    def _send_lists_to_qdac(self) -> None:
        for contact_index in range(self._arrangement.shape):
            self._send_list_to_qdac(contact_index, self._sweep[:, contact_index])

    def _send_list_to_qdac(self, contact_index, voltages):
        channel = self._get_channel(contact_index)
        dc_list = channel.dc_list(voltages=voltages, dwell_s=self._step_time_s,
                                  repetitions=self._repetitions)
        trigger = self._arrangement.get_trigger_by_name(self._start_trigger_name)
        dc_list.start_on(trigger)

    def _make_ready_to_start(self):  # Bug circumvention
        for contact_index in range(self._arrangement.shape):
            channel = self._get_channel(contact_index)
            channel.write_channel('sour{0}:dc:init')


class Arrangement_Context:
    def __init__(self, qdac: 'QDac2', contacts: Dict[str, int],
                 output_triggers: Optional[Dict[str, int]],
                 internal_triggers: Optional[Sequence[str]]):
        self._qdac = qdac
        self._fix_contact_order(contacts)
        self._allocate_triggers(internal_triggers, output_triggers)
        self._correction = np.identity(self.shape)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._free_triggers()
        return False

    @property
    def shape(self) -> int:
        """"""Number of contacts in the arrangement""""""
        return len(self._contacts)

    @property
    def correction_matrix(self) -> np.ndarray:
        """"""Correction matrix""""""
        return self._correction

    @property
    def contact_names(self) -> Sequence[str]:
        """"""
        Returns:
            Sequence[str]: Contact names in the same order as channel_numbers
        """"""
        return self._contact_names

    def _allocate_internal_triggers(self,
                                    internal_triggers: Optional[Sequence[str]]
                                    ) -> None:
        if not internal_triggers:
            return
        for name in internal_triggers:
            self._internal_triggers[name] = self._qdac.allocate_trigger()

    def initiate_correction(self, contact: str, factors: Sequence[float]) -> None:
        """"""Override how much a particular contact influences the other contacts

        Args:
            contact (str): Name of contact
            factors (Sequence[float]): factors between -1.0 and 1.0
        """"""
        index = self._contact_index(contact)
        self._correction[index] = factors

    def set_virtual_voltage(self, contact: str, voltage: float) -> None:
        """"""Set virtual voltage on specific contact

        The actual voltage that the contact will receive depends on the
        correction matrix.

        Args:
            contact (str): Name of contact
            voltage (float): Voltage corresponding to no correction
        """"""
        try:
            index = self._contact_index(contact)
        except KeyError:
            raise ValueError(f'No contact named ""{contact}""')
        self._effectuate_virtual_voltage(index, voltage)

    def set_virtual_voltages(self, contacts_to_voltages: Dict[str, float]) -> None:
        """"""Set virtual voltages on specific contacts in one go

        The actual voltage that each contact will receive depends on the
        correction matrix.

        Args:
            contact_to_voltages (Dict[str,float]): contact to voltage map
        """"""
        for contact, voltage in contacts_to_voltages.items():
            try:
                index = self._contact_index(contact)
            except KeyError:
                raise ValueError(f'No contact named ""{contact}""')
            self._virtual_voltages[index] = voltage
        self._effectuate_virtual_voltages()

    def _effectuate_virtual_voltage(self, index: int, voltage: float) -> None:
        self._virtual_voltages[index] = voltage
        self._effectuate_virtual_voltages()

    def _effectuate_virtual_voltages(self) -> None:
        for index, channel_number in enumerate(self._channels):
            actual_V = self.actual_voltages()[index]
            self._qdac.channel(channel_number).dc_constant_V(actual_V)

    def add_correction(self, contact: str, factors: Sequence[float]) -> None:
        """"""Update how much a particular contact influences the other contacts

        This is mostly useful in arrangements where each contact has significant
        effect only on nearby contacts, and thus can be added incrementally.

        The factors are extended by the identity matrix and multiplied to the
        correction matrix.

        Args:
            contact (str): Name of contact
            factors (Sequence[float]): factors usually between -1.0 and 1.0
        """"""
        index = self._contact_index(contact)
        multiplier = np.identity(self.shape)
        multiplier[index] = factors
        self._correction = np.matmul(multiplier, self._correction)

    def _fix_contact_order(self, contacts: Dict[str, int]) -> None:
        self._contact_names = list()
        self._contacts = dict()
        self._channels = list()
        index = 0
        for contact, channel in contacts.items():
            self._contact_names.append(contact)
            self._contacts[contact] = index
            index += 1
            self._channels.append(channel)
        self._virtual_voltages = np.zeros(self.shape)

    @property
    def channel_numbers(self) -> Sequence[int]:
        """"""
        Returns:
            Sequence[int]: Channels numbers in the same order as contact_names
        """"""
        return self._channels

    def channel(self, name: str) -> QDac2Channel:
        return self._qdac.channel(self._channels[self._contacts[name]])

    def virtual_voltage(self, contact: str) -> float:
        """"""
        Args:
            contact (str): Name of contact

        Returns:
            float: Voltage before correction
        """"""
        index = self._contact_index(contact)
        return self._virtual_voltages[index]

    def actual_voltages(self) -> Sequence[float]:
        """"""
        Returns:
            Sequence[float]: Corrected voltages for all contacts
        """"""
        vs = np.matmul(self._correction, self._virtual_voltages)
        if self._qdac._round_off:
            vs = np.round(vs, self._qdac._round_off)
        return list(vs)

    def get_trigger_by_name(self, name: str) -> QDac2Trigger_Context:
        """"""
        Args:
            name (str): Name of trigger

        Returns:
            QDac2Trigger_Context: Trigger context manager
        """"""
        try:
            return self._internal_triggers[name]
        except KeyError:
            print(f'Internal triggers: {list(self._internal_triggers.keys())}')
            raise

    def _all_channels_as_suffix(self) -> str:
        channels_str = ints_to_comma_separated_list(self.channel_numbers)
        return f'(@{channels_str})'

    def currents_A(self, nplc: int = 1, current_range: str = ""low"") -> Sequence[float]:
        """"""Measure currents on all contacts

        Args:
            nplc (int, optional): Number of powerline cycles to average over
            current_range (str, optional): Current range (default low)
        """"""
        channels_suffix = self._all_channels_as_suffix()
        self._qdac.write(f'sens:rang {current_range},{channels_suffix}')
        self._qdac.write(f'sens:nplc {nplc},{channels_suffix}')
        # Discard first reading because of possible output-capacitor effects, etc
        slowest_line_freq_Hz = 50
        sleep_s(1 / slowest_line_freq_Hz)
        self._qdac.ask(f'read? {channels_suffix}')
        # Then make a proper reading
        sleep_s((nplc + 1) / slowest_line_freq_Hz)
        currents = self._qdac.ask(f'read? {channels_suffix}')
        return comma_sequence_to_list_of_floats(currents)

    def virtual_sweep(self, contact: str, voltages: Sequence[float],
                      start_sweep_trigger: Optional[str] = None,
                      step_time_s: float = 1e-5,
                      step_trigger: Optional[str] = None,
                      repetitions: int = 1) -> Virtual_Sweep_Context:
        """"""Sweep a contact to create a 1D sweep

        Args:
            contact (str): Name of sweeping contact
            voltages (Sequence[float]): Virtual sweep voltages
            outer_contact (str): Name of slow-changing (outer) contact
            start_sweep_trigger (None, optional): Trigger that starts sweep
            step_time_s (float, optional): Delay between voltage changes
            step_trigger (None, optional): Trigger that marks each step
            repetitions (int, Optional): Number of back-and-forth sweeps, or -1 for infinite

        Returns:
            Virtual_Sweep_Context: context manager
        """"""
        sweep = self._calculate_1d_values(contact, voltages)
        return Virtual_Sweep_Context(self, sweep, start_sweep_trigger,
                                     step_time_s, step_trigger, repetitions)

    def _calculate_1d_values(self, contact: str, voltages: Sequence[float]
                             ) -> np.ndarray:
        original_voltage = self.virtual_voltage(contact)
        index = self._contact_index(contact)
        sweep = list()
        for v in voltages:
            self._virtual_voltages[index] = v
            sweep.append(self.actual_voltages())
        self._virtual_voltages[index] = original_voltage
        return np.array(sweep)

    def virtual_sweep2d(self, inner_contact: str, inner_voltages: Sequence[float],
                        outer_contact: str, outer_voltages: Sequence[float],
                        start_sweep_trigger: Optional[str] = None,
                        inner_step_time_s: float = 1e-5,
                        inner_step_trigger: Optional[str] = None,
                        repetitions: int = 1) -> Virtual_Sweep_Context:
        """"""Sweep two contacts to create a 2D sweep

        Args:
            inner_contact (str): Name of fast-changing (inner) contact
            inner_voltages (Sequence[float]): Inner contact virtual voltages
            outer_contact (str): Name of slow-changing (outer) contact
            outer_voltages (Sequence[float]): Outer contact virtual voltages
            start_sweep_trigger (None, optional): Trigger that starts sweep
            inner_step_time_s (float, optional): Delay between voltage changes
            inner_step_trigger (None, optional): Trigger that marks each step
            repetitions (int, Optional): Number of back-and-forth sweeps, or -1 for infinite

        Returns:
            Virtual_Sweep_Context: context manager
        """"""
        sweep = self._calculate_2d_values(inner_contact, inner_voltages,
                                          outer_contact, outer_voltages)
        return Virtual_Sweep_Context(self, sweep, start_sweep_trigger,
                                     inner_step_time_s, inner_step_trigger, repetitions)

    def _calculate_2d_values(self, inner_contact: str,
                             inner_voltages: Sequence[float],
                             outer_contact: str,
                             outer_voltages: Sequence[float]) -> np.ndarray:
        original_fast_voltage = self.virtual_voltage(inner_contact)
        original_slow_voltage = self.virtual_voltage(outer_contact)
        outer_index = self._contact_index(outer_contact)
        inner_index = self._contact_index(inner_contact)
        sweep = list()
        for slow_V in outer_voltages:
            self._virtual_voltages[outer_index] = slow_V
            for fast_V in inner_voltages:
                self._virtual_voltages[inner_index] = fast_V
                sweep.append(self.actual_voltages())
        self._virtual_voltages[inner_index] = original_fast_voltage
        self._virtual_voltages[outer_index] = original_slow_voltage
        return np.array(sweep)

    def virtual_detune(self, contacts: Sequence[str], start_V: Sequence[float],
                       end_V: Sequence[float], steps: int,
                       start_trigger: Optional[str] = None,
                       step_time_s: float = 1e-5,
                       step_trigger: Optional[str] = None,
                       repetitions: int = 1) -> Virtual_Sweep_Context:
        """"""Sweep any number of contacts linearly from one set of values to another set of values

        Args:
            contacts (Sequence[str]): contacts involved in sweep
            start_V (Sequence[float]): First-extreme values
            end_V (Sequence[float]): Second-extreme values
            steps (int): Number of steps between extremes
            start_trigger (None, optional): Trigger that starts sweep
            step_time_s (float, Optional): Seconds between each step
            step_trigger (None, optional): Trigger that marks each step
            repetitions (int, Optional): Number of back-and-forth sweeps, or -1 for infinite
        """"""
        self._check_same_lengths(contacts, start_V, end_V)
        sweep = self._calculate_detune_values(contacts, start_V, end_V, steps)
        return Virtual_Sweep_Context(self, sweep, start_trigger, step_time_s,
                                     step_trigger, repetitions)

    @staticmethod
    def _check_same_lengths(contacts, start_V, end_V) -> None:
        n_contacts = len(contacts)
        if n_contacts != len(start_V):
            raise ValueError(f'There must be exactly one voltage per contact: {start_V}')
        if n_contacts != len(end_V):
            raise ValueError(f'There must be exactly one voltage per contact: {end_V}')

    def _calculate_detune_values(self, contacts: Sequence[str], start_V: Sequence[float],
                                 end_V: Sequence[float], steps: int):
        original_voltages = [self.virtual_voltage(contact) for contact in contacts]
        indices = [self._contact_index(contact) for contact in contacts]
        sweep = list()
        forward_V = [forward_and_back(start_V[i], end_V[i], steps) for i in range(len(contacts))]
        for voltages in zip(*forward_V):
            for index, voltage in zip(indices, voltages):
                self._virtual_voltages[index] = voltage
            sweep.append(self.actual_voltages())
        for index, voltage in zip(indices, original_voltages):
            self._virtual_voltages[index] = voltage
        return np.array(sweep)

    def leakage(self, modulation_V: float, nplc: int = 2) -> np.ndarray:
        """"""Run a simple leakage test between the contacts

        Each contact is changed in turn and the resulting change in current from
        steady-state is recorded.  The resulting resistance matrix is calculated
        as modulation_voltage divided by current_change.

        Args:
            modulation_V (float): Virtual voltage added to each contact
            nplc (int, Optional): Powerline cycles to wait for each measurement

        Returns:
            ndarray: contact-to-contact resistance in Ohms
        """"""
        steady_state_A, currents_matrix = self._leakage_currents(modulation_V, nplc, 'low')
        with np.errstate(divide='ignore'):
            return np.abs(modulation_V / diff_matrix(steady_state_A, currents_matrix))

    def _leakage_currents(self, modulation_V: float, nplc: int,
                          current_range: str
                          ) -> Tuple[Sequence[float], Sequence[Sequence[float]]]:
        steady_state_A = self.currents_A(nplc, 'low')
        currents_matrix = list()
        for index, channel_nr in enumerate(self.channel_numbers):
            original_V = self._virtual_voltages[index]
            self._effectuate_virtual_voltage(index, original_V + modulation_V)
            currents = self.currents_A(nplc, current_range)
            self._effectuate_virtual_voltage(index, original_V)
            currents_matrix.append(currents)
        return steady_state_A, currents_matrix

    def _contact_index(self, contact: str) -> int:
        return self._contacts[contact]

    def _allocate_triggers(self, internal_triggers: Optional[Sequence[str]],
                           output_triggers: Optional[Dict[str, int]]
                           ) -> None:
        self._internal_triggers: Dict[str, QDac2Trigger_Context] = dict()
        self._allocate_internal_triggers(internal_triggers)
        self._allocate_external_triggers(output_triggers)

    def _allocate_external_triggers(self, output_triggers:
                                    Optional[Dict[str, int]]
                                    ) -> None:
        self._external_triggers = dict()
        if not output_triggers:
            return
        for name, port in output_triggers.items():
            self._external_triggers[name] = port
            trigger = self._qdac.allocate_trigger()
            self._qdac.connect_external_trigger(port, trigger)
            self._internal_triggers[name] = trigger

    def _free_triggers(self) -> None:
        for trigger in self._internal_triggers.values():
            self._qdac.free_trigger(trigger)


def forward_and_back(start: float, end: float, steps: int):
    forward = np.linspace(start, end, steps)
    backward = np.flip(forward)[1:][:-1]
    back_and_forth = itertools.chain(forward, backward)
    return back_and_forth


class QDac2(VisaInstrument):

    def __init__(self, name: str, address: str, **kwargs) -> None:
        """"""Connect to a QDAC-II

        Args:
            name (str): Name for instrument
            address (str): Visa identification string
            **kwargs: additional argument to the Visa driver
        """"""
        self._check_instrument_name(name)
        super().__init__(name, address, terminator='\n', **kwargs)
        self._set_up_serial()
        self._set_up_debug_settings()
        self._set_up_channels()
        self._set_up_external_triggers()
        self._set_up_internal_triggers()
        self._set_up_simple_functions()
        self.connect_message()
        self._check_for_wrong_model()
        self._check_for_incompatiable_firmware()
        self._set_up_manual_triggers()

    def n_channels(self) -> int:
        """"""
        Returns:
            int: Number of channels
        """"""
        return len(self.submodules['channels'])

    def channel(self, ch: int) -> QDac2Channel:
        """"""
        Args:
            ch (int): Channel number

        Returns:
            QDac2Channel: Visa representation of the channel
        """"""
        return getattr(self, f'ch{ch:02}')

    @staticmethod
    def n_triggers() -> int:
        """"""
        Returns:
            int: Number of internal triggers
        """"""
        return 14

    @staticmethod
    def n_external_inputs() -> int:
        """"""
        Returns:
            int: Number of external input triggers
        """"""
        return 4

    def n_external_outputs(self) -> int:
        """"""
        Returns:
            int: Number of external output triggers
        """"""
        return len(self.submodules['external_triggers'])

    def allocate_trigger(self) -> QDac2Trigger_Context:
        """"""Allocate an internal trigger

        Does not have any effect on the instrument, only the driver.

        Returns:
            QDac2Trigger_Context: Context manager

        Raises:
            ValueError: no free triggers
        """"""
        try:
            number = self._internal_triggers.pop()
        except KeyError:
            raise ValueError('no free internal triggers')
        return QDac2Trigger_Context(self, number)

    def free_trigger(self, trigger: QDac2Trigger_Context) -> None:
        """"""Free an internal trigger

        Does not have any effect on the instrument, only the driver.

        Args:
            trigger (QDac2Trigger_Context): trigger to free
        """"""
        internal = _trigger_context_to_value(trigger)
        self._internal_triggers.add(internal)

    def free_all_triggers(self) -> None:
        """"""Free all an internal triggers

        Does not have any effect on the instrument, only the driver.
        """"""
        self._set_up_internal_triggers()

    def connect_external_trigger(self, port: int, trigger: QDac2Trigger_Context,
                                 width_s: float = 1e-6
                                 ) -> None:
        """"""Route internal trigger to external trigger

        Args:
            port (int): External output trigger number
            trigger (QDac2Trigger_Context): Internal trigger
            width_s (float, optional): Output trigger width in seconds (default 1ms)
        """"""
        internal = _trigger_context_to_value(trigger)
        self.write(f'outp:trig{port}:sour int{internal}')
        self.write(f'outp:trig{port}:widt {width_s}')

    def reset(self) -> None:
        self.write('*rst')
        sleep_s(5)

    def errors(self) -> str:
        """"""Retrieve and clear all previous errors

        Returns:
            str: Comma separated list of errors or '0, ""No error""'
        """"""
        return self.ask('syst:err:all?')

    def error(self) -> str:
        """"""Retrieve next error

        Returns:
            str: The next error or '0, ""No error""'
        """"""
        return self.ask('syst:err?')

    def n_errors(self) -> int:
        """"""Peek at number of previous errors

        Returns:
            int: Number of errors
        """"""
        return int(self.ask('syst:err:coun?'))

    def start_all(self) -> None:
        """"""Trigger the global SCPI bus (``*TRG``)

        All generators, that have not been explicitly set to trigger on an
        internal or external trigger, will be started.
        """"""
        self.write('*trg')

    def remove_traces(self) -> None:
        """"""Delete all trace definitions from the instrument

        This means that all AWGs loose their data.
        """"""
        self.write('trac:rem:all')

    def traces(self) -> Sequence[str]:
        """"""List all defined traces

        Returns:
            Sequence[str]: trace names
        """"""
        return comma_sequence_to_list(self.ask('trac:cat?'))

    def allocate_trace(self, name: str, size: int) -> Trace_Context:
        """"""Reserve memory for a new trace

        Args:
            name (str): Name of new trace
            size (int): Number of voltage values in the trace

        Returns:
            Trace_Context: context manager
        """"""
        return Trace_Context(self, name, size)

    def mac(self) -> str:
        """"""
        Returns:
            str: Media Access Control (MAC) address of the instrument
        """"""
        mac = self.ask('syst:comm:lan:mac?')
        return f'{mac[1:3]}-{mac[3:5]}-{mac[5:7]}-{mac[7:9]}-{mac[9:11]}' \
               f'-{mac[11:13]}'

    def arrange(self, contacts: Dict[str, int],
                output_triggers: Optional[Dict[str, int]] = None,
                internal_triggers: Optional[Sequence[str]] = None
                ) -> Arrangement_Context:
        """"""An arrangement of contacts and triggers for virtual gates

        Each contact corresponds to a particular output channel.  Each
        output_trigger corresponds to a particular external output trigger.
        Each internal_trigger will be allocated from the pool of internal
        triggers, and can later be used for synchronisation.  After
        initialisation of the arrangement, contacts and triggers can only be
        referred to by name.

        The voltages that will appear on each contact depends not only on the
        specified virtual voltage, but also on a correction matrix.  Initially,
        the contacts are assumed to not influence each other, which means that
        the correction matrix is the identity matrix, ie. the row for
        each contact has a value of [0, ..., 0, 1, 0, ..., 0].

        Args:
            contacts (Dict[str, int]): Name/channel pairs
            output_triggers (Sequence[Tuple[str,int]], optional): Name/number pairs of output triggers
            internal_triggers (Sequence[str], optional): List of names of internal triggers to allocate

        Returns:
            Arrangement_Context: context manager
        """"""
        return Arrangement_Context(self, contacts, output_triggers,
                                   internal_triggers)

    # -----------------------------------------------------------------------
    # Instrument-wide functions
    # -----------------------------------------------------------------------

    # -----------------------------------------------------------------------
    # Debugging and testing

    def start_recording_scpi(self) -> None:
        """"""Record all SCPI commands sent to the instrument

        Any previous recordings are removed.  To inspect the SCPI commands sent
        to the instrument, call get_recorded_scpi_commands().
        """"""
        self._scpi_sent: List[str] = list()
        self._record_commands = True

    def get_recorded_scpi_commands(self) -> List[str]:
        """"""
        Returns:
            Sequence[str]: SCPI commands sent to the instrument
        """"""
        commands = self._scpi_sent
        self._scpi_sent = list()
        return commands

    def clear(self) -> None:
        """"""Reset the VISA message queue of the instrument
        """"""
        self.visa_handle.clear()

    def clear_read_queue(self) -> Sequence[str]:
        """"""Flush the VISA message queue of the instrument

        Takes at least _message_flush_timeout_ms to carry out.

        Returns:
            Sequence[str]: Messages lingering in queue
        """"""
        lingering = list()
        original_timeout = self.visa_handle.timeout
        self.visa_handle.timeout = self._message_flush_timeout_ms
        while True:
            try:
                message = self.visa_handle.read()
            except VisaIOError:
                break
            else:
                lingering.append(message)
        self.visa_handle.timeout = original_timeout
        return lingering

    # -----------------------------------------------------------------------
    # Override communication methods to make it possible to record the
    # communication with the instrument.

    def write(self, cmd: str) -> None:
        """"""Send SCPI command to instrument

        Args:
            cmd (str): SCPI command
        """"""
        if self._record_commands:
            self._scpi_sent.append(cmd)
        super().write(cmd)

    def ask(self, cmd: str) -> str:
        """"""Send SCPI query to instrument

        Args:
            cmd (str): SCPI query

        Returns:
            str: SCPI answer
        """"""
        if self._record_commands:
            self._scpi_sent.append(cmd)
        answer = super().ask(cmd)
        return answer

    def write_floats(self, cmd: str, values: Sequence[float]) -> None:
        """"""Append a list of values to a SCPI command

        By default, the values are IEEE binary encoded.

        Remember to include separating space in command if needed.
        """"""
        if self._no_binary_values:
            compiled = f'{cmd}{floats_to_comma_separated_list(values)}'
            if self._record_commands:
                self._scpi_sent.append(compiled)
            return super().write(compiled)
        if self._record_commands:
            self._scpi_sent.append(f'{cmd}{floats_to_comma_separated_list(values)}')
        self.visa_handle.write_binary_values(cmd, values)

    # -----------------------------------------------------------------------

    def _set_up_debug_settings(self) -> None:
        self._record_commands = False
        self._scpi_sent = list()
        self._message_flush_timeout_ms = 1
        self._round_off = None
        self._no_binary_values = False

    def _set_up_serial(self) -> None:
        # No harm in setting the speed even if the connection is not serial.
        self.visa_handle.baud_rate = 921600  # type: ignore

    def _check_for_wrong_model(self) -> None:
        model = self.IDN()['model']
        if model != 'QDAC-II':
            raise ValueError(f'Unknown model {model}. Are you using the right'
                             ' driver for your instrument?')

    def _check_for_incompatiable_firmware(self) -> None:
        # Only compare the firmware, not the FPGA version
        firmware = split_version_string_into_components(self.IDN()['firmware'])[1]
        least_compatible_fw = '0.17.5'
        if parse(firmware) < parse(least_compatible_fw):
            raise ValueError(f'Incompatible firmware {firmware}. You need at '
                             f'least {least_compatible_fw}')

    def _set_up_channels(self) -> None:
        channels = ChannelList(self, 'Channels', QDac2Channel,
                               snapshotable=False)
        for i in range(1, 24 + 1):
            name = f'ch{i:02}'
            channel = QDac2Channel(self, name, i)
            self.add_submodule(name, channel)
            channels.append(channel)
        channels.lock()
        self.add_submodule('channels', channels)

    def _set_up_external_triggers(self) -> None:
        triggers = ChannelList(self, 'Channels', QDac2ExternalTrigger,
                               snapshotable=False)
        for i in range(1, 5 + 1):
            name = f'ext{i}'
            trigger = QDac2ExternalTrigger(self, name, i)
            self.add_submodule(name, trigger)
            triggers.append(trigger)
        triggers.lock()
        self.add_submodule('external_triggers', triggers)

    def _set_up_internal_triggers(self) -> None:
        # A set of the available internal triggers
        self._internal_triggers = set(range(1, self.n_triggers() + 1))

    def _set_up_manual_triggers(self) -> None:
        self.add_parameter(
            name='trigger',
            # Manually trigger event
            set_parser=_trigger_context_to_value,
            set_cmd='tint {}',
        )

    def _set_up_simple_functions(self) -> None:
        self.add_function('abort', call_cmd='abor')

    def _check_instrument_name(self, name: str) -> None:
        if name.isidentifier():
            return
        raise ValueError(
            f'Instrument name ""{name}"" is incompatible with QCoDeS parameter '
            'generation (no spaces, punctuation, prepended numbers, etc)')
"
90,5.0,USA,"The LDA-302P-1N Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +33 dBm, and offers frequency coverage of 10 to 3,000 MHz. It has an attenuation range of 63 dB and a step size of 1.0 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-302P-1N ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-302P-1N,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attjFawHPuZIhCIvm'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/A6hv1Z0aMapfmOu-wXeIJw/-gyFqxvqUmIRBCO6SW6l7ktt3cFrFoyrVe5xgenrLKUOa8jKv2zo3gY8tyioYSfpSxyrghMXMTdPk1xFlt43eyMvzrW4KQf-9KBqCpX8NkqhFXbyzSa_966xjZXGiesu/L_HRmjPNsm8UJDN0e7p7kZ-QZqX2jOFyFIXH6ZfZvuI'), ('filename', 'vaunix-digital-attenuator.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GUwQORyqTC0-zAwyrcgH1w/YqAnHP-5f5_zWSu2h1BU1NmyNqbld1y2V5kpukzwbVzEi4luMjFQQ4PyiGpV11HPMcEMaiNkG7r3SkK_LMrLcw/I6ozji7OafxVBdhVca1pLYRRPX1tYNMmH04xjRgAeCE'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/MEd92cWH1XXXWYf03zG-Mg/oceNNd0D9cNv1PJv_mnxGAKZAtFcalIkg4Zvsvc2YdzEzS0XE02g0GE3O57xOlm4p9TkCsSKMcEtCFda_2oYjw/HQezMLSprHgNusJZx4AfaIjodhog_BYVluGUud7lVe4'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rSu1vKq12LxNbOO0UDR27A/PtoRD0BZ1vI3OtDQ9ulMs5NfjgUaL0ETAPD-aQ2fF3cPl4bBuM8GlaTFgd72APx6Xr7KQkfX2w5nqJDHwSKqWg/npPLGD__yMf3Q9xefxlQw5fmHhOwS12R9vmDNAQwNog'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-302p-1n-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,615.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
92,550.0,USA,"These Two-Position, High-Speed Flip Mounts flip lenses, filters, and other optical components into and out of a free-space beam. As shown by the image below, up to two optic mounts can be attached to the same flipper unit, allowing the user to alternate between optics. The flip action can be controlled in four ways: by the button on the top of the unit, via the included remote handset, via the external SMA connectors, or via a PC running the included software (see the Motion Control Software, Kinesis Tutorials, and APT Tutorials tabs for more information). The flipper position rotates 90° clockwise or counterclockwise when it is toggled and may be toggled either by an absolute signal level (i.e., low and high control voltages correspond to specific flipper positions) or by an edge (i.e., a change in the control voltage level causes the flipper to rotate). The unit has magnetic limit switches at both positions to identify which position the flipper is in.",MFF 10 X,621.0,"Thorlabs, Inc. is an American privately held optical equipment company headquartered in Newton, New Jersey. The company was founded in 1989 by Alex Cable, who serves as its current president and CEO. As of 2018, Thorlabs has annual sales of approximately $500 million.
",Qcodes Community,Thorlabs,"[OrderedDict([('id', 'attRmyBjaipm6atue'), ('width', 295), ('height', 50), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/B34kPd8TDySPykIqGnAQbw/aiiK819WYExx3Ptf5wMW9occy5nw036iAflUYeUKd3P4oIOtDcjE-9n_aPuC9CIL6NqW9upoWnPw1MNj_dT272K3sQl6HrzLFUheR7vbgDA/McPpt4BKHE-5dfRkgnw9sy91ZT_2J2U6zhqPJLIpSMo'), ('filename', 'Thorlabs_Logo_Red.png'), ('size', 3614), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-IvxdwJZrNBEfbQllhNmjw/R2XVDzJm1eKjim2p3oPbkO0dTIqE8mJXIfagvk20zhFxQhu6OksXnXxFX3T7Js0XghjhysXg1U4hrYSY20fgqw/ePugtvTHT0veIoRZ7driznLOXT78vezhqu8vI9Qr9tw'), ('width', 212), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7MaR2gHuTGamIUDR6lpP_Q/h_TMBraNTFAgmrgYDRJVXnE24Tce3lEenhhkhf4x6E7N8W4ioeCEy-FmPSScWXQSKR9mNqK7eHTYLngjLCjurg/xbql1i-E8yIE38xfkhyh6Ea8xj3EnIOpH7RBtQWLpFs'), ('width', 295), ('height', 50)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aM50-TKhPPqIT7mVMqCDNQ/NqK_Klj2IUd6BRR-rB9c_jzWWg3VIMr5gAf0IasH4eMUL0PkDhO0dpciWLQyN8Z40DMSviJxYrXeZh8qiz8g5Q/IrYPj2E85dh2q1sQ4SOYb_I8-A87BkF7ZS7m31_8sM0'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thorlabs.com/,Write a Python script that uses Qcodes Community to connect to a MMF101/MMF102 Motion,,['Motion'],,MMF101/MMF102,https://www.thorlabs.com/_sd.cfm?fileName=ETN012604-D02.pdf&partNumber=MFF102,"[OrderedDict([('id', 'attf8Uyrio0EVO37O'), ('width', 780), ('height', 780), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/sH5v31Mjs6Ba80P2hKvDDg/KRd442HnSALC0xNG5KvBaJyvlG0fmD9Gza-psL31pfr4uGfR2YJobLXpp5aMgp-QajESEK30hzOqj_B9W3BpZWSYgTc_zpyNw4jZncWT7qEqrurR_YYkJ1lhB2dJmr7a/vdmrg4hFm-JrAnGLh0mdd7PwoGYrI7DuNdVBmLVY5Vc'), ('filename', 'Optical_Filter_Mount_A3-780.jpg'), ('size', 83323), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/VDGE4A9n6ZrvL03Hh_TNtQ/2GNv6Rxh9_V_UMMJ97mmM4oOZdA-DT1xv11Ibeoy75IPQLycNM5cXtsSoIu0yBWbDv8ebUh9jcfTgh7amQWw3g/iwq-ekRN97MPRORYwM4KgvaLV4WJNSy-d24YufrxsHQ'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/VKIx20hTZP7mPMxBxfq13w/xy0pvOmxMRF0I4YUosa30jtC4z15vcizYvVu-CVLovuhUBWn0B6NpC4qoF0s7UBF2uI1UIYOCJXR80kqywYNFg/1e45yGQZbYhr6CogIAzeJ_NJJrZqb2hcHYeCBSF4J1c'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/N_ba1HnFlPU2nnmmy8vAHw/WLRtfZvrAa_zxBslMIZsSGFvDPniNyoluhXwtztmviyGTZpnoh08zkfZX7qUc8fh9VfCN4qV-JUAJz27AKAGSQ/SARoed85IEDVMfS_ZsdGQMi13CWjn_vYbUs0FqPAVdg'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thorlabs.com/newgrouppage9.cfm?objectgroup_id=3962,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Thorlabs/MFF10x.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Thorlabs_MFF10x.ipynb,758.17,,,,"from qcodes import Instrument
from .APT import Thorlabs_APT, ThorlabsHWType


class Thorlabs_MFF10x(Instrument):
    """"""
    Instrument driver for the Thorlabs MFF10x mirror flipper.

    Args:
        name: Instrument name.
        device_id: ID for the desired mirror flipper.
        apt: Thorlabs APT server.

    Attributes:
        apt: Thorlabs APT server.
        serial_number: Serial number of the mirror flipper.
        model: Model description.
        version: Firmware version.
    """"""

    def __init__(self, name: str, device_id: int, apt: Thorlabs_APT, **kwargs):

        super().__init__(name, **kwargs)

        # save APT server link
        self.apt = apt

        # initialization
        self.serial_number: int = self.apt.get_hw_serial_num_ex(ThorlabsHWType.MFF10x, device_id)
        self.apt.init_hw_device(self.serial_number)
        self.model, self.version, _ = self.apt.get_hw_info(self.serial_number)

        # add parameters
        self.add_parameter('position',
                           get_cmd=self._get_position,
                           set_cmd=self._set_position,
                           get_parser=int,
                           label='Position')

        # print connect message
        self.connect_message()

    # get methods
    def get_idn(self):
        return {'vendor': 'Thorlabs', 'model': self.model,
                'firmware': self.version, 'serial': self.serial_number}

    def _get_position(self):
        status_bits = bin(self.apt.mot_get_status_bits(self.serial_number) & 0xffffffff)
        return status_bits[-1]

    # set methods
    def _set_position(self, position):
        self.apt.mot_move_jog(self.serial_number, position+1, False)
"
98,2500.0,"Munich, Germany","The R&S®SMW200A offers integrated channel emulation for up to 800 MHz of fading bandwidth. Fading profiles for all major standards are available as presets. With up to 64 fading channels, all key MIMO fading scenarios such as 2x2, 3x3, 4x4, 8x4, 4x8 and 8x8 can be configured in a single instrument.",SMW 200 A,477.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",,https://www.testequipmenthq.com/datasheets/Rohde-Schwarz-SMW200A-Datasheet.pdf,"[OrderedDict([('id', 'attJFHviIVbFosQoO'), ('width', 640), ('height', 360), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/cYSv2dfqLjqONwbcQ2O0oA/1qG7K7wB20QxVyggHe3F4NUKUCDuU5qXYvA_UduTbLfr54Q5lHzCHpTJKHetdpniiOxmYNM8Ynu4-ea7IClR1zSxgIxZYRH2GmTdo_P_GX8BO0ORJAJWcvbntp6dkualAEaxqU-CODyf8TemsiReQvlOKFm0yMOeaWlkAg681humcL1AsE2I54iB4JfYPiS9/45NjBFHpo4CRH8lznJ2v5UFnOUbsZwyEvBZSCMIopGA'), ('filename', 'smw200a-vector-signal-generator-front-view-rohde-schwarz_200_909_640_360_2.jpg'), ('size', 40147), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ty7AH7QK5WeMO5R_dej7tw/aMlgwGeyJo3khwlTcy9sTppba5m7FgfQJo3TBIiKe-u-T9x3SpxKd78Ch9VnTMjeGo315KzxA0qn6Kv8hFtAog/KMDKdHoasR8deQTXa5CpJRLKpbiNHtMvi3jfhP_FPSI'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/amz5VkSJ-RFHbgzjWfkfHg/i6jiDwdxzGfBfMIGOxbDraJclo3F9yJ3IlK0loGCIcUarAghA4I8yKF4UIB9pE817Zg0HRs0nLiYpOielRM8Bw/9sMB0tIYNy4inlZK2qBDUPKKU_GYFGknmDsrad3kJ6A'), ('width', 640), ('height', 360)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_GVZu2PDeD01FwDjxQuReg/ikbYZjGPWM_EmrKmPqYkznsmRx6d1ro-sGUbdbtg4CDFp9p73tYS2zT3-k2cnIeDojX09Y1Gbar4tCkXvt6Lsg/TX1GzU7bZUW5j_cpJlrOEaPaJIRtJpQLbcPeiteEHfM'), ('width', 3000), ('height', 3000)]))]))])]","https://www.rohde-schwarz.com/us/products/test-and-measurement/vector-signal-generators/rs-smw200a-vector-signal-generator_63493-38656.html#:~:text=The%20R%26S%C2%AESMW200A%20offers,configured%20in%20a%20single%20instrument.",https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/SMW200A.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A,,,,,"# -*- coding: utf-8 -*-
""""""QCoDeS-Driver for Rohde&Schwarz Vector Signal Generator RS_SMW200A.

This driver can be used with a simulation class (SMW200Asim.py) to generate
reasonable answers to all requests. The only thing is to change two times
the comments as shown below (real mode/simulation mode).

Note:
    To use RohdeSchwarz_SMW200A with a dummy/simulator, replace its base class `VisaInstrument` with
    `MockVisa` from file SMW200Asim.py.

Authors:
    Michael Wagener, ZEA-2, m.wagener@fz-juelich.de
    Sarah Fleitmann, ZEA-2, s.fleitmann@fz-juelich.de
    Lukas Lankes, ZEA-2, l.lankes@fz-juelich.de
""""""


import logging
from functools import partial
import time
from typing import Union

from qcodes import VisaInstrument
from qcodes.instrument.channel import InstrumentChannel, ChannelList
from qcodes import validators as vals

log = logging.getLogger(__name__)

_MODULATION_SIGNAL_DOC_POOL = {
    ""INT"": ""internally generated LF signal = 'LF1'"",
    ""EXT"": ""externally supplied LF signal  = 'EXT1'"",
    ""LF1"": ""first internally generated signal"",
    ""LF2"": ""second internally gererated signal"",
    ""NOIS"": ""internally generated noise signal"",
    ""EXT1"": ""first externally supplied signal"",
    ""EXT2"": ""second externally supplied signal"",
    ""INTB"": ""internal baseband signal""
}


class IQChannel(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""The I/Q channels are the analog output channels of the device.

        Arguments:
            parent: the parent instrument of this channel
            name:   the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication

        Attributes:
            state: Actives/deactives the I/Q output. Values are 'ON' and 'OFF'.
            type: Sets the type of the analog signal. Values are 'SING' (single) and 'DIFF'
                (differential, only available with option SMW-K16)
            mode: Determines the mode for setting the output parameters. Values are
                'FIX': Locks the I/Q output settings
                'VAR': Unlocks the settings (only available with option SMW-K16)
            level: Sets the off-load voltage Vp of the analog I/Q signal output.
                Values are in range 0.04V to 4V for option SMW-B10 and in range 0.04V
                to 2V for option SMW-B9. The value range is adjusted so that the maximum
                overall output voltage does not exceed 4V. Only settable when mode has
                the value 'VAR'.
            coupling: Couples the bias setting of the I and Q signal components.
                Values are 'ON and 'OFF'.
            i_bias: Specifies the amplifier bias of the I component. The value range
                is adjusted so that the maximum overall output voltage does not
                exceed 4V. Is only settable, if the mode parameter has the value 'VAR'.
            q_bias: Specifies the amplifier bias of the Q component. The value range
                is adjusted so that the maximum overall output voltage does not
                exceed 4V. Is only settable, if the mode parameter has the value 'VAR'.
            i_offset: Sets an offset between the inverting and non-inverting input
                of the differential analog I/Q output signal for the I component.
                The value range is adjusted so that the maximum overall output voltage
                does not exceed 4V. Is only settable, if parameter mode has the value 'VAR'.
            q_offset: Sets an offset between the inverting and non-inverting input
                of the differential analog I/Q output signal for the Q component.
                The value range is adjusted so that the maximum overall output voltage
                does not exceed 4V. Is only settable, if parameter mode has the value 'VAR'.
        """"""
        self.hwchan = hwchan
        super().__init__(parent, name)

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Actives/deactives the I/Q output. Values are 'ON' and 'OFF'."")

        if 'SMW-K16' in self._parent.options:
            type_validator = vals.Enum('SING', 'DIFF')
            mode_validator = vals.Enum('FIX', 'VAR')
        else:
            type_validator = vals.Enum('SING')
            mode_validator = vals.Enum('FIX')
        self.add_parameter('type',
                           label='Type',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:TYPE {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:TYPE?',
                           vals=type_validator,
                           docstring=""Sets the type of the analog signal. Values are""
                                     "" 'SING' (single) and 'DIFF' (differential, only""
                                     "" available with option SMW-K16)"")

        self.add_parameter('mode',
                           label='Mode',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:MODE {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:MODE?',
                           vals=mode_validator,
                           docstring=""""""
                           Determines the mode for setting the output parameters. Values are:
                               'FIX': Locks the I/Q output settings
                               'VAR': Unlocks the settings (only available with option SMW-K16)
                           """""")

        if 'SMW-B10' in self._parent.options:
            level_validator = vals.Numbers(0.04, 4)
        else: #option SMW-B9
            level_validator = vals.Numbers(0.04, 2)

        level_set_cmd: Union[str, bool] = False
        if self.mode() == 'VAR':
            level_set_cmd = f'SOUR{self.hwchan}:'+'IQ:OUTP:LEV {}'

        self.add_parameter('level',
                           label='Level',
                           set_cmd=level_set_cmd,
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:LEV?',
                           get_parser=float,
                           vals=level_validator,
                           unit='V',
                           docstring=""Sets the off-load voltage Vp of the analog I/Q signal""
                                     "" output. Values are in range 0.04V to 4V for option""
                                     "" SMW-B10 and in range 0.04V to 2V for option SMW-B9.""
                                     "" The value range is adjusted so that the maximum""
                                     "" overall output voltage does not exceed 4V. Only""
                                     "" settable when mode has the value 'VAR'."")

        self.add_parameter('coupling',
                           label='Coupling',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:BIAS:COUP:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:BIAS:COUP:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Couples the bias setting of the I and Q signal""
                                     "" components. Values are 'ON and 'OFF'."")

        if 'SMW-B10' in self._parent.options:
            lower = -4+self.level()/2+self.i_offset()/2
            upper = 4-self.level()/2-self.i_offset()/2
            bias_validator = vals.Numbers(lower, upper)
        else: #option SMW-B9
            bias_validator = vals.Numbers(-0.2, 2.5)

        i_bias_set_cmd: Union[str, bool] = False
        if self.mode() == 'VAR':
            i_bias_set_cmd = f'SOUR{self.hwchan}:' + 'IQ:OUTP:ANAL:BIAS:I {}'

        self.add_parameter('i_bias',
                           label='I bias',
                           set_cmd=i_bias_set_cmd,
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:BIAS:I?',
                           get_parser=float,
                           vals=bias_validator,
                           unit='V',
                           docstring=""Specifies the amplifier bias of the I component.""
                                     "" The value range is adjusted so that the maximum""
                                     "" overall output voltage does not exceed 4V. Is only""
                                     "" settable, if the mode parameter has the value 'VAR'."")

        if 'SMW-B10' in self._parent.options:
            lower = -4+self.level()/2+self.q_offset()/2
            upper = 4-self.level()/2-self.q_offset()/2
            bias_validator = vals.Numbers(lower, upper)
        else: #option SMW-B9
            bias_validator = vals.Numbers(-0.2, 2.5)

        q_bias_set_cmd: Union[str, bool] = False
        if self.mode() == 'VAR':
            q_bias_set_cmd = f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:BIAS:Q {}'

        self.add_parameter('q_bias',
                           label='Q bias',
                           set_cmd=q_bias_set_cmd,
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:BIAS:Q?',
                           get_parser=float,
                           vals=bias_validator,
                           unit='V',
                           docstring=""Specifies the amplifier bias of the Q component.""
                                     "" The value range is adjusted so that the maximum""
                                     "" overall output voltage does not exceed 4V. Is only""
                                     "" settable, if the mode parameter has the value 'VAR'."")

        if 'SMW-B10' in self._parent.options:
            lower = -4+self.level()/2+self.i_bias()/2
            upper = 4-self.level()/2-self.i_bias()/2
            offset_validator = vals.Numbers(lower, upper)
        else: #option SMW-B9
            lower = -2+self.level()
            upper = 2-self.level()
            offset_validator = vals.Numbers(lower, upper)

        i_offset_set_cmd: Union[str, bool] = False
        if self.mode() == 'VAR':
            i_offset_set_cmd = f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:OFFS:I {}'

        self.add_parameter('i_offset',
                           label='I offset',
                           set_cmd=i_offset_set_cmd,
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:OFFS:I?',
                           get_parser=float,
                           vals=offset_validator,
                           unit='V',
                           docstring=""Sets an offset between the inverting and non-inverting""
                                     "" input of the differential analog I/Q output signal""
                                     "" for the I component.""
                                     "" The value range is adjusted so that the maximum""
                                     "" overall output voltage does not exceed 4V. Is only""
                                     "" settable, if the mode parameter has the value 'VAR'."")

        if 'SMW-B10' in self._parent.options:
            lower = -4+self.level()/2+self.q_bias()/2
            upper = 4-self.level()/2-self.q_bias()/2
            offset_validator = vals.Numbers(lower, upper)
        else: #option SMW-B9
            lower = -2+self.level()
            upper = 2-self.level()
            offset_validator = vals.Numbers(lower, upper)

        q_offset_set_cmd: Union[str, bool] = False
        if self.mode() == 'VAR':
            q_offset_set_cmd = f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:OFFS:Q {}'

        self.add_parameter('q_offset',
                           label='Q offset',
                           set_cmd=q_offset_set_cmd,
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:OUTP:ANAL:OFFS:Q?',
                           get_parser=float,
                           vals=offset_validator,
                           unit='V',
                           docstring=""Sets an offset between the inverting and non-inverting""
                                     "" input of the differential analog I/Q output signal""
                                     "" for the Q component.""
                                     "" The value range is adjusted so that the maximum""
                                     "" overall output voltage does not exceed 4V. Is only""
                                     "" settable, if the mode parameter has the value 'VAR'."")
        # TODO: setter methods for the last 4 parameters, they have dynamic validators



class IQModulation(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""Combines all the parameters concerning the IQ modulation.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication

        Attributes:
            state: Activates/deactivates the I/Q modulation. Values are 'ON', and 'OFF'.
            source: Selects/reads the input signal source for the I/Q modulator.
                'BAS': internal baseband signal
                'ANAL': external analog signal
                'DIFF': differential analog signal (only with option SMW-K739)
            gain: Optimizes the modulation of the I/Q modulator for a subset of
                measurement requirements.
                'DB0': Activates the gain of  0 dB
                'DB2': Activates the gain of +2 dB
                'DB3': same as 'DB2', for backward compatibility
                'DB4': Activates the gain of +4 dB
                'DB6': Activates the gain of +6 dB
                'DB8': Activates the gain of +8 dB
                'DBM2': Activates the gain of -2 dB
                'DBM3': same as 'DBM2', for backward compatibility
                'DBM4': Activates the gain of -4 dB
                'AUTO': The gain value is retrieved form the connected R&S SZU. The I/Q modulator
                is configured automatically.
            swap: Activates/Deactives the swapping of the I and Q channel. Values are 'ON' / 'OFF'.
            crest_factor: If source set to 'ANAL' (Analog Wideband I/Q Input), sets the crest factor
                of the externally supplied analog signal. The crest factor gives the difference in
                level between the peak envelope power (PEP) and the average power value (RMS) in dB.
                The R&S SMW uses this value for the calculation of the RF output power. The allowed
                range is from 0 dB to 35 dB.
            wideband: Activates/deactivates optimization for wideband modulation signals
                (higher I/Q modulation bandwidth). Values are 'ON' and 'OFF'.
        """"""
        self.hwchan = hwchan
        super().__init__(parent, name)

        if 'SMW-K739' in self._parent.options:
            source_validator = vals.Enum('BAS', 'ANAL', 'DIFF')
        else:
            source_validator = vals.Enum('BAS', 'ANAL')
        self.add_parameter('source',
                           label='Source',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:SOUR {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:SOUR?',
                           vals=source_validator,
                           docstring=""""""
                           Selects/reads the input signal source for the I/Q modulator.
                           Values are:
                               'BAS': internal baseband signal
                               'ANAL': external analog signal
                               'DIFF': differential analog signal (only with option SMW-K739)
                           """""")

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates/deactivates the I/Q modulation. Values""
                                     "" are 'ON', and 'OFF'"")

        self.add_parameter('gain',
                           label='Gain',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:GAIN {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:GAIN?',
                           vals=vals.Enum('DBM4', 'DBM2', 'DB0', 'DB2', 'DB4', \
                                          'DB8', 'DB6', 'DBM3', 'DB3', 'AUTO'),
                           docstring=""""""
                           Optimizes the modulation of the I/Q modulator for a subset
                           of measurement requirements. Possible values are:
                               'DB0'=0dB, 'DB2'=+2dB, 'DB4'=+4dB, 'DB6'=+6dB, 'DB8'=+8dB
                               'DBM2'=-2dB, 'DBM4'=-4dB
                               'DB3' and 'DBM3' provided for backward compatibility (+/-2dB)
                               'AUTO': The gain value is retrieved form the connected R&S SZU.
                               The I/Q modulator is configured automatically.
                           """""")

        self.add_parameter('crest_factor',
                           label='Crest factor',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:CRES {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:CRES?',
                           get_parser=float,
                           vals=vals.Numbers(0, 35),
                           unit='dB',
                           docstring=""If source set to `ANAL' (Analog Wideband I/Q Input),""
                                     "" sets the crest factor of the externally supplied""
                                     "" analog signal. The crest factor gives the difference""
                                     "" in level between the peak envelope power (PEP) and""
                                     "" the average power value (RMS) in dB. The R&S SMW uses""
                                     "" this value for the calculation of the RF output power.""
                                     "" The allowed range is from 0 dB to 35 dB."")

        self.add_parameter('swap',
                           label='Swap',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:SWAP:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:SWAP:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates/Deactives the swapping of the I""
                                     "" and Q channel. Values are 'ON' and 'OFF'."")

        self.add_parameter('wideband',
                           label='Wideband',
                           set_cmd=f'SOUR{self.hwchan}:'+'IQ:WBST {}',
                           get_cmd=f'SOUR{self.hwchan}:'+'IQ:WBST?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates/deactivates optimization for wideband""
                                     "" modulation signals (higher I/Q modulation""
                                     "" bandwidth). Values are 'ON' and 'OFF'."")



class FrequencyModulation(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int, chnum: int):
        """"""Combines all the parameters concerning the frequency modulation.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication
            chnum : the internal number of the channel used for the communication
    
        Attributes:
            state: actives/deactivates the frequency modulation. Values are 'ON' and 'OFF'.
            deviation: Sets the modulation deviation of the frequency modulation in Hz.
            source: Selects the modulation source. Values are:
                'INT': internally generated LF signal = 'LF1' (channel 2 only with option SMW-K24)
                'EXT': externally supplied LF signal  = 'EXT1' (channel 2 only with option SMW-K24)
                'LF1': first internally generated signal
                'LF2': second internally gererated signal (only available with option SMW-K24)
                'NOIS': internally generated noise signal (only available with option SMW-K24)
                'EXT1': first externally supplied signal
                'EXT2': second externally supplied signal
                'INTB': internal baseband signal (only available with option SMW-B9)
            coupling_mode: Selects the coupling mode. The coupling mode parameter also
                determines the mode for fixing the total deviation. Values are:
                'UNC': Does not couple the LF signals. The deviation values of both paths are
                independent.
                'TOT': Couples the deviation of both paths.
                'RAT': Couples the deviation ratio of both paths
            total_deviation: Sets the total deviation of the LF signal when using combined
                signal sources in frequency modulation.
            deviation_ratio: Sets the deviation ratio (path2 to path1) in percent.
            mode: Selects the mode for the frequency modulation. Values are:
                'NOR': normal mode
                'LNO': low noise mode
            sensitivity: (ReadOnly) Queries the sensitivity of the externally supplied signal for
                frequency modulation. The sensitivity depends on the set modulation deviation.
        """"""
        self.hwchan = hwchan
        self.chnum = chnum
        super().__init__(parent, name)

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:FM{self.chnum}:' + 'STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:FM{self.chnum}:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""actives/deactivates the frequency modulation.""
                                     "" Values are 'ON' and 'OFF'."")

        self.add_parameter('deviation',
                           label='Deviation',
                           set_cmd=f'SOUR{self.hwchan}:FM{self.chnum}:' + 'DEV {}',
                           get_cmd=f'SOUR{self.hwchan}:FM{self.chnum}:DEV?',
                           get_parser=float,
                           vals=vals.Numbers(0, 1.6e8),
                           unit='Hz',
                           docstring=""Sets the modulation deviation of the frequency""
                                     "" modulation in Hz."")

        # Select the set of available values from the installed options
        if 'SMW-B9' in self._parent.options and not 'SMW-K24' in self._parent.options:
            sv = ['INT', 'LF1', 'EXT', 'EXT1', 'EXT2', 'INTB'] \
            if self.chnum == 1 else ['LF1', 'EXT1', 'EXT2', 'INTB']
        elif not 'SMW-B9' in self._parent.options and 'SMW-K24' in self._parent.options:
            sv = ['INT', 'LF1', 'LF2', 'NOIS', 'EXT', 'EXT1', 'EXT2']
        elif 'SMW-B9' in self._parent.options and 'SMW-K24' in self._aprent.options:
            sv = ['INT', 'LF1', 'LF2', 'NOIS', 'EXT', 'EXT1', 'EXT2', 'INTB']
        else:
            sv = ['INT', 'LF1', 'EXT', 'EXT1', 'EXT2'] \
            if self.chnum == 1 else ['LF1', 'EXT1', 'EXT2']
        # Generate part of the docstring value according to the validator strings
        ds = """"
        for key, value in _MODULATION_SIGNAL_DOC_POOL.items():
            if key in sv:
                ds += f""\n'{key}': {value}""
        self.add_parameter('source',
                           label='Source',
                           set_cmd=f'SOUR{self.hwchan}:FM{self.chnum}:' + 'SOUR {}',
                           get_cmd=f'SOUR{self.hwchan}:FM{self.chnum}:SOUR?',
                           vals=vals.Enum(*sv),
                           docstring=""Selects the modulation source. Values are:""+ds)

        if 'SMW-XXX' in self._parent.options: #TODO: welche Option wird hierfür benötigt?
            self.add_parameter('coupling_mode',
                               label='Coupling mode',
                               set_cmd=f'SOUR{self.hwchan}:' + 'FM:DEV:MODE {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'FM:DEV:MODE?',
                               vals=vals.Enum('UNC', 'TOT', 'RAT'))

        if 'SMW-XXX' in self._parent.options: #TODO: welche Option wird hierfür benötigt?
            self.add_parameter('total_deviation',
                               label='Total deviation',
                               set_cmd=f'SOUR{self.hwchan}:' + 'FM:DEV:SUM {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'FM:DEV:SUM?',
                               get_parser=float,
                               vals=vals.Numbers(0, 40e6))

        self.add_parameter('deviation_ratio',
                           label='Deviation ratio',
                           set_cmd=f'SOUR{self.hwchan}:' + 'FM:RAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'FM:RAT?',
                           get_parser=float,
                           vals=vals.Numbers(0, 100),
                           unit='%',
                           docstring=""Sets the deviation ratio (path2 to path1) in percent."")

        self.add_parameter('mode',
                           label='Mode',
                           set_cmd=f'SOUR{self.hwchan}:' + 'FM:MODE {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'FM:MODE?',
                           vals=vals.Enum('NORM', 'LNO'),
                           docstring=""Selects the mode for the frequency modulation.""
                                     "" 'NOR'=normal mode, 'LNO'=low noise mode"")

        self.add_parameter('sensitivity',
                           label='Sensitivity',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.hwchan}:' + 'FM:SENS?',
                           get_parser=float,
                           unit='Hz/V',
                           docstring=""(ReadOnly) Queries the sensitivity of the externally""
                                     "" supplied signal for frequency modulation. The""
                                     "" sensitivity depends on the set modulation deviation."")


class AmplitudeModulation(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int, chnum: int):
        """"""Combines all the parameters concerning the amplitude modulation. Activation
        of amplitude modulation deactivates ARB, I/Q modulation, digital modulation
        and all digital standards.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication
            chnum : the internal number of the channel used in the communication

        Attributes:
            state: actives/deactivates the amplitude modulation. Values are 'ON' and 'OFF'.
            source: Selects the modulation source. Values are:
                'INT': internally generated LF signal = 'LF1' (channel 2 only with option SMW-K24)
                'EXT': externally supplied LF signal  = 'EXT1' (channel 2 only with option SMW-K24)
                'LF1': first internally generated signal
                'LF2': second internally gererated signal (only available with option SMW-K24)
                'NOIS': internally generated noise signal (only available with option SMW-K24)
                'EXT1': first externally supplied signal
                'EXT2': second externally supplied signal
            depth: Sets the depth of the amplitude modulation in percent.
            total_depth: Sets the total depth of the LF signal when using combined
                signal sources in amplitude modulation.
            coupling_mode: Selects the coupling mode. The coupling mode parameter also
                determines the modefor fixing the total depth. Values are:
                'UNC': Does not couple the LF signals. The deviation depth values of
                both paths are independent.
                'TOT': Couples the deviation depth of both paths.
                'RAT': Couples the deviation depth ratio of both paths.
            deviation_ratio: Sets the deviation ratio (path2 to path1) in percent.
            sensitivity: (ReadOnly) Queries the sensitivity of the externally applied signal.
                The sensitivity depends on the set modulation depth. The returned value
                reports the sensitivity in %/V. It is assigned to the voltage value for
                full modulation of the input.
        """"""
        self.hwchan = hwchan
        self.chnum = chnum
        super().__init__(parent, name)

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:AM{self.chnum}:' + 'STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:AM{self.chnum}:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""""""
                           Actives/deactivates the amplitude modulation. Values are 'ON' and 'OFF'.
                           Activation of amplitude modulation deactivates ARB, I/Q modulation,
                           digital modulation and all digital standards.
                           """""")

        # Select the set of available values from the installed options
        if 'SMW-K24' in self._parent.options:
            sv = ['LF1', 'LF2', 'EXT1', 'EXT2', 'NOIS', 'INT', 'EXT']
        else:
            sv = ['LF1', 'EXT1', 'EXT2', 'INT', 'EXT'] if chnum == 1 \
            else ['LF1', 'EXT1', 'EXT2']
        # Generate part of the docstring value according to the validator strings
        ds = """"
        for key, value in _MODULATION_SIGNAL_DOC_POOL.items():
            if key in sv:
                ds += f""\n'{key}': {value}""
        self.add_parameter('source',
                           label='Source',
                           set_cmd=f'SOUR{self.hwchan}:AM{self.chnum}:' + 'SOUR {}',
                           get_cmd=f'SOUR{self.hwchan}:AM{self.chnum}:SOUR?',
                           vals=vals.Enum(*sv),
                           docstring=""Selects the modulation source. Values are:""+ds)

        self.add_parameter('depth',
                           label='Depth',
                           set_cmd=f'SOUR{self.hwchan}:AM{self.chnum}:' + 'DEPT {}',
                           get_cmd=f'SOUR{self.hwchan}:AM{self.chnum}:DEPT?',
                           get_parser=float,
                           unit='%',
                           vals=vals.Numbers(0, 100),
                           docstring=""Sets the depth of the amplitude modulation in percent."")

        if 'SMW-XXX' in self._parent.options:
            # this function was disabled in the device but the needed option not documented in manual
            self.add_parameter('total_depth',
                               label='Total depth',
                               set_cmd=f'SOUR{self.hwchan}:' + 'AM:DEPT:SUM {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'AM:DEPT:SUM?',
                               get_parser=float,
                               vals=vals.Numbers(0, 100))

        if 'SMW-XXX' in self._parent.options:
            # this function was disabled in the device but the needed option not documented in manual
            self.add_parameter('coupling_mode',
                               label='Coupling mode',
                               set_cmd=f'SOUR{self.hwchan}:' + 'AM:DEV:MODE {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'AM:DEV:MODE?',
                               vals=vals.Enum('UNC', 'TOT', 'RAT'))

        self.add_parameter('deviation_ratio',
                           label='Deviation ratio',
                           set_cmd=f'SOUR{self.hwchan}:' + 'AM:RAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'AM:RAT?',
                           get_parser=float,
                           vals=vals.Numbers(0, 100),
                           unit='%',
                           docstring=""Sets the deviation ratio (path2 to path1) in percent."")

        self.add_parameter('sensitivity',
                           label='Sensitifity',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.hwchan}:' + 'AM:SENS?',
                           get_parser=float,
                           unit='%/V',
                           docstring=""(ReadOnly) Queries the sensitivity of the externally""
                                     "" applied signal. The sensitivity depends on the set""
                                     "" modulation depth. The returned value reports the""
                                     "" sensitivity in %/V. It is assigned to the voltage""
                                     "" value for full modulation of the input."")



class PulseModulation(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""Combines all the parameters concerning the pulse modulation.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication


        Attributes:
            state: Activates/deactivates the pulse modulation. Values are 'ON' and 'OFF'.
            source: Selects the modulation source. Values are:

                - 'INT': internally generated signal is used (only available with option SMW-K23)
                - 'EXT': externally supplied signal is used

            transition_type: sets the transition mode for the pulse signal. Values are:

                - 'SMO': flattens the slew , resulting in longer rise/fall times (SMOothed)
                - 'FAST': enables fast transition with shortest rise and fall times

            video_polarity: Sets the polarity of the pulse video (modulating) signal,
                related to the RF (modulated) signal. Values are:

                - 'NORM': the video signal follows the RF signal, that means it is high
                  when RF signal is high and vice versa
                - 'INV': the video signal follows in inverted mode

            polarity: sets the polarity of the externally applied modulation signal

                - 'NORM': Suppresses the RF signal during the pulse pause
                - 'INV': Suppresses the RF signal during the pulse

            impedance: Sets the impedance for the external pulse modulation input.
                Values are 'G50' and 'G1K'
            trigger_impedance: Sets the impedance for the external pulse trigger.
                Values are 'G50' and 'G10K'

            mode: (Only SMW-K23) Selects the mode for the pulse modulation. Values can be:

                - 'SING': generates a single pulse
                - 'DOUB': generates two pulses within one pulse period

            double_delay: (Only SMW-K23) Sets the delay from the start of the first pulse to the
                start of the second pulse.
            double_width: (Only SMW-K23) Sets the width of the second pulse.
            trigger_mode: (Only SMW-K23) Selects a trigger mode for generating the modulation
                signal. Values are 'AUTO' (AUTOmatic), 'EXT' (EXTernal), 'EGAT' (External
                GATed), 'ESIN' (External single).
            period: (Only SMW-K23) Sets the period of the generated pulse, that means the repetition
                frequency of the internally generated modulation signal.
            width: (Only SMW-K23) Sets the width of the generated pulse, that means the pulse
                length. It must be at least 20ns less than the set pulse period.
            delay: (Only SMW-K23) Sets the pulse delay.
        """"""
        self.hwchan = hwchan
        super().__init__(parent, name)

        if 'SMW-K23' in self._parent.options:
            self.add_parameter('mode',
                               label='Mode',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PULM:MODE {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:MODE?',
                               vals=vals.Enum('SING', 'DOUB'),
                               docstring=""""""
                               Selects the mode for the pulse modulation.
                               'SING': generates a single pulse
                               'DOUB': generates two pulses within one pulse period.
                               """""")

            self.add_parameter('double_delay',
                               label='Double delay',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PULM:DOUB:DEL {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:DOUB:DEL?',
                               get_parser=float,
                               docstring=""Sets the delay from the start of the first""
                                         "" pulse to the start of the second pulse."")

            self.add_parameter('double_width',
                               label='Double width',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PULM:DOUB:WID {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:DOUB:WID?',
                               get_parser=float,
                               docstring=""Sets the width of the second pulse."")

            self.add_parameter('trigger_mode',
                               label='Trigger mode',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PULM:TRIG:MODE {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:TRIG:MODE?',
                               vals=vals.Enum('AUTO', 'EXT', 'EGAT', 'ESIN'),
                               docstring=""Selects a trigger mode for generating the modulation""
                                         "" signal. Values are 'AUTO' (AUTOmatic), 'EXT'""
                                         "" (EXTernal), 'EGAT' (External GATed), 'ESIN'""
                                         "" (External single)."")

            self.add_parameter('period',
                               label='Period',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PULM:PER {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:PER?',
                               get_parser=float,
                               vals=vals.Numbers(20e-9, 100),
                               unit='s',
                               docstring=""Sets the period of the generated pulse, that""
                                         "" means the repetition frequency of the internally""
                                         "" generated modulation signal."")

            self.add_parameter('width',
                               label='Width',
                               set_cmd=partial(self._setwidth),
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:WIDT?',
                               get_parser=float,
                               vals=vals.Numbers(20e-9, 100),
                               unit='s',
                               docstring=""Sets the width of the generated pulse, that""
                                         "" means the pulse length. It must be at least""
                                         "" 20ns less than the set pulse period."")

            self.add_parameter('delay',
                               label='Delay',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PULM:DEL {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PULM:DEL?',
                               get_parser=float,
                               vals=vals.Numbers(),
                               unit='s',
                               docstring=""Sets the pulse delay."")

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates/deactivates the pulse modulation.""
                                     "" Values are 'ON' and 'OFF'."")

        sv = ['INT', 'EXT'] if 'SMW-K23' in self._parent.options else ['EXT']
        ds = """"
        if 'INT' in sv:
            ds += ""\n'INT': internally generated signal""
        if 'EXT' in sv:
            ds += ""\n'EXT': externally supplied signal""
        self.add_parameter('source',
                           label='Source',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:SOUR {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:SOUR?',
                           vals=vals.Enum(*sv),
                           docstring=""Selects the modulation source. Values are:""+ds)

        self.add_parameter('transition_type',
                           label='Transition type',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:TTYP {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:TTYP?',
                           vals=vals.Enum('SMO', 'FAST'),
                           docstring=""""""
                           Sets the transition mode for the pulse signal.
                           'SMO': flattens the slew, resulting in longer rise/fall times (SMOothed),
                           'FAST': enables fast transition with shortest rise and fall times
                           """""")

        self.add_parameter('video_polarity',
                           label='Video polaraity',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:OUTP:VID:POL {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:OUTP:VID:POL?',
                           vals=vals.Enum('NORM', 'INV'),
                           docstring=""""""
                           Sets the polarity of the pulse video (modulating) signal, related to
                           the RF (modulated) signal.
                           'NORM': the video signal follows the RF signal, that means it is high
                            when RF signal is high and vice versa
                           'INV': the video signal follows in inverted mode
                           """""")

        self.add_parameter('polarity',
                           label='Polarity',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:POL {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:POL?',
                           vals=vals.Enum('NORM', 'INV'),
                           docstring=""""""
                           sets the polarity of the externally applied modulation signal
                           'NORM': Suppresses the RF signal during the pulse pause
                           'INV': Suppresses the RF signal during the pulse
                           """""")

        self.add_parameter('impedance',
                           label='Impedance',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:IMP {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:IMP?',
                           vals=vals.Enum('G50', 'G1K'),
                           docstring=""Sets the impedance for the external pulse modulation""
                                     "" input. Values are 'G50' and 'G1K'"")

        self.add_parameter('trigger_impedance',
                           label='Trigger impedance',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PULM:TRIG:EXT:IMP {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PULM:TRIG:EXT:IMP?',
                           vals=vals.Enum('G50', 'G10K'),
                           docstring=""Sets the impedance for the external pulse trigger.""
                                     "" Values are 'G50' and 'G10K'"")

    def _setwidth(self, val):
        """"""
        Helper function to check the maximum allowed value for the step
        """"""
        maxwidth = self.period()-20e-9
        if val > maxwidth:
            raise ValueError(f'{repr(val)} is invalid: must be between 20e-9 and {maxwidth} '
                             f'inclusive.')
        self.write(f'SOUR{self.hwchan}:PULM:WIDT {val}')



class PulseGenerator(InstrumentChannel):
    """"""
    Configurations for the Pulse Generator set with another subclasses:
        Pulse Mode         -> PulseModulation.mode()
        Trigger Mode       -> PulseModulation.trigger_mode()
        Pulse Period       -> PulseModulation.period()
        Pulse Width        -> PulseModulation.width()
        Double Pulse Width -> PulseModulation.double_width()
        Pulse Delay        -> PulseModulation.delay()
        Double Pulse Delay -> PulseModulation.double_delay()
    """"""
    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""Combines all the parameters concerning the pulse generator for setting output
        of the pulse modulation signal. Available only with option SMW-K23 installed.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication

        Attributes:
            polarity: Sets the polarity of the pulse output signal. Values are:
                'NORM': Outputs the pulse signal during the pulse width, that means during
                the high state.
                'INV': Inverts the pulse output signal polarity. The pulse output signal
                is suppressed during the pulse width, but provided during the low state.
            output: Activates the output of the pulse modulation signal. Values are: 'OFF' or 'ON'.
            state: Enables the output of the video/sync signal. If the pulse generator is the
                current modulation source, activating the pulse modulation automatically
                activates the signal output and the pulse generator.
        """"""
        self.hwchan = hwchan
        super().__init__(parent, name)
        if not 'SMW-K23' in self._parent.options:
            raise RuntimeError(""Invalid usage of class without installed option K23"")

        self.add_parameter('polarity',
                           label='Polarity',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PGEN:OUTP:POL {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PGEN:OUTP:POL?',
                           vals=vals.Enum('NORM', 'INV'),
                           docstring=""""""
                           Sets the polarity of the pulse output signal.
                           'NORM': Outputs the pulse signal during the pulse width,
                           that means during the high state.
                           'INV': Inverts the pulse output signal polarity. The
                           pulse output signal is suppressed during the pulse width,
                           but provided during the low state.
                           """""")

        self.add_parameter('output',
                           label='Output',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PGEN:OUTP:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PGEN:OUTP:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""""""
                           Activates the output of the pulse modulation signal.
                           Possible values: OFF or ON.
                           """""")

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PGEN:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PGEN:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""""""
                           Enables the output of the video/sync signal.
                           If the pulse generator is the current modulation source,
                           activating the pulse modulation automatically activates
                           the signal output and the pulse generator.
                           Possible values: OFF or ON.
                           """""")

        self.add_parameter('mode',
                           label='',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PGEN:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PGEN:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""""""
                           """""")

        self.add_parameter('test',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PGEN:STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PGEN:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""""""
                           """""")


class PhaseModulation(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int, chnum: int):
        """"""Combines all the parameters concerning the phase modulation.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication
            chnum : the internal number of the channel used in the communication

        Attributes:
            state: Activates or deactivates phase modulation. Activation of phase modulation
                deactivates frequency modulation. Possible values are 'ON' and 'OFF'.
            deviation: Sets the modulation deviation of the phase modulation in RAD.
            source: Selects the modulation source. Values are:
                'INT': internally generated LF signal = 'LF1' (channel 2 only with option SMW-K24)
                'EXT': externally supplied LF signal  = 'EXT1' (channel 2 only with option SMW-K24)
                'LF1': first internally generated signal
                'LF2': second internally gererated signal (only available with option SMW-K24)
                'NOIS': internally generated noise signal (only available with option SMW-K24)
                'EXT1': first externally supplied signal
                'EXT2': second externally supplied signal
                'INTB': internal baseband signal (only available with option SMW-B9)
            mode: Selects the mode for the phase modulation. Possible values are:
                'HBAN': sets the maximum available bandwidth (High BANdwidth)
                'HDEV': sets the maximum range for deviation (High DEViation)
                'LNO': selects a phase modulation mode with phase noise and spurious
                characteristics close to CW mode. (Low NOise)
            coupling_mode: Selects the coupling mode. Possible values are:
                'UNC': Does not couple the LF signals. The deviation of both paths are independent.
                'TOT': Couples the deviation of both paths.
                'RAT': Couples the deviation ratio of both paths.
            total_deviation: Sets the total deviation of the LF signal when using
                combined signal sources. Possible values range from 0 to 20.
            ratio: Sets the deviation ratio (path2 to path1) in percent.
            sensitivity: Queries the sensitivity of the externally applied signal for phase
                modulation. The returned value reports the sensitivity in RAD/V. It is assigned
                to the voltage value for full modulation of the input.
        """"""
        self.hwchan = hwchan
        self.chnum = chnum
        super().__init__(parent, name)

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'SOUR{self.hwchan}:PM{self.chnum}:' + 'STAT {}',
                           get_cmd=f'SOUR{self.hwchan}:PM{self.chnum}:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates or deactivates phase modulation. Values are""
                                     "" 'ON' and 'OFF'. Activation of phase modulation""
                                     "" deactivates frequency modulation."")

        self.add_parameter('deviation',
                           label='Deviation',
                           set_cmd=f'SOUR:PM{self.chnum}:' + 'DEV {}',
                           get_cmd=f'SOUR:PM{self.chnum}:DEV?',
                           vals=vals.Numbers(0, 16),
                           unit='RAD',
                           docstring=""Sets the modulation deviation of the phase""
                                     ""modulation in RAD."")

        # Select the set of available values from the installed options
        if 'SMW-B9' in self._parent.options and not 'SMW-K24' in self._parent.options:
            sv = ['INT', 'LF1', 'EXT', 'EXT1', 'EXT2', 'INTB'] \
            if self.chnum == 1 else ['LF1', 'EXT1', 'EXT2', 'INTB']
        elif not 'SMW-B9' in self._parent.options and 'SMW-K24' in self._parent.options:
            sv = ['INT', 'LF1', 'LF2', 'NOIS', 'EXT', 'EXT1', 'EXT2']
        elif 'SMW-B9' in self._parent.options and 'SMW-K24' in self._aprent.options:
            sv = ['INT', 'LF1', 'LF2', 'NOIS', 'EXT', 'EXT1', 'EXT2', 'INTB']
        else:
            sv = ['INT', 'LF1', 'EXT', 'EXT1', 'EXT2'] \
            if self.chnum == 1 else ['LF1', 'EXT1', 'EXT2']
        # Generate part of the docstring value according to the validator strings
        ds = """"
        for key, value in _MODULATION_SIGNAL_DOC_POOL.items():
            if key in sv:
                ds += f""\n'{key}': {value}""
        self.add_parameter('source',
                           label='Source',
                           set_cmd=f'SOUR{self.hwchan}:PM{self.chnum}:' + 'SOUR {}',
                           get_cmd=f'SOUR{self.hwchan}:PM{self.chnum}:SOUR?',
                           vals=vals.Enum(*sv),
                           docstring=""Selects the modulations source. Values are:""+ds)

        self.add_parameter('mode',
                           label='Mode',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PM:MODE {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PM:MODE?',
                           vals=vals.Enum('HBAN', 'HDEV', 'LNO'),
                           docstring=""""""
                           Selects the mode for the phase modulation. Possible values are:
                           'HBAN': sets the maximum available bandwidth (High BANdwidth)
                           'HDEV': sets the maximum range for deviation (High DEViation)
                           'LNO': selects a phase modulation mode with phase noise and spurious
                               characteristics close to CW mode. (Low NOise)
                           """""")

        if 'SMW-XXX' in self._parent.options: #TODO: welche Option wird hierfür benötigt?
            self.add_parameter('coupling_mode',
                               label='Coupling mode',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PM:DEV:MODE {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PM:DEV:MODE?',
                               vals=vals.Enum('UNC', 'TOT', 'RAT'))

        if 'SMW-XXX' in self._parent.options: #TODO: welche Option wird hierfür benötigt?
            self.add_parameter('total_deviation',
                               label='Total deviation',
                               set_cmd=f'SOUR{self.hwchan}:' + 'PM:DEV:SUM {}',
                               get_cmd=f'SOUR{self.hwchan}:' + 'PM:DEV:SUM?',
                               vals=vals.Numbers(0, 20))

        self.add_parameter('ratio',
                           label='Ratio',
                           set_cmd=f'SOUR{self.hwchan}:' + 'PM:RAT {}',
                           get_cmd=f'SOUR{self.hwchan}:' + 'PM:RAT?',
                           vals=vals.Numbers(0, 100),
                           unit='%',
                           docstring=""Sets the deviation ratio (path2 to path1) in percent."")

        self.add_parameter('sensitivity',
                           label='Sensitivity',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.hwchan}:' + 'PM:SENS?',
                           unit='RAD/V',
                           docstring=""(ReadOnly) Queries the sensitivity of the externally""
                                     "" applied signal for phase modulation. The returned""
                                     "" value reports the sensitivity in RAD/V. It is assigned""
                                     "" to the voltage value for full modulation of the input."")



class LFOutputSweep(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""Combines all the parameters concerning one LF output Sweeping. The LF output
        is used as modulation signal for the analog modulation.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication

        Attributes:
            dwell: Dwell time in seconds from 0.5 ms to 100 s.
            mode: Cycle mode for level sweep.
                'AUTO': Each trigger triggers exactly one complete sweep.
                'MAN':  You can trigger every step individually with a command.
                'STEP': Each trigger triggers one sweep step only.
            points: Steps within level sweep range
            shape: Waveform shape for sweep. Allowed values are 'SAWTOOTH' and 'TRIANGLE'
            execute: Executes one RF level sweep. Use this without any ( )
            retrace: Activates that the signal changes to the start frequency value while it is
                waiting for the next trigger event. Values are 'ON' and 'OFF'. You can enable this
                feature, when you are working with sawtooth shapes in sweep mode 'MAN' or 'STEP'.
            running: (ReadOnly) Reports the current sweep state. Returnvalues are 'ON' or 'OFF'.
            spacing: calculationmode of frequency intervals. Values are 'LIN' or 'LOG'
            log_step: Sets the step width factor for logarithmic sweeps to calculate
                the frequencies of the steps. The value can be from 0.01% upto 100%.
            lin_step: Set the step size for linear sweep. The value can be from 0.01
                up to the value of <OutputChannel::sweep_span>
        """"""
        self.hwchan = hwchan

        super().__init__(parent, name)

        self.add_parameter('dwell',
                           label='Dwell time',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:' + 'DWEL {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:DWEL?',
                           get_parser=float,
                           vals=vals.Numbers(0.0005, 100),
                           unit='s',
                           docstring=""Dwell time in seconds from 0.5 ms to 100 s."")

        sweepmode = vals.Enum('AUTO', 'MAN', 'STEP')
        self.add_parameter('mode',
                           label='Cycle mode for level sweep',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:' + 'MODE {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:MODE?',
                           vals=sweepmode,
                           docstring=""""""
                           Cycle mode for level sweep. Values are:
                           'AUTO': Each trigger triggers exactly one complete sweep.
                           'MAN': You can trigger every step individually with a command.
                           'STEP': Each trigger triggers one sweep step only.
                           """""")

        self.add_parameter('points',
                           label='Steps within level sweep range',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:' + 'POIN {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:POIN?',
                           get_parser=int,
                           vals=vals.Numbers(2),  # Upperlimit=MAXINT
                           docstring=""Steps within level sweep range"")

        self.add_parameter('shape',
                           label='Waveform shape for sweep',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:' + 'SHAP {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:SHAP?',
                           vals=vals.Enum('SAWTOOTH', 'TRIANGLE'),
                           docstring=""Waveform shape for sweep. Allowed values""
                                     "" are 'SAWTOOTH' and 'TRIANGLE'"")

        self.add_function('execute',
                           call_cmd=f'SOUR{self.hwchan}:LFO:SWE:EXEC',
                           docstring=""Executes one RF level sweep. Use this without any ( )"")

        self.add_parameter('retrace',
                           label='Set to start frequency while waiting for trigger  ',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:' + 'RETR {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:RETR?',
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates that the signal changes to the start frequency""
                                     "" value while it is waiting for the next trigger event.""
                                     "" Values are 'ON' and 'OFF'. You can enable this feature,""
                                     "" when you are working with sawtooth shapes in sweep mode""
                                     "" 'MAN' or 'STEP'."")

        self.add_parameter('running',
                           label='Current sweep state',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:RUNN?',
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""(ReadOnly) Reports the current sweep state.""
                                     "" Returnvalues are 'ON' or 'OFF'."")

        self.add_parameter('spacing',
                           label='calculationmode of frequency intervals',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:' + 'SPAC {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:SPAC?',
                           vals=vals.Enum('LIN', 'LOG'),
                           docstring=""Calculationmode of frequency intervals.""
                                     "" Values are 'LIN' or 'LOG'."")

        self.add_parameter('log_step',
                           label='logarithmically determined step size for the RF freq sweep',
                           set_cmd=f'SOUR{self.hwchan}:LFO:SWE:STEP:' + 'LOG {}',
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:STEP:LOG?',
                           get_parser=float,
                           vals=vals.Numbers(0.01, 100),
                           unit='%',
                           docstring=""Sets the step width factor for logarithmic sweeps""
                                     "" to calculate the frequencies of the steps. The""
                                     "" value can be from 0.01% upto 100%."")

        self.add_parameter('lin_step',
                           label='step size for linear RF freq sweep',
                           set_cmd=partial(self._setlinstep),
                           get_cmd=f'SOUR{self.hwchan}:LFO:SWE:STEP?',
                           get_parser=float,
                           vals=vals.Numbers(0.01),
                           unit='Hz',
                           docstring=""""""
                           Set the step size for linear sweep.
                           The maximum is the sweep_span of the output channel
                           and will be read during the set lin_step command.
                           """""")

    def _setlinstep(self, val):
        """"""
        Helper function to check the maximum allowed value for the step
        """"""
        maxfreq = float(self.ask(f'SOUR{self.hwchan}:FREQ:SPAN?'))
        if val > maxfreq:
            raise ValueError(f'{repr(val)} is invalid: must be between 0.01 and {maxfreq} '
                             f'inclusive.')
        self.write(f'SOUR{self.hwchan}:LFO:SWE:STEP {val}')


class LFOutputChannel(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int, lfchan: int):
        """"""Combines all the parameters concerning one LF output. The LF output is used
        as modulation signal for the analog modulation.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication
            lfchan: the internal number of the LF output channel used

        Attributes:
            bandwidth: (ReadOnly) Requests the current bandwidth.
    
            state: (hwchan=1) The state of the output. Values are 'ON' or 'OFF'.
            offset: (hwchan=1) DC offset voltage in the range from -3.6V to +3.6V.
            source: (hwchan=1) Determines the LF signal to be synchronized if monitoring is enabled.
    
                - 'LF1', 'LF2', 'LF1A', 'LF2A', 'LF1B', 'LF2B': Selects an internally generated
                  LF signal.
                - 'NOISE', 'NOISA', 'NOISB': Selects an internally generated noise signal.
                - 'EXT1', 'EXT2': Selects an externally supplied LF signal.
                - 'AM', 'AMA', 'AMB': Selects the AM signal.
                - 'FMPM', 'FMPMA', 'FMPMB': Selects the signal also used by the frequency or phase
                  modulations.
    
            source_path: (hwchan=1) Path of the LF output source. Values are 'A' or 'B'.
            voltage: (hwchan=1) Output voltage of the LF output. The valid range will be dynamic
            as shown in the datasheet.
    
            period: (lfchan=1, ReadOnly). Queries the repetition frequency of the sine signal.
            frequency: (lfchan=1) The Frequency of the LF signal when the mode() is 'FIX'. Valid range is from 0.1Hz and ends
            depending on the installed options.
            freq_manual: (lfchan=1) Manual frequency set only valid in the range given by the parameters freq_min and freq_max.
            freq_min: (lfchan=1) Set minimum for manual frequency from 0.1Hz to 1MHz.
            freq_max: (lfchan=1) Set maximum for manual frequency from 0.1Hz to 1MHz.
            mode: (lfchan=1) Set the used mode:
    
                - 'FIX': fixed frequency mode (CW is a synonym)
                - 'SWE': set sweep mode (use LFOutputSweep class)
    
            shape: (SMW-K24) Define the shape of the signal.
            Valid values: 'SINE','SQUARE','TRIANGLE','TRAPEZE'.
            shape_duty_cycle: (SMW-K24) Duty cycle for shape pulse (range 1e-6 to 100)
            shape_period: (SMW-K24) Period for shape pulse (range 1e-6 to 100)
            shape_width: (SMW-K24) Width for shape pulse (range 1e-6 to 100)
            trapez_fall: (SMW-K24) Fall time for the trapezoid shape (range 1e-6 to 100)
            trapez_height: (SMW-K24) High time for the trapezoid signal (range 1e-6 to 100)
            trapez_period: (SMW-K24) Period of the generated trapezoid shape (range 1e-6 to 100)
            trapez_rise: (SMW-K24) Rise time for the trapezoid shape (range 1e-6 to 100)
            triangle_period: (SMW-K24) Period of the generated pulse (range 1e-6 to 100)
            triangle_rise: (SMW-K24) Rise time for the triangle shape (range 1e-6 to 100)
        """"""
        self.hwchan = hwchan
        self.lfchan = lfchan

        super().__init__(parent, name)

        # aks the limits for ""freq_manual""
        self.freqmin = float(self.ask(f'SOUR{self.hwchan}:LFO:FREQ:STAR?'))
        self.freqmax = float(self.ask(f'SOUR{self.hwchan}:LFO:FREQ:STOP?'))

        self.add_parameter('bandwidth',
                           label='Bandwidth',
                           set_cmd=False,
                           get_cmd=f'SOUR:LFO{self.lfchan}:BAND?',
                           docstring=""(ReadOnly) Requests the current bandwidth."")

        if 'SMW-K24' in self._parent.options:
            shape_ids = vals.Enum('SINE', 'SQUARE', 'TRIANGLE', 'TRAPEZE')
            self.add_parameter('shape',
                               label='Shape',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}' + ':SHAP {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP?',
                               vals=shape_ids)

            self.add_parameter('shape_duty_cycle',
                               label='Duty cycle for shape pulse',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:PULS' + ':DCYC {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:PULS:DCYC?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100),
                               unit='%')

            self.add_parameter('shape_period',
                               label='Period for shape pulse',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:PULS' + ':PER {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:PULS:PER?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('shape_width',
                               label='Width for shape pulse',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:PULS' + ':WIDT {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:PULS:WIDT?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('trapez_fall',
                               label='Fall time for the trapezoid shape',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP' + ':FALL {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP:FALL?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('trapez_height',
                               label='High time for the trapezoid signal',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP' + ':HIGH {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP:HIGH?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('trapez_period',
                               label='Period of the generated trapezoid shape',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP' + ':PER {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP:PER?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('trapez_rise',
                               label='Rise time for the trapezoid shape',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP' + ':RISE {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRAP:RISE?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('triangle_period',
                               label='period of the generated pulse',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRI' + ':PER {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRI:PER?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))

            self.add_parameter('triangle_rise',
                               label='Rise time for the triangle shape',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRI' + ':RISE {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:SHAP:TRI:RISE?',
                               get_parser=float,
                               vals=vals.Numbers(1e-6, 100))


        if self.hwchan == 1:
            # The following parameters are only available for the SOURCE1

            self.add_parameter('state',
                               label='State',
                               set_cmd=f'SOUR:LFO{self.lfchan}' + ':STAT {}',
                               get_cmd=f'SOUR:LFO{self.lfchan}:STAT?',
                               val_mapping={'ON': 1, 'OFF': 0},
                               vals=vals.Enum('ON', 'OFF'),
                               docstring=""The state of the output. Values are 'ON' or 'OFF'."")

            self.add_parameter('offset',
                               label='DC offset voltage',
                               set_cmd=f'SOUR:LFO{self.lfchan}' + ':OFFS {}',
                               get_cmd=f'SOUR:LFO{self.lfchan}:OFFS?',
                               get_parser=float,
                               vals=vals.Numbers(-3.6, +3.6),
                               unit='V',
                               docstring=""DC offset voltage in the range from -3.6V to +3.6V."")

            source_val = vals.Enum('LF1', 'LF2', 'NOISE', 'AM', 'FMPM', 'EXT1',
                                   'EXT2', 'LF1B', 'LF2B', 'AMB', 'NOISB', 'FMPMB',
                                   'LF1A', 'LF2A', 'NOISA', 'FMPMA', 'AMA')
            self.add_parameter('source',
                               label='Source',
                               set_cmd=f'SOUR:LFO{self.lfchan}' + ':SOUR {}',
                               get_cmd=f'SOUR:LFO{self.lfchan}:SOUR?',
                               vals=source_val,
                               docstring=""""""
                               Determines the LF signal to be synchronized, when monitoring is
                               enabled. Values are:
                               'LF1', 'LF2', 'LF1A', 'LF2A', 'LF1B', 'LF2B'
                               --> Selects an internally generated LF signal.
                               'NOISE', 'NOISA', 'NOISB'
                               --> Selects an internally generated noise signal.
                               'EXT1', 'EXT2'
                               --> Selects an externally supplied LF signal.
                               'AM', 'AMA', 'AMB'
                               --> Selects the AM signal.
                               'FMPM', 'FMPMA', 'FMPMB'
                               --> Selects the signal also used by the frequency or phase modulations.
                               """""")

            if 'SMW-XXX' in self._parent.options: #TODO: welche Option wird hierfür benötigt?
                self.add_parameter('source_path',
                                   label='Path of the LF output source',
                                   set_cmd=f'SOUR:LFO{self.lfchan}:SOUR' + ':PATH {}',
                                   get_cmd=f'SOUR:LFO{self.lfchan}:SOUR:PATH?',
                                   vals=vals.Enum('A', 'B'))

            self.add_parameter('voltage',
                               label='Output voltage of the LF output',
                               set_cmd=f'SOUR:LFO{self.lfchan}' + ':VOLT {}',
                               get_cmd=f'SOUR:LFO{self.lfchan}:VOLT?',
                               get_parser=float,
                               unit='V',
                               docstring=""Output voltage of the LF output. The valid""
                                         "" range will be dynamic as shown in the datasheet."")

        if self.lfchan == 1:
            # With other channel numbers the device said: no hardware

            self.add_parameter('period',
                               label='Period',
                               set_cmd=False,
                               get_cmd=f'SOUR:LFO{self.lfchan}:PER?',
                               get_parser=float,
                               unit='s',
                               docstring=""(ReadOnly) Queries the repetition frequency of the""
                                         "" sine signal."")

            if 'SMW-K24' in self._parent.options:
                maxfreq = 20e9 # TODO: this value will not fit, but I could not find a better one
            else:
                maxfreq = 1e9 # Information of the device
            self.add_parameter('frequency',
                               label='Frequency',
                               set_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}' + ':FREQ {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO{self.lfchan}:FREQ?',
                               get_parser=float,
                               vals=vals.Numbers(0.1, maxfreq),
                               unit='Hz',
                               docstring=""The Frequency of the LF signal when the mode() is `FIX'.""
                                         "" Valid range is from 0.1Hz and ends depending on the""
                                         "" installed options."")
            # The frequency parameter is only readable for lfchan==1 even if the channel
            # number is given in the communication string.

            self.add_parameter('freq_manual',
                               label='Manual frequency set',
                               set_cmd=partial(self._setfreqvalue),
                               get_cmd=f'SOUR{self.hwchan}:LFO:FREQ:MAN?',
                               get_parser=float,
                               unit='Hz',
                               docstring=""Manual frequency set only valid in the range given""
                                         "" by the parameters freq_min and freq_max."")
            self.add_parameter('freq_min',
                               label='Set minimum for manual frequency',
                               set_cmd=partial(self._setfreqmin),
                               get_cmd=f'SOUR{self.hwchan}:LFO:FREQ:STAR?',
                               get_parser=float,
                               vals=vals.Numbers(0.1, 1e6),
                               unit='Hz',
                               docstring=""Set minimum for manual frequency from 0.1Hz to 1MHz."")
            self.add_parameter('freq_max',
                               label='Set maximum for manual frequency',
                               set_cmd=partial(self._setfreqmax),
                               get_cmd=f'SOUR{self.hwchan}:LFO:FREQ:STOP?',
                               get_parser=float,
                               vals=vals.Numbers(0.1, 1e6),
                               unit='Hz',
                               docstring=""Set maximum for manual frequency from 0.1Hz to 1MHz."")

            lfmode = vals.Enum('CW', 'FIX', 'SWE')
            self.add_parameter('mode',
                               label='Mode',
                               set_cmd=f'SOUR{self.hwchan}:LFO:FREQ:' + 'MODE {}',
                               get_cmd=f'SOUR{self.hwchan}:LFO:FREQ:MODE?',
                               vals=lfmode,
                               docstring=""""""
                               Set the used mode:
                               'FIX' = fixed frequency mode ('CW' is a synonym)
                               'SWE' = set sweep mode (use LFOutputSweep class)
                               """""")

    def _setfreqmin(self, val):
        """"""
        Helper function to set the minimum frequency and store it in a local variable
        """"""
        self.freqmin = val
        self.write(f'SOUR{self.hwchan}:LFO:FREQ:STAR {val}')

    def _setfreqmax(self, val):
        """"""
        Helper function to set the maximum frequency and store it in a local variable
        """"""
        self.freqmax = val
        self.write(f'SOUR{self.hwchan}:LFO:FREQ:STOP {val}')

    def _setfreqvalue(self, val):
        """"""
        Helper function to set the manual frequency and checks it against the
        local variables before
        """"""
        if val < self.freqmin or self.freqmax < val:
            raise ValueError(f'{repr(val)} is invalid: must be between {self.freqmin} and '
                             f'{self.freqmax}.')
        self.write(f'SOUR{self.hwchan}:LFO:FREQ:MAN {val}')


class OutputLevelSweep(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""Combines all the parameters concerning one RF output level (power) sweeping.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication

        Attributes:
            attenuator: Power attenuator mode for level sweep. Values are:
                'NORM': Performs the level settings in the range of the built-in attenuator.
                'HPOW': Performs the level settings in the high level range.
            dwell: Dwell time for level sweep, valid range is from 0.001s to 100s.
            mode: Cycle mode for level sweep. Values are:
                'AUTO': Each trigger triggers exactly one complete sweep.
                'MAN':  You can trigger every step individually with a command.
                'STEP': Each trigger triggers one sweep step only.
            points: Steps within level sweep range, minimum is 2.
            log_step: Logarithmically determined step size for the RF level sweep,
                valid range is 0.01dB to 139dB.
            shape: Waveform shape for sweep. Valid are 'SAWTOOTH' and 'TRIANGLE'.
            execute: Executes one RF level sweep. Use no braces () here!
            retrace: Activates that the signal changes to the start frequency value while it is
                waiting for the next trigger event. Values are 'ON' and 'OFF'. You can enable this
                feature, when you are working with sawtooth shapes in sweep mode 'MAN' or 'STEP'.
            running: (ReadOnly) Get the current sweep state. Return values are 'ON' or 'OFF'.
            reset: Resets all active sweeps to the starting point. Use no braces () here!
        """"""
        self.hwchan = hwchan
        super().__init__(parent, name)

        self.add_parameter('attenuator',
                           label='Power attenuator mode for level sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'AMOD {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:AMOD?',
                           vals=vals.Enum('NORM', 'HPOW'),
                           docstring=""""""
                           Power attenuator mode for level sweep. Values are:
                           'NORM' = Performs the level settings in the range of the built-in
                                    attenuator.
                           'HPOW' = Performs the level settings in the high level range.
                           """""")

        self.add_parameter('dwell',
                           label='Dwell time for level sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'DWEL {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:DWEL?',
                           get_parser=float,
                           vals=vals.Numbers(0.001, 100),
                           unit='s',
                           docstring=""Dwell time for level sweep, valid range is from 0.001s""
                                     "" to 100s."")

        sweepmode = vals.Enum('AUTO', 'MAN', 'STEP')
        self.add_parameter('mode',
                           label='Cycle mode for level sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'MODE {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:MODE?',
                           vals=sweepmode,
                           docstring=""""""
                           Cycle mode for level sweep. Values are:
                           'AUTO' = Each trigger triggers exactly one complete sweep.
                           'MAN'  = You can trigger every step individually with a command.
                           'STEP' = Each trigger triggers one sweep step only.
                           """""")

        self.add_parameter('points',
                           label='Steps within level sweep range',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'POIN {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:POIN?',
                           get_parser=int,
                           vals=vals.Numbers(2),  # Upperlimit=MAXINT
                           docstring=""Steps within level sweep range, minimum is 2."")

        self.add_parameter('log_step',
                           label='logarithmically determined step size for the RF level sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'STEP {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:STEP?',
                           get_parser=float,
                           vals=vals.Numbers(0.01, 139),
                           unit='dB',
                           docstring=""Logarithmically determined step size for the RF level""
                                     "" sweep, valid range is 0.01dB to 139dB."")

        self.add_parameter('shape',
                           label='Waveform shape for sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'SHAP {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:SHAP?',
                           vals=vals.Enum('SAWTOOTH', 'TRIANGLE'),
                           docstring=""Waveform shape for sweep. Valid are 'SAWTOOTH' and""
                                     "" 'TRIANGLE'."")

        self.add_function('execute',
                           call_cmd=f'SOUR{self.hwchan}:SWE:POW:EXEC',
                           docstring=""Executes one RF level sweep. Use no braces () here!"")

        self.add_parameter('retrace',
                           label='Set to start frequency while waiting for trigger  ',
                           set_cmd=f'SOUR{self.hwchan}:SWE:POW:' + 'RETR {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:RETR?',
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates that the signal changes to the start frequency""
                                     "" value while it is waiting for the next trigger event.""
                                     "" Values are 'ON' and 'OFF'. You can enable this feature,""
                                     "" when you are working with sawtooth shapes in sweep mode""
                                     "" 'MAN' or 'STEP'."")

        self.add_parameter('running',
                           label='Current sweep state',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.hwchan}:SWE:POW:RUNN?',
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""(ReadOnly) Get the current sweep state. Return""
                                     "" values are 'ON' or 'OFF'."")

        self.add_function('reset',
                           call_cmd=f'SOUR{self.hwchan}:SWE:RES',
                           docstring=""Resets all active sweeps to the starting point.""
                                     "" Use no braces () here!"")


class OutputFrequencySweep(InstrumentChannel):

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, hwchan: int):
        """"""Combines all the parameters concerning one RF output frequency sweeping.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            hwchan: the internal number of the hardware channel used in the communication

        Attributes:
            dwell: Dwell time for frequency sweep. Valid range from 0.001s to 100s.
            mode: Cycle mode for frequency sweep. Values are:
                'AUTO': Each trigger triggers exactly one complete sweep.
                'MAN':  You can trigger every step individually with a command.
                'STEP': Each trigger triggers one sweep step only.
            points: Steps within frequency sweep range, minimum is 2.
            spacing: Calculationmode of frequency intervals. Values are 'LIN' or 'LOG'.
            shape: Waveform shape for sweep. Valid values are 'SAWTOOTH' or 'TRIANGLE'.
            execute: Executes one RF frequency sweep. Use no braces () here!
            retrace: Activates that the signal changes to the start frequency value while it is
                waiting for the next trigger event. Values are 'ON' and 'OFF'. You can enable this
                feature, when you are working with sawtooth shapes in sweep mode 'MAN' or 'STEP'.
            running: (ReadOnly) Get the current sweep state. Return values are 'ON' or 'OFF'.
            log_step: Logarithmically determined step size for the RF frequency sweep.
                Valid range is 0.01 to 100.
            lin_step: Step size for linear RF frequency sweep. The minimum is 0.01
                and the maximum is the sweep_span of the output channel and will
                be read during the set lin_step command.
            reset: Resets all active sweeps to the starting point. Use no braces () here!
        """"""
        self.hwchan = hwchan

        super().__init__(parent, name)

        self.add_parameter('dwell',
                           label='Dwell time for frequency sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:' + 'DWEL {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:DWEL?',
                           get_parser=float,
                           vals=vals.Numbers(0.001, 100),
                           unit='s',
                           docstring=""Dwell time for frequency sweep. Valid range from 0.001s""
                                     "" to 100s."")

        sweepmode = vals.Enum('AUTO', 'MAN', 'STEP')
        self.add_parameter('mode',
                           label='Cycle mode for frequency sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:' + 'MODE {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:MODE?',
                           vals=sweepmode,
                           docstring=""""""
                           Cycle mode for frequency sweep. Values are:
                           'AUTO' = Each trigger triggers exactly one complete sweep.
                           'MAN'  = You can trigger every step individually with a command.
                           'STEP' = Each trigger triggers one sweep step only.
                           """""")

        self.add_parameter('points',
                           label='Steps within frequency sweep range',
                           set_cmd=f'SOUR{self.hwchan}:SWE:' + 'POIN {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:POIN?',
                           get_parser=int,
                           vals=vals.Numbers(2),  # Upperlimit=MAXINT
                           docstring=""Steps within frequency sweep range, minimum is 2."")

        self.add_parameter('spacing',
                           label='calculationmode of frequency intervals',
                           set_cmd=f'SOUR{self.hwchan}:SWE:' + 'SPAC {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:SPAC?',
                           vals=vals.Enum('LIN', 'LOG'),
                           docstring=""Calculationmode of frequency intervals. Values are 'LIN'""
                                     "" or 'LOG'."")

        self.add_parameter('shape',
                           label='Waveform shape for sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:' + 'SHAP {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:SHAP?',
                           vals=vals.Enum('SAWTOOTH', 'TRIANGLE'),
                           docstring=""Waveform shape for sweep. Valid values are 'SAWTOOTH' or""
                                     "" 'TRIANGLE'."")

        self.add_function('execute',
                           call_cmd=f'SOUR{self.hwchan}:SWE:EXEC',
                           docstring=""Executes one RF frequency sweep. Use no braces () here!"")

        self.add_parameter('retrace',
                           label='Set to start frequency while waiting for trigger  ',
                           set_cmd=f'SOUR{self.hwchan}:SWE:' + 'RETR {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:RETR?',
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Activates that the signal changes to the start frequency""
                                     "" value while it is waiting for the next trigger event.""
                                     "" when you are working Values are 'ON' and 'OFF'. You can""
                                     "" enable this feature, with sawtooth shapes in sweep mode""
                                     "" 'MAN' or 'STEP'."")

        self.add_parameter('running',
                           label='Current sweep state',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.hwchan}:SWE:RUNN?',
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""(ReadOnly) Get the current sweep state. Return""
                                     "" values are 'ON' or 'OFF'."")

        self.add_parameter('log_step',
                           label='logarithmically determined step size for the RF freq sweep',
                           set_cmd=f'SOUR{self.hwchan}:SWE:STEP:' + 'LOG {}',
                           get_cmd=f'SOUR{self.hwchan}:SWE:STEP:LOG?',
                           get_parser=float,
                           vals=vals.Numbers(0.01, 100),
                           unit='%',
                           docstring=""Logarithmically determined step size for the RF""
                                     "" frequency sweep. Valid range is 0.01 to 100."")

        self.add_parameter('lin_step',
                           label='step size for linear RF freq sweep',
                           set_cmd=partial(self._setlinstep),
                           get_cmd=f'SOUR{self.hwchan}:SWE:STEP?',
                           get_parser=float,
                           vals=vals.Numbers(0.01),
                           unit='Hz',
                           docstring=""Step size for linear RF frequency sweep. The""
                                     "" minimum is 0.01 and the maximum is the sweep_span""
                                     "" of the output channel and will be read during the""
                                     "" set lin_step command."")

        self.add_function('reset',
                           call_cmd=f'SOUR{self.hwchan}:SWE:RES',
                           docstring=""Resets all active sweeps to the starting point.""
                                     "" Use no braces () here!"")

    def _setlinstep(self, val):
        """"""
        Helper function to check the maximum allowed value for the step
        """"""
        maxfreq = float(self.ask(f'SOUR{self.hwchan}:FREQ:SPAN?'))
        if val > maxfreq:
            raise ValueError(f'{repr(val)} is invalid: must be between 0.01 and {maxfreq} '
                             f'inclusive.')
        self.write(f'SOUR{self.hwchan}:SWE:STEP {val}')


class OutputChannel(InstrumentChannel):
    _MAXFREQ_POOL = {
        1: {
            'SMW-B120': 20e9,
            'SMW-B103': 3e9,
            'SMW-B106': 6e9,
            'SMW-B112': 12.75e9,
            'SMW-B131': 31.8e9,
            'SMW-B140': 40e9
        },
        2: {
            'SMW-B203': 3e9,
            'SMW-B206': 6e9,
            'SMW-B207': 7.5e9,
            'SMW-B212': 12.75e9,
            'SMW-220': 20e9
        }
    }

    def __init__(self, parent: 'RohdeSchwarz_SMW200A', name: str, chnum: int):
        """"""Combines all the parameters concerning one RF output.

        Args:
            parent: the parent instrument of this channel
            name  : the internal QCoDeS name of this channel
            chnum : the internal number of the channel used in the communication

        Attributes:
            state: actives/deactivates the RF output. Values are 'ON' and 'OFF'.
            frequency: set/read the main frequency of the oscillator.
            level: set/read the output power level.
            mode: selects the mode of the oscillator. Valid values are:
                'FIX': fixed frequency mode (CW is a synonym)
                'SWE': set sweep mode (use sweep_start/sweep_stop/sweep_center/sweep_span)
                'LIST': use a special loadable list of frequencies - the list functions
                are not yet implemented here.
            sweep_center: set/read the center frequency of the sweep.
            sweep_span: set/read the span of frequency sweep range.
            sweep_start: set/read the start frequency of the sweep.
            sweep_stop: set/read the stop frequency of the sweep.
            losc_input: read the LOscillator input frequency (ReadOnly).
            losc_mode: set/read the LOscillator mode. Valid values are:

                - 'INT': A&B Internal / Internal (one path instrument). Uses the internal oscillator
                  signal in both paths.
                - 'EXT': A External & B Internal (one path instrument). Uses an external signal in
                  path A. B uses its internal signal.
                - 'COUP': A Internal & A->B Coupled. Assigns the internal oscillator signal of path A
                  also to path B.
                - 'ECO': A External & A->B Coupled. Assigns an externally supplied signal to both
                  paths.
                - 'BOFF': A Internal & B RF Off. Uses the internal local oscillator signal of path A,
                  if the selected frequency exceeds the maximum frequency of path B.
                - 'EBOF': A External & B RF Off. Uses the LO IN signal for path A, if the selected
                  RF frequency exceeds the maximum frequency of path B.
                - 'AOFF': A RF Off & B External. Uses the LO IN signal for path B, if the selected
                  RF frequency exceeds the maximum frequency of path A.

            losc_output: read the LOscillator output frequency (ReadOnly).
            losc_state: set/read the LOscillator state. Valid values are 'ON' and 'OFF'.
        """"""

        self.chnum = chnum
        super().__init__(parent, name)
        if self.chnum in self._MAXFREQ_POOL:
            for opt, freq in self._MAXFREQ_POOL[self.chnum].items():
                if opt in self._parent.options:
                    maxfreq = freq
                    break
            else:
                raise RuntimeError(f""Missing frequency option for RF path {self.chnum}"")

        self.add_parameter('frequency',
                           label='Frequency',
                           set_cmd=f'SOUR{self.chnum}' + ':FREQ {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ?',
                           get_parser=float,
                           vals=vals.Numbers(100e3, maxfreq),
                           unit='Hz',
                           docstring=""The main frequency of the oscillator.""
                                     "" The minimum is 100kHz and the maximum""
                                     "" depends on the installed option."")

        # TODO: are these parameter meaningfull?
        # 'offset' This value represents the frequency shift of a downstream
        #          instrument, like for example a mixer.
        # 'multiplier': This value represents the multiplication factor of a
        #          downstream instrument, like for example a multiplier.

        self.add_parameter('level',
                           label='Level',
                           set_cmd=f'SOUR{self.chnum}:' + 'POW:POW {}',
                           get_cmd=f'SOUR{self.chnum}:POW:POW?',
                           get_parser=float,
                           vals=vals.Numbers(-145, 30),
                           unit='dBm',
                           docstring=""The output power level. Valid values are""
                                     "" from -145dBm up to 30dBm."")

        self.add_parameter('state',
                           label='State',
                           set_cmd=f'OUTP{self.chnum}:' + 'STAT {}',
                           get_cmd=f'OUTP{self.chnum}:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""actives/deactivates the RF output. Values are 'ON' and 'OFF'"")

        rfmode = vals.Enum('CW', 'FIX', 'SWE', 'LIST')
        self.add_parameter('mode',
                           label='Mode',
                           set_cmd=f'SOUR{self.chnum}:FREQ:' + 'MODE {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:MODE?',
                           vals=rfmode,
                           docstring=""""""
                           Selects the mode of the oscillator. Valid values are:
                           'FIX'  = fixed frequency mode (CW is a synonym)
                           'SWE'  = set sweep mode (use start/stop/center/span)
                           'LIST' = use a special loadable list of frequencies (nyi here)
                           """""")

        # Parameter for the sweep mode
        self.add_parameter('sweep_center',
                           label='Center frequency of the sweep',
                           set_cmd=f'SOUR{self.chnum}:FREQ:' + 'CENT {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:CENT?',
                           get_parser=float,
                           vals=vals.Numbers(300e3, maxfreq),
                           unit='Hz',
                           docstring=""""""
                           The center frequency of the sweep.
                           Use sweep_center and sweep_span or
                           use sweep_start and sweep_stop
                           to define the sweep range.
                           """""")

        self.add_parameter('sweep_span',
                           label='Span of frequency sweep range',
                           set_cmd=f'SOUR{self.chnum}:FREQ:' + 'SPAN {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:SPAN?',
                           get_parser=float,
                           vals=vals.Numbers(0, maxfreq),
                           unit='Hz',
                           docstring=""""""
                           The span of frequency sweep range.
                           Use sweep_center and sweep_span or
                           use sweep_start and sweep_stop
                           to define the sweep range.
                           """""")

        self.add_parameter('sweep_start',
                           label='Start frequency of the sweep',
                           set_cmd=f'SOUR{self.chnum}:FREQ:' + 'STAR {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:STAR?',
                           get_parser=float,
                           vals=vals.Numbers(300e3, maxfreq),
                           unit='Hz',
                           docstring=""""""
                           The start frequency of the sweep.
                           Use sweep_start and sweep_stop or
                           use sweep_center and sweep_span
                           to define the sweep range.
                           """""")

        self.add_parameter('sweep_stop',
                           label='Stop frequency of the sweep',
                           set_cmd=f'SOUR{self.chnum}:FREQ:' + 'STOP {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:STOP?',
                           get_parser=float,
                           vals=vals.Numbers(300e3, maxfreq),
                           unit='Hz',
                           docstring=""""""
                           The stop frequency of the sweep.
                           Use sweep_start and sweep_stop or
                           use sweep_center and sweep_span
                           to define the sweep range.
                           """""")

        # Parameter for the LOSCILLATOR
        self.add_parameter('losc_input',
                           label='LOscillator input frequency',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.chnum}:FREQ:LOSC:INP:FREQ?',
                           get_parser=float,
                           unit='Hz',
                           docstring=""(ReadOnly) Read the LOscillator input frequency."")

        lomode = vals.Enum('INT', 'EXT', 'COUP', 'ECO', 'BOFF', 'EBOF', 'AOFF')
        self.add_parameter('losc_mode',
                           label='LOscillator mode',
                           set_cmd=f'SOUR{self.chnum}:FREQ:LOSC:' + 'MODE {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:LOSC:MODE?',
                           vals=lomode,
                           docstring=""""""
                           The LOscillator mode. Valid options:
                               'INT':  A&B Internal / Internal (one path instrument) - Uses the
                                       internal oscillator signal in both paths.
                               'EXT':  A External & B Internal (one path instrument) - Uses an
                                       external signal in path A. B uses its internal signal.
                               'COUP': A Internal & A->B Coupled - Assigns the internal oscillator
                                       signal of path A also to path B.
                               'ECO':  A External & A->B Coupled - Assigns an externally supplied
                                       signal to both paths.
                               'BOFF': A Internal & B RF Off - Uses the internal local oscillator
                                       signal of path A, if the selected frequency exceeds the
                                       maximum frequency of path B.
                               'EBOF': A External & B RF Off - Uses the LO IN signal for path A, if
                                       the selected RF frequency exceeds the maximum frequency of
                                       path B.
                               'AOFF': A RF Off & B External - Uses the LO IN signal for path B, if
                                       the selected RF frequency exceeds the maximum frequency of
                                       path A.
                           """""")

        self.add_parameter('losc_output',
                           label='LOscillator output frequency',
                           set_cmd=False,
                           get_cmd=f'SOUR{self.chnum}:FREQ:LOSC:OUTP:FREQ?',
                           get_parser=float,
                           unit='Hz',
                           docstring=""(ReadOnly) Read the LOscillator output frequency."")

        self.add_parameter('losc_state',
                           label='LOscillator state',
                           set_cmd=f'SOUR{self.chnum}:FREQ:LOSC:OUTP:' + 'STAT {}',
                           get_cmd=f'SOUR{self.chnum}:FREQ:LOSC:OUTP:STAT?',
                           val_mapping={'ON': 1, 'OFF': 0},
                           vals=vals.Enum('ON', 'OFF'),
                           docstring=""Set the LOscillator state. Valid values are 'ON' and 'OFF'."")



class RohdeSchwarz_SMW200A(VisaInstrument):
#class RohdeSchwarz_SMW200A(MockVisa):
    """"""This is the qcodes driver for the Rohde & Schwarz SMW200A vector signal
    generator.
    
    Do not forget to change the class for real / simulation mode.

    Status:
        coding: almost finished
        communication tests: done
        usage in experiment: outstanding
    """"""

    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, **kwargs)

        # for security check the ID from the device
        self.idn = self.ask(""*IDN?"").strip()
        if not self.idn.startswith(""Rohde&Schwarz,SMW200A,""):
            raise RuntimeError(""Invalid device ID found: ""+self.idn)

        log.debug(__name__ + ' : Initializing instrument ' + self.idn)

        # save the option flags as a string array for later usage
        self.options = self.ask(""*OPT?"").strip().split("","")
        self.add_parameter('options',
                           label='Options',
                           set_cmd=False,
                           get_cmd=self.get_options,
                           docstring=""(ReadOnly) List of installed options."")

        # RF output submodules
        rfchannels = ChannelList(self, ""OutputChannels"", OutputChannel,
                                 snapshotable=False)
        if 'SMW-B203' in self.options or 'SMW-B206' in self.options \
                or 'SMW-B207' in self.options or 'SMW-B212' in self.options \
                or 'SMW-B220' in self.options:
            self.rfoutput_no = 2
        else:
            self.rfoutput_no = 1
        for chnum in range(1, self.rfoutput_no+1):
            name = f'rfoutput{chnum}'
            rfchannel = OutputChannel(self, name, chnum)
            rfchannels.append(rfchannel)
            self.add_submodule(name, rfchannel)
        rfchannels.lock()
        self.add_submodule('output_channels', rfchannels)

        # RF output sweep submodules (for Level and Frequency)
        rflevelsweeps = ChannelList(self, ""OutputLevelSweep"", OutputLevelSweep,
                                    snapshotable=False)
        for rfnum in range(1, self.rfoutput_no+1):
            name = f'level_sweep{rfnum}'
            rfsweep = OutputLevelSweep(self, name, rfnum)
            rflevelsweeps.append(rfsweep)
            self.add_submodule(name, rfsweep)
        rflevelsweeps.lock()
        self.add_submodule('rflevelsweep_channels', rflevelsweeps)

        rffreqsweeps = ChannelList(self, ""OutputFrequencySweep"", OutputFrequencySweep,
                                   snapshotable=False)
        for rfnum in range(1, self.rfoutput_no+1):
            name = f'freq_sweep{rfnum}'
            rfsweep = OutputFrequencySweep(self, name, rfnum)
            rffreqsweeps.append(rfsweep)
            self.add_submodule(name, rfsweep)
        rffreqsweeps.lock()
        self.add_submodule('rffreqsweep_channels', rffreqsweeps)

        # LF output submodules
        lfchannels = ChannelList(self, ""LFOutputChannels"", LFOutputChannel,
                                 snapshotable=False)
        self.lfoutput_no = 2 # TODO: wie fragen wir das ab?
        for rfnum in range(1, self.rfoutput_no+1):
            for lfnum in range(1, self.lfoutput_no+1):
                name = f'lf{rfnum}output{lfnum}'
                lfchannel = LFOutputChannel(self, name, rfnum, lfnum)
                lfchannels.append(lfchannel)
                self.add_submodule(name, lfchannel)
        lfchannels.lock()
        self.add_submodule('lfoutput_channels', lfchannels)

        # LF output sweep submodules
        lfsweeps = ChannelList(self, ""LFOutputSweep"", LFOutputSweep,
                               snapshotable=False)
        for rfnum in range(1, self.rfoutput_no+1):
            name = f'lf{rfnum}sweep'
            lfsweep = LFOutputSweep(self, name, rfnum)
            lfsweeps.append(lfsweep)
            self.add_submodule(name, lfsweep)
        lfsweeps.lock()
        self.add_submodule('lfsweep_channels', lfsweeps)

        #Amplitude Modulation submodules
        amchannels = ChannelList(self, ""AMChannels"", AmplitudeModulation,
                                 snapshotable=False)
        self.am_no = 2
        for rfnum in range(1, self.rfoutput_no+1):
            for chnum in range(1, self.am_no+1):
                name = f'am{rfnum}_{chnum}'
                amchannel = AmplitudeModulation(self, name, rfnum, chnum)
                amchannels.append(amchannel)
                self.add_submodule(name, amchannel)
        amchannels.lock()
        self.add_submodule('am_channels', amchannels)

        if 'SMW-B22' or 'SMW-B20' in self.options:
            #Frequency Modulation submodules
            fmchannels = ChannelList(self, ""FMChannels"", FrequencyModulation,
                                     snapshotable=False)
            self.fm_no = 2
            for rfnum in range(1, self.rfoutput_no+1):
                for chnum in range(1, self.fm_no+1):
                    name = f'fm{rfnum}_{chnum}'
                    fmchannel = FrequencyModulation(self, name, rfnum, chnum)
                    fmchannels.append(fmchannel)
                    self.add_submodule(name, fmchannel)
            fmchannels.lock()
            self.add_submodule('fm_channels', fmchannels)

            #Phase Modulation submodules
            pmchannels = ChannelList(self, ""PMChannels"", PhaseModulation,
                                     snapshotable=False)
            self.pm_no = 2
            for rfnum in range(1, self.rfoutput_no+1):
                for chnum in range(1, self.pm_no+1):
                    name = f'pm{rfnum}_{chnum}'
                    pmchannel = PhaseModulation(self, name, rfnum, chnum)
                    pmchannels.append(pmchannel)
                    self.add_submodule(name, pmchannel)
            pmchannels.lock()
            self.add_submodule('pm_channels', pmchannels)

        #Pulse modulation submodule
        if 'SMW-K22' in self.options:
            for rfnum in range(1, self.rfoutput_no+1):
                name = f'pulsemod{rfnum}'
                pulsemchannel = PulseModulation(self, name, rfnum)
                self.add_submodule(name, pulsemchannel)

            if 'SMW-K23' in self.options:
                #Pulse generator
                pgenchannels = ChannelList(self, ""PGenChannels"", PulseGenerator,
                                           snapshotable=False)
                self.pgen_no = 1
                for chnum in range(1, self.pgen_no+1):
                    name = f'pulsegen{chnum}'
                    pgenchannel = PulseGenerator(self, name, chnum)
                    pgenchannels.append(pgenchannel)
                    self.add_submodule(name, pgenchannel)
                pgenchannels.lock()
                self.add_submodule('pgen_channels', pgenchannels)
                self.add_parameter('genTriggerPulse',
                                   label='Trigger Pulse',
                                   set_cmd=self.genTriggerPulse,
                                   get_cmd=False,
                                   docstring=""(WriteOnly) Generates on trigger pulse."")

        #IQ modulation submodule
        for rfnum in range(1, self.rfoutput_no+1):
            name = f'iqmod{rfnum}'
            IQmodchannel = IQModulation(self, name, rfnum)
            self.add_submodule(name, IQmodchannel)

        #analog IQ outputs submodule
        iqchannels = ChannelList(self, ""IQChannels"", IQChannel, snapshotable=False)
        self.iqoutput_no = 2
        for iq_num in range(1, self.iqoutput_no+1):
            name = f'iqoutput{iq_num}'
            iqchannel = IQChannel(self, name, iq_num)
            iqchannels.append(iqchannel)
            self.add_submodule(name, iqchannel)
        iqchannels.lock()
        self.add_submodule('iqoutput_channels', iqchannels)


    def get_id(self):
        """"""
        Get the device identification.

        Args:
            None

        Returns:
            Strings from the IDN command from the startup.
        """"""
        return self.idn


    def get_options(self):
        """"""
        Get the device option flags.

        Args:
            None

        Returns:
            Stringarray with the options installed in the device
        """"""
        return self.options


    def close(self):
        """"""
        Close the connection.

        Args:
            None

        Returns:
            None
        """"""
        log.info(__name__ + ': close connection')
        super().close()


    def reset(self):
        """"""
        Resets the instrument to default values.

        Args:
            None

        Returns:
            None
        """"""
        log.info(__name__ + ': Resetting instrument')
        self.write('*RST')


    def get_error(self):
        """"""
        Reads the errors from the device.

        Args:
            None

        Returns:
            List of strings containing error number and string representation
        """"""
        retval = self.ask('SYST:ERR:ALL?').strip().split(""\n"")
        return retval


    def gen_trigger_pulse(self, val):
        """"""
        Function to generate a trigger pulse. The port for this is always defined
        by the user. And the Options SMW-K22 and SMW-K23 must be installed.

        Args:
            val: the time value in seconds (tested with 0.0001)
        """"""
        if not 'SMW-K22' in self.options or not 'SMW-K23' in self.options:
            raise RuntimeError('Invalid options installed (SMW-K22 and SMW-K23 needed)')
        # get the required submodules
        pgen = self.submodules['pulsegen1']
        pmod = self.submodules['pulsemod1']
        # configure the submodules
        pgen.polarity('NORM')
        pmod.delay(0)
        pmod.mode('SING')
        pmod.trigger_mode('AUTO')
        # calculate the period to the third of the requested width
        if val < 0.1:
            # if the requested width is too short, make it longer
            pmod.period(val + 0.3)
        else:
            pmod.period(val * 3.0)
        pmod.width(val)
        # active the pulse
        pgen.output('ON')
        # wait some time longer than the pulse but shorter than the period
        if val < 0.1:
            time.sleep(val + 0.1)
        else:
            time.sleep(val * 1.4)
        # deactivate the output to prevent the second pulse
        pgen.output('OFF')



    def getall(self, submod=""*""):
        """"""
        Read all parameters and retun them to the caller. This will scan all
        submodules with all parameters, so in this function no changes are
        necessary for new modules or parameters.

        Args:
            submod: (optional) returns only the parameters for this submodule.

        Returns:
            dict with all parameters, the key is the modulename and the parametername
        """"""
        retval = {}
        if submod == ""*"":
            # ID and options only if all modules are returned
            retval.update({""ID"": self.idn})
            retval.update({""Options"": self.options})

        for m in self.submodules:
            mod = self.submodules[m]
            if not isinstance(mod, ChannelList) and submod in (""*"", m):
                for p in mod.parameters:
                    par = mod.parameters[p]
                    try:
                        if par.unit.isEmpty():
                            val = str(par()).strip()
                        else:
                            val = str(par()).strip() + "" "" + par.unit
                    except:
                        val = ""** not readable **""
                    retval.update({m + ""."" + p: val})

        return retval
"
102,41.3,"CJ Delft, Netherlands",The M2j module is a low noise amplifier initially designed for use in reflectometry. It has been optimised for use with the F1d IQ Demodulator with a 40 MHz to 1.5 GHz frequency range. This is reflected in the gain flatness of M2j: within 3dB from 40 MHz to 1.4 GHz.,M2J,440.0,"At QuTech, we work on a radically new technology with world-changing potential. Our mission: to develop scalable prototypes of a quantum computer and an inherently safe quantum internet, based on the fundamental laws of quantum mechanics.
",Qcodes Community,Qutech,"[OrderedDict([('id', 'atttaTZUsXgNNgwbC'), ('width', 1504), ('height', 747), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RKC6g3qCsb7JlOEKd8pGhg/gUoncvmvaSr7ZkO-YvuMFw_HfmvhNK_3nj44uVJrOXdCE_YpscwSK6SM2WXwR-0KYP6faNUsTfV4rq_QWleBMqhEaUMhLUC1tgdF2C22mBE/kI3WrO11fnm23PjSBDA0OIsqBO6LHqwXQ3huop_Ag2g'), ('filename', 'QuTech_Main_rgb.jpg'), ('size', 158522), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GAO-iIvbz0A8L-V2yztQGA/FCtruksdQ2Q6srrhGiwgoVVF3AeuSBQ3uNTbyiELwsOWzdExn74Qwu_PF6D6WjqI9gPjl-YCas6da4IXlMC6MQ/k4tJSzhQhfVv0d9gPSWJJ-fksIeYJRmUH68XX5I2PuQ'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KsjRTv1rhseXNm1_RtLk5A/iuV4HMfRxlUUUiLhccAd5H1WREcmLIApSygRmprmfgGs9yMXyYe3q_dZfEAfpSAfwLYQKR7GaVVHuo1UTete-w/7COlOkNModL_5MKY4ECyxVxde5O4qnKbhzkh9izju2A'), ('width', 1031), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vh5BpaV2gyhY3kOSAvq-ag/N8KfAOufo8Ghs6K4W1HIaasEWiYmkDoaiwwLHuSHP5UT7JTfSyhvbUSbBphdoBLA1BiBSDdKw5usJSo-WYhpjw/KtlR-7u5DaYUBKhRsOmxynfnGDx_p7Ip2JM7JCeQHec'), ('width', 3000), ('height', 3000)]))]))])]",https://qutech.nl/,Write a Python script that uses Qcodes Community to connect to a M2j Lockin Amplifiers,https://www.everythingrf.com/search/microwave-rf-amplifiers,['Lockin Amplifiers'],A Microwave RF Amplifier is an electronic device that amplifies a low power radio frequency signal to one with larger amplitude within a wireless system. RF Amplifiers from the leading manufacturers are listed below. Use the filters to narrow down on products based on your requirement. Download datasheets and request quotes for products that you find interesting. Your inquiry will be directed to the manufacturer and their distributors in your region.,M2j,could not find,"[OrderedDict([('id', 'attYjeFgtcYBZEORx'), ('width', 250), ('height', 945), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FqIfU0lzykSKVN3vorYwWw/84rSYtM-5r7Thn8L_SVDWa_o8d-cGiS1X6HXqsBLwAGViMlDIcuM2CEBNAAia2ZAMf9kIDn7GMrvjWGH-Iu6Uw_MQr4OE8sgbEfG7pmL2AY/vm_MvrzAsuwjpgb9mY_P4_eHrj5Gz7vEOpOSg-btwZQ'), ('filename', 'FrontM2j.png'), ('size', 270260), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/upj6PlJsfWR20JnJpTi5Xw/t56212IS0cYYny3lGcWm0hLAm0seD9IXLMcbGC02JRsW83j-mAEfJW66whDdp7oE08OP5LfNfbxLJWjAUP3gYw/pAdo_R6_l0KedKa_N5uIxDhBz5qMnZRlrT_9BPeju0c'), ('width', 10), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zJzYwSCxOpwy0Jb5YYnaCg/hxDSqhza38KoEADvk9yFVkzqwmYRRyqvL0LnZi8VaUwMyMzeEz109kl12csAXIsBpgOqiDsdW-tYb5opcqNTGQ/AsXkbX0ZcfQN5aDD8RdqPwVXjXH8PylGHTE2l0dYVqs'), ('width', 250), ('height', 945)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/h3AAEhD-FJpVuLMvOpppUA/D4NRtjeh6_F1enP4GTrE0dcMjPDrLgVMURY-enSIec_rdgkZNEW9Y4rh02Q3CDitDFRNQ20BqyOOruvOSwMKAw/ARhh77N7bsJHTsAbqTiOlKtm2oOPlPGyIKfl_phd7XM'), ('width', 3000), ('height', 3000)]))]))])]",https://qtwork.tudelft.nl/~mtiggelman/modules/rf/m2j.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QuTech/M2j.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QuTech.html#module-qcodes_contrib_drivers.drivers.QuTech.M2j,,,,,"from qcodes.instrument.base import Instrument
from qcodes.utils.validators import Numbers
import numpy as np

try:
    from spirack import M2j_module, SPI_rack
except ImportError:
    raise ImportError(('The M2j_module class could not be found. '
                       'Try installing it using pip install spirack'))


class M2j(Instrument):

    def __init__(self, name: str, spi_rack: SPI_rack, module: int, **kwargs):
        """"""
        Qcodes driver for the M2j RF amplifier SPI-rack module.

        Args:
            name: name of the instrument.

            spi_rack: instance of the SPI_rack class as defined in
                the spirack package. This class manages communication with the
                individual modules.

            module: module number as set on the hardware.

        The gain can only be set on the device, but not read from the device.
        """"""
        super().__init__(name, **kwargs)

        self.m2j = M2j_module(spi_rack, module)
        self._max_gain_value = 4095
        self._min_gain_value = 0
        self._gain_parameters = {'slope': -1024.45, 'offset': 4450.63,
                                 'db_offset': 32}

        self.add_parameter('gain',
                           label='gain',
                           set_cmd=self._set_gain,
                           unit='dB',
                           vals=Numbers(min_value=33, max_value=110),
                           docstring='Amplifier gain in dB, range 33 to 110 dB')

        self.add_parameter('RF_level',
                           label='RF level',
                           get_cmd=self._meas_rf_level,
                           unit='dBm',
                           docstring='Measured RF power after amplification '
                                     '(not calibrated)')

        self.add_function('clear_rf_clip',
                          call_cmd=self.m2j.clear_rf_clip)
        self.add_function('is_rf_clipped',
                          call_cmd=self.m2j.rf_clipped)

    def _set_gain(self, gain):
        ref_scale = int(self._gain_parameters['slope'] * np.log(
            gain - self._gain_parameters['db_offset']) + self._gain_parameters[
                            'offset'])
        if ref_scale < self._min_gain_value:
            ref_scale = self._min_gain_value
        if ref_scale > self._max_gain_value:
            ref_scale = self._max_gain_value

        self.m2j.set_gain(ref_scale)

    def _meas_rf_level(self):
        """"""
        Measure the power in dBm. Calibrated using an R&S SMA100 source.
        Linear relation between set power and measured data.
        Measurement range -80 to -40 dBm.
        """"""
        return self.m2j.get_level()
"
104,5.0,Turkey,"ERASynth removes the cost barriers and makes quality RF signal synthesis accessible to everyone, especially budget-conscious makers.","ERASYNTH
",121.0,"**ERA Instruments** is a startup technology company based in Istanbul, Turkey. With its young and dynamic engineering team, ERA specializes in: RF Signal Generators
",Qcodes Community,Erainstruments,"[OrderedDict([('id', 'attqjNKC4K1tN3MTz'), ('width', 1833), ('height', 839), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/SYY7nfHIjHliB3CsdI8rAw/RXEwyp2uvinqeQylMHA8T8VBFC-Zy74fRnWcF87Z_59ODPQXiKWSm08C7VMj6f66_B8QCgvJ_n6KK84LHdtKzMgdrDeg5WfMU2JwQ1KtngiCPW15eTOM_EDmjjaEScDI/adMyzVSIm4nydvItr1AkHEfvCYZdcZINO7K2sEzoQxc'), ('filename', 'era-instruments-logo-4.svg'), ('size', 5220), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/xm4gDQ9ny2w-cwQp9vPNpg/DtF1cIONxSMBAnlw0ghBS7sDJv5NF8vsnp1zO0-F4haSm8Pwda9zVcCleATFY-ZF0wSEti9NFb-Bm61W9qvO5Y-HVui7k07nIXesmcdo44Y/NyQW7v7o72zHahD4jeow6N3Ee-T63KfYAxHTJUIXeT0'), ('width', 79), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/lP6oZMgHj_TzT17rEkuOQQ/7NGOTso6B5FRcbTt8vES5EzKHpIvz4vhk7PAqoDBd-AXMiskjA0fPF7EO3ac3e5UOkXam57DEDeuX613GsO7MiKoFdON1ahXotpJ8kwjo8Q/erE0L0Al3sy8IE3JhGDhnOcpPNptSO0XPdQkC4k-qp8'), ('width', 1119), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/txYSvzy86I4hYPlhuiAnjA/7UVsShLvw9Vko4D1sUt6wxu_tppUpk1RFIrbq1FJmwL0Qz4l4uYVw_XIF_u7x7IVtUdY6rcPA1lA-nom-BR3_brOyD6QvLV7c9c0m4zDPR0/HVnXB6Ilpf2HmxOxuEoz_ryoHzpD-tBau7UsGR7CH_0'), ('width', 3000), ('height', 3000)]))]))])]",https://erainstruments.com/#home,"Write a Python script that uses Qcodes Community to connect to a ERASYNTH
 RF Signal Generator",https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape","ERASYNTH
",,"[OrderedDict([('id', 'att6gOYzZvJ5DwDip'), ('width', 1280), ('height', 720), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/1XVocXmr8zOf2uLQrKyv7g/jvyppeLpvK31gQlThRsWPq6DQUhFWBp6QkQPCRmgMgmdjh6wKQfRQB72dZSkk-VyBf_lf0saxs1BJapgNvbI1-rlHaQ3YiFl7LCTa8_XnwZRvTCeIAJGcZ0ICp8TK6Nm/9uJLlD0u5TXGML4vpZ8GeSmMGdNjpR_2Y0SkKPZBgy0'), ('filename', 'erasynth-splash_jpg_md-xl.jpg'), ('size', 42614), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0BCK0VE-qoW6ItTymeOK9w/6WG4g4zgDXufe60FHf-xlqo2gZhWC2USpDZ9O_cXUDARhqV6jcjf1CNXmfpwBcOJV6rGFpnDs7xKOItLx_Cbdg/PRp5p0_mmQZIojJwrA3R4UuC4v5YZehbUgdcyMobEMU'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/8LcPicBPj_JcOxVs7szSkQ/0iK8AG3ieYJjyfIzDJGuQkl6GbLLnWfEe4dXUnaDquOwFSZ017ncmqT_U7MT79nsfUz_yMpZG0a_c2QhfqDcUg/GlhqS9DM8IczRK_UtWCGipocfAQWB3UtKe0u-tv2Wns'), ('width', 910), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/NMwz-VIP5uAmivxPhRTkkA/FBq3QQbBT5XtmU1MCW6XUtPyVDcCNd89zJkhP00afdgZEsO3IkhuDG1fhFNEH4O4j_nf-WeyaPtlHh57FC7BhA/HaAjTZ4_H88KxCZ9Uy9DX62V5vudiZgUwIW2Yq4VsRE'), ('width', 3000), ('height', 3000)]))]))])]",https://erainstruments.com/,https://github.com/erainstruments/erasynth-firmware/tree/master/ERASynth,https://qcodes.github.io/Qcodes_contrib_drivers/examples/ERASynth.html,500.0,,,ERASYNTH Firmware is coded in C++,
109,2.4,"Georgetown, Texas",,Signalcore,507.0,"Founded in 2009, SignalCore, Inc. is a privately held company based in Georgetown, Texas. SignalCore designs and manufactures high quality, instrument grade RF and microwave subsystems. We serve customers worldwide in the industries of measurement, communications, aerospace, defense, academia, and electronics manufacturing. Our extensive engineering knowledge and experience in the design and manufacturing of high performance RF and microwave solutions ensures that our products are of the highest quality and reliability in the industry.
",Qcodes Community,Signalcore,"[OrderedDict([('id', 'att2GziCud68FfO8C'), ('width', 518), ('height', 161), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KcBOD6G9OCyUX3ByHdfmfg/UaMXsQO3PmfaI-dh7LNIYv6fx33QP_C13_v3d4YKyYx-aJ8_vs9g1VTLamHqMMl7R7KB5nyPVveiv0wkUowU4Q/-8TD2YbrCfkZY2OQdcYRmtlqd4PUTBFfv2ykfT6HrpI'), ('filename', 'logo.png'), ('size', 11072), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/6fxGClTE-YrMmzyfa_4eog/DbqX8-G4facJABvc_yLgspb0GQetGBazXrRuYtGIrxbZKy_u4UNdvEXMzsgn8hiImbUQEczXdMlF7QhWhDo77A/eatIe8DJNPtkmcBIjtxRu7IA_gKo6qLkPjI8mnreeOk'), ('width', 116), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bJfQqUKAyXu44JV_aVL7SQ/5Hd5Nv6UxFEUdc_a_Co1gg6CBrZCUwlDJZRTaMphvCFgXoX2pxgcSw4NPD48pRiyMn9TG0A1ZsbipwDaZJc7dA/EJ2fYHeH0ILISKiIqSwL70WzzQWmrbqGtFTijrzwEJY'), ('width', 518), ('height', 161)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_5bOOmxsirX_gFfZEPEg6w/37N9TRCSqVPbq6fpoQBN7XPxlGsrG91Rt-sr9F0peAxkVM-BP19nr_YOXIwwbKaA9QC6cTo_-mirOV3lMZ9rsg/5jdhnnPkniGvbvVlgBKgKlwQ_ecfQSK5-2zNqUgK1KM'), ('width', 3000), ('height', 3000)]))]))])]",https://www.signalcore.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} ,,,,,,,,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/SignalCore/SignalCore.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.SignalCore.html#module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore,,,,,"import ctypes
import ctypes.wintypes
import os
import sys
from typing import Dict, Optional
from qcodes import Instrument
from qcodes.utils.validators import Enum


MAXDEVICES = 50
MAXDESCRIPTORSIZE = 9
COMMINTERFACE = ctypes.c_uint8(1)

class ManDate(ctypes.Structure):
    _fields_ = [('year', ctypes.c_uint8),
                ('month', ctypes.c_uint8),
                ('day', ctypes.c_uint8),
                ('hour', ctypes.c_uint8)]


class DeviceInfoT(ctypes.Structure):
    _fields_ = [('product_serial_number', ctypes.c_uint32),
                ('hardware_revision', ctypes.c_float),
                ('firmware_revision', ctypes.c_float),
                ('device_interfaces', ctypes.c_uint8),
                ('man_date', ManDate)]
device_info_t = DeviceInfoT()


class ListModeT(ctypes.Structure):
    _fields_ = [('sweep_mode', ctypes.c_uint8),
                ('sweep_dir', ctypes.c_uint8),
                ('tri_waveform', ctypes.c_uint8),
                ('hw_trigger', ctypes.c_uint8),
                ('step_on_hw_trig', ctypes.c_uint8),
                ('return_to_start', ctypes.c_uint8),
                ('trig_out_enable', ctypes.c_uint8),
                ('trig_out_on_cycle', ctypes.c_uint8)]


class PLLStatusT(ctypes.Structure):
    _fields_ = [('sum_pll_ld', ctypes.c_uint8),
                ('crs_pll_ld', ctypes.c_uint8),
                ('fine_pll_ld', ctypes.c_uint8),
                ('crs_ref_pll_ld', ctypes.c_uint8),
                ('crs_aux_pll_ld', ctypes.c_uint8),
                ('ref_100_pll_ld', ctypes.c_uint8),
                ('ref_10_pll_ld', ctypes.c_uint8)]


class OperateStatusT(ctypes.Structure):
    _fields_ = [('rf1_lock_mode', ctypes.c_uint8),
                ('rf1_loop_gain', ctypes.c_uint8),
                ('device_access', ctypes.c_uint8),
                ('device_standby', ctypes.c_uint8),
                ('auto_pwr_disable', ctypes.c_uint8),
                ('output_enable', ctypes.c_uint8),
                ('ext_ref_lock_enable', ctypes.c_uint8),
                ('ext_ref_detect', ctypes.c_uint8),
                ('ref_out_select', ctypes.c_uint8),
                ('list_mode_running', ctypes.c_uint8),
                ('rf_mode', ctypes.c_uint8),
                ('over_temp', ctypes.c_uint8),
                ('harmonic_ss', ctypes.c_uint8),
                ('pci_clk_enable', ctypes.c_uint8)]


class DeviceStatusT(ctypes.Structure):
    _fields_ = [('list_mode_t', ListModeT),
                ('operate_status_t', OperateStatusT),
                ('pll_status_t', PLLStatusT)]
device_status_t = DeviceStatusT()


class HWTriggerT(ctypes.Structure):
    _fields_ = [('edge', ctypes.c_uint8),
                ('pxi_enable', ctypes.c_uint8),
                ('pxi_line', ctypes.c_uint8)]
hw_trigger_t = HWTriggerT()


class DeviceRFParamsT(ctypes.Structure):
    _fields_ = [('frequency', ctypes.c_double),
                ('sweep_start_freq', ctypes.c_double),
                ('sweep_stop_freq', ctypes.c_double),
                ('sweep_step_freq', ctypes.c_double),
                ('sweep_dwell_time', ctypes.c_uint32),
                ('sweep_cycles', ctypes.c_uint32),
                ('buffer_points', ctypes.c_uint32),
                ('rf_phase_offset', ctypes.c_float),
                ('power_level', ctypes.c_float),
                ('atten_value', ctypes.c_float),
                ('level_dac_value', ctypes.c_uint16)]
device_rf_params_t = DeviceRFParamsT()


error_dict = {'0':'SCI_SUCCESS',
              '0':'SCI_ERROR_NONE',
              '-1':'SCI_ERROR_INVALID_DEVICE_HANDLE',
              '-2':'SCI_ERROR_NO_DEVICE',
              '-3':'SCI_ERROR_INVALID_DEVICE',
              '-4':'SCI_ERROR_MEM_UNALLOCATE',
              '-5':'SCI_ERROR_MEM_EXCEEDED',
              '-6':'SCI_ERROR_INVALID_REG',
              '-7':'SCI_ERROR_INVALID_ARGUMENT',
              '-8':'SCI_ERROR_COMM_FAIL',
              '-9':'SCI_ERROR_OUT_OF_RANGE',
              '-10':'SCI_ERROR_PLL_LOCK',
              '-11':'SCI_ERROR_TIMED_OUT',
              '-12':'SCI_ERROR_COMM_INIT',
              '-13':'SCI_ERROR_TIMED_OUT_READ',
              '-14':'SCI_ERROR_INVALID_INTERFACE'}



class SC5521A(Instrument):
    __doc__ = 'QCoDeS python driver for the Signal Core SC5521A.'

    def __init__(self, name: str,
                       dll_path: str='SignalCore\\SC5520A\\api\\c\\scipci\\x64\\sc5520a_uhfs.dll',
                       **kwargs):
        """"""
        QCoDeS driver for the Signal Core SC5521A.
        This driver has been tested when only one SignalCore is connected to the
        computer.

        Args:
        name (str): Name of the instrument.
        dll_path (str): Path towards the instrument DLL.
        """"""

        (super().__init__)(name, **kwargs)

        self._devices_number = ctypes.c_uint()
        self._pxi10Enable = 0
        self._lock_external = 0
        self._clock_frequency = 10
        buffers = [ctypes.create_string_buffer(MAXDESCRIPTORSIZE + 1) for bid in range(MAXDEVICES)]
        self.buffer_pointer_array = (ctypes.c_char_p * MAXDEVICES)()
        for device in range(MAXDEVICES):
            self.buffer_pointer_array[device] = ctypes.cast(buffers[device], ctypes.c_char_p)

        self._buffer_pointer_array_p = ctypes.cast(self.buffer_pointer_array, ctypes.POINTER(ctypes.c_char_p))

        # Adapt the path to the computer language
        if sys.platform == 'win32':
            dll_path = os.path.join(os.environ['PROGRAMFILES'], dll_path)
            self._dll = ctypes.WinDLL(dll_path)
        else:
            raise EnvironmentError(f""{self.__class__.__name__} is supported only on Windows platform"")

        found = self._dll.sc5520a_uhfsSearchDevices(COMMINTERFACE, self._buffer_pointer_array_p, ctypes.byref(self._devices_number))
        if found:
            raise RuntimeError('Failed to find any device')
        self._open()

        self.add_parameter(name='temperature',
                           docstring='Return the microwave source internal temperature.',
                           label='Device temperature',
                           unit='celsius',
                           get_cmd=self._get_temperature)

        self.add_parameter(name='status',
                           docstring='.',
                           vals=Enum('on', 'off'),
                           set_cmd=self._set_status,
                           get_cmd=self._get_status)

        self.add_parameter(name='power',
                           docstring='.',
                           label='Power',
                           unit='dbm',
                           set_cmd=self._set_power,
                           get_cmd=self._get_power)

        self.add_parameter(name='frequency',
                           docstring='.',
                           label='Frequency',
                           unit='Hz',
                           set_cmd=self._set_frequency,
                           get_cmd=self._get_frequency)

        self.add_parameter(name='rf_mode',
                           docstring='.',
                           vals=Enum('single_tone', 'sweep'),
                           initial_value='single_tone',
                           set_cmd=self._set_rf_mode,
                           get_cmd=self._get_rf_mode)

        self.add_parameter(name='clock_frequency',
                           docstring='Select the internal clock frequency, 10 or 100MHz.',
                           unit='MHz',
                           vals=Enum(10, 100),
                           initial_value=100,
                           set_cmd=self._set_clock_frequency,
                           get_cmd=self._get_clock_frequency)

        self.add_parameter(name='clock_reference',
                           docstring='Select the clock reference, internal or external.',
                           vals=Enum('internal', 'external'),
                           initial_value='internal',
                           set_cmd=self._set_clock_reference,
                           get_cmd=self._get_clock_reference)
        self.connect_message()

    def _open(self) -> None:
        if sys.platform == ""win32"":
            self._handle = ctypes.wintypes.HANDLE()
        else:
            raise EnvironmentError(f""{self.__class__.__name__} is supported only on Windows platform"")

        self._dll.sc5520a_uhfsOpenDevice(COMMINTERFACE, self.buffer_pointer_array[0], ctypes.c_uint8(1), ctypes.byref(self._handle))

    def _close(self) -> None:
        self._dll.sc5520a_uhfsCloseDevice(self._handle)

    def _error_handler(self, msg: int) -> None:
        """"""Display error when setting the device fail.

        Args:
            msg (int): error key, see error_dict dict.

        Raises:
            BaseException
        """"""

        if msg!=0:
            raise BaseException(""Couldn't set the devise due to {}."".format(error_dict[str(msg)]))
        else:
            pass

    def _get_temperature(self) -> float:
        temperature = ctypes.c_float()
        self._dll.sc5520a_uhfsFetchTemperature(self._handle, ctypes.byref(temperature))
        return temperature.value

    def _set_status(self, status: str) -> None:
        if status.lower() == 'on':
            status_ = 1
        else:
            status_ = 0
        msg = self._dll.sc5520a_uhfsSetOutputEnable(self._handle, ctypes.c_int(status_))
        self._error_handler(msg)

    def _get_status(self) -> str:
        self._dll.sc5520a_uhfsFetchDeviceStatus(self._handle, ctypes.byref(device_status_t))
        if device_status_t.operate_status_t.output_enable:
            return 'on'
        else:
            return 'off'

    def _set_power(self, power: float) -> None:
        msg = self._dll.sc5520a_uhfsSetPowerLevel(self._handle, ctypes.c_float(power))
        self._error_handler(msg)

    def _get_power(self) -> float:
        self._dll.sc5520a_uhfsFetchRfParameters(self._handle, ctypes.byref(device_rf_params_t))
        return device_rf_params_t.power_level

    def _set_frequency(self, frequency: float) -> None:
        msg = self._dll.sc5520a_uhfsSetFrequency(self._handle, ctypes.c_double(frequency))
        self._error_handler(msg)

    def _get_frequency(self) -> float:
        device_rf_params_t = DeviceRFParamsT()
        self._dll.sc5520a_uhfsFetchRfParameters(self._handle, ctypes.byref(device_rf_params_t))
        return float(device_rf_params_t.frequency)

    def _set_clock_frequency(self, clock_frequency: float) -> None:
        if clock_frequency == 10:
            self._select_high = 0
        else:
            self._select_high = 1
        msg = self._dll.sc5520a_uhfsSetReferenceMode(self._handle, ctypes.c_int(self._pxi10Enable), ctypes.c_int(self._select_high), ctypes.c_int(self._lock_external))
        self._error_handler(msg)

    def _get_clock_frequency(self) -> float:
        self._dll.sc5520a_uhfsFetchDeviceStatus(self._handle, ctypes.byref(device_status_t))
        ref_out_select = device_status_t.operate_status_t.ref_out_select
        if ref_out_select == 1:
            return 100
        return 10

    def _set_clock_reference(self, clock_reference: str) -> None:
        if clock_reference.lower() == 'internal':
            self._lock_external = 0
        else:
            self._lock_external = 1
        msg = self._dll.sc5520a_uhfsSetReferenceMode(self._handle, ctypes.c_int(self._pxi10Enable), ctypes.c_int(self._select_high), ctypes.c_int(self._lock_external))
        self._error_handler(msg)

    def _get_clock_reference(self) -> str:
        self._dll.sc5520a_uhfsFetchDeviceStatus(self._handle, ctypes.byref(device_status_t))
        ext_ref_detect = device_status_t.operate_status_t.ext_ref_detect
        if ext_ref_detect == 1:
            return 'external'
        return 'internal'

    def _set_rf_mode(self, rf_mode: str) -> None:
        if rf_mode.lower() == 'single_tone':
            self.rf_mode_ = 0
        else:
            self.rf_mode_ = 1
        msg = self._dll.sc5520a_uhfsSetRfMode(self._handle, ctypes.c_int(self.rf_mode_))
        self._error_handler(msg)

    def _get_rf_mode(self) -> str:
        self._dll.sc5520a_uhfsFetchDeviceStatus(self._handle, ctypes.byref(device_status_t))
        rf_mode = device_status_t.operate_status_t.rf_mode
        if rf_mode == 0:
            return 'single_tone'
        return 'sweep'

    def get_idn(self) -> Dict[str, Optional[str]]:
        self._dll.sc5520a_uhfsFetchDeviceInfo(self._handle, ctypes.byref(device_info_t))

        return {'vendor':'SignalCore',
                'model':'SC5521A',
                'serial':device_info_t.product_serial_number,
                'firmware':device_info_t.firmware_revision,
                'hardware':device_info_t.hardware_revision,
                'manufacture_date':'20{}-{}-{} at {}h'.format(device_info_t.man_date.year, device_info_t.man_date.month, device_info_t.man_date.day, device_info_t.man_date.hour)}
"
114,5.0,USA,"The LDA-102 Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +22 dBm, and offers frequency coverage of 10 to 1,000 MHz. It has an attenuation range of 63 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-102 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-102,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attAXR8c8ki57a3nQ'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aeU8msYTt6OQ1Gp6SY5dYg/2pXCcWCvEWq-1wBqaeqHyWXMn7GFQ-8Ku0ixYp9Wj4-ZCZQ241oAd__eZrAr1mBvj9BWTxxCh7ZIgmWtQCtbFzo02dJ3YpYYG88NGIu5uOyenZSbmaaGYjllPaEgRqi1/KbVbNB8CPXoAC0AV-pNVKPmet8VvwqjA7PqcyqRY_3A'), ('filename', 'vaunix-digital-attenuator-102.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bTBzH9bpw34imsgJSEf1zQ/bKiX2AV_OBhDHNtqQFZLpTtYADEwBJ8oLJbmABG0YWj57tQJazjR7ZUmN1mSEkJkxAHYW6mXWDcHN56tsSHWkw/pMnUKmpNGnn-KuPxmAUlfhptwrrYHuLtbz4dHqaOZ-4'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uIQvzqlmS-Ia9OfVo0njFQ/TPmsw2CP-1_eUgWfC9X-Em4diEVV08yttGzuaEY1sNjAeXCFarRN29ByEzk42C4F4xG6PD-BhY7EWEgi31RZ4w/6EPpqibF0Kv9Rd7U-c_9Owxc_TxWqWwW6kUTmpzzWxw'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/TRM9nXcWPR6s8YnpMQmtcw/W9hNcF_E2g7BIiwcFYJrJltZc4gj1UhFlXgHS10Hzpy988te6xCBt4zVHmlvTa2yLPyUrhw1V3rcMv1XQSOotA/mBN-oAZlgLNPp6rous_MCeYSDbnYi-sLk7q41k-1Gxo'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-102-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,375.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
124,5.0,"Grosshandorf, Germany","The M4i.66xx-x8 series arbitrary waveform generators (AWG) deliver the highest performance in both speed and resolution. The series includes PCIe cards with either one, two or four synchronous channels. The large onboard memory can be segmented to replay different waveform sequences. The AWG features a PCI Express x8 Gen 2 interface that offers outstanding data streaming performance. The interface and Spectrum’s optimized drivers enable data transfer rates in excess of 2.8 GB/s so that signals can continuously replayed at a high output rate. While the cards have been designed using the latest technology they are still software compatible with the drivers from earlier Spectrum waveform generators. So, existing customers can use the same software they developed for a 10 year old 20 MS/s AWG card and for an M4i series 625 MS/s AWG.",M4I,516.0," Spectrum Instrumentation manufactures high-speed, high-resolution PC measurement equipment for the most demanding applications. 200+ products are available for your Perfect Fit Solution, combined with intuitive measurement software, support directly from the engineers and five years warranty. Spectrum products and solutions are used by leading companies and research institutes worldwide.
",Qcodes Community,Spectrum,"[OrderedDict([('id', 'attdNYSKAjAzfakev'), ('width', 480), ('height', 240), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/I-7_KvneyFYTYH1Z1oK8Eg/NDH3Weaam0395wV0cLXpBfR93iGYBRN-QQJc1h0TPFVbCSJiIGMgBSy0vKT9V0nTeog3j9F8wueg_5p8yhyk0mH3_F3pJTJ4gyk_0PXsKWOuEt_C6RiJ3RTiBO7Fwbtn/dpTXWvSIovClK5lY-1Odl9vr5a7fLwqmQSJHqm6unv8'), ('filename', '5aad02dc7610fb897c8df05d-480x480.png'), ('size', 11200), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-DaXqHZWtd4voBJEEPxN7Q/B9b-p3BQpb7XYQoz-dguZNX0rO9LqfHIPI_1vIw0uNNOBksXrXTs8vpa92yieGn9NYN1I3xZp5gx5lXyiVLhcg/gFXdUmVRHo7jeMiiBfu3xku6xbg8P9KOStXz9LqNwps'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Byl0d-qMu3cd36-dgnagdA/hwqKNTsX6qsZrglDjeYRXPtUoPdQVHxPo2dxogugieDbE6RF2W48j6xs3BQ8yjkBKx15WAJlTVmDqi_RpTZlHg/M3B3qg5HoDpcqWOkVTQuFLdVJi14Ba0LpRDdRaegUuo'), ('width', 480), ('height', 240)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tJHLt7hI1V8kLympM3ypfQ/uZRPi9_WJPuhxlXelx8ZDRHRfqLXVVyeCdgFxDA869b6u78QxJKoyybEgMlORbOT4edLJF346QtH4TtduUpugQ/SlyYOJumDwUKBW9NfVWpragWW704kwVPQen9NabzHM8'), ('width', 3000), ('height', 3000)]))]))])]",https://spectrum-instrumentation.com/,Write a Python script that uses Qcodes Community to connect to a M4i.6631-x8 Function Generators,https://en.wikipedia.org/wiki/Function_generator,['Function Generators'],"In electrical engineering, a function generator is usually a piece of electronic test equipment or software used to generate different types of electrical waveforms over a wide range of frequencies. Some of the most common waveforms produced by the function generator are the sine wave, square wave, triangular wave and sawtooth shapes. These waveforms can be either repetitive or single-shot (which requires an internal or external trigger source).[1] Another feature included on many function generators is the ability to add a DC offset. Integrated circuits used to generate waveforms may also be described as function generator ICs.",M4i.6631-x8,,"[OrderedDict([('id', 'attBVqJPaw2ypiHZh'), ('width', 800), ('height', 800), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0f6UeqawZPnTXoWAQtstIg/whGZl0vTmIXg3iDbnmi7U5I1vA09cy0W_-uqFPQkvu5zabznQ4ZQRS-qjZVH-8-8ympsEPjG2X87Dmodg9caMlYhh91yq5FSYNX414SymX0/ScH98a1w04bqHYwuOKaXYnR2_Qlcm1c8fn3x5ZQHy9o'), ('filename', '790-large_default.jpg'), ('size', 501113), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Z4uFQbkpQUH1UHgSA3NEOw/srioQ3ypMrvP-YNTUoArzlOgaD6ils0OCxPU3tO3Qk3qNl47eHnQliUHwvST9zlZmNlkb9lv8z7lSDtbN9RORA/df1LGdrDLIXAYkzppcn_UgDH6IWPZ35Xkm-lygnjEnw'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rn5wDenOpmv_mlUsWq3--Q/fUCvFAfy7qTnXbS8PL57Ro-cRg8UWg11GQxRaRnUHybeqU0IuHhXtq4m2sb6-HbW1fE0hQa5BAU_ZphCYclQVw/E6X4mLixvzFUL6LlqCHgiwImZAohSibB55KnXVUVGvA'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/xKzWRrcYdmmEfF7IerCekQ/XjArfskwbq0rksFt2cbYBtb-r4nthUMmeftdvBdPZwdljS01ibWkXn98LXh0dzl6zib6OGRXnq7-ttyUVJNhjg/SjcZr-bqYYvMepTKnwEJSrf4lS-7abklER463O0iysc'), ('width', 3000), ('height', 3000)]))]))])]",https://spectrum-instrumentation.com/products/details/M4i6631-x8.php,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Spectrum/M4i.py,,,,,,"# **************************************************************************
#
# Driver file for M4i.44x-x8
#
# **************************************************************************
#
# QuTech
#
# Written by: Luka Bavdaz, Marco Tagliaferri, Pieter Eendebak
# Also see: http://spectrum-instrumentation.com/en/m4i-platform-overview
#

# %%
import os
import sys
import logging
import numpy as np
import ctypes as ct
from functools import partial
from typing import Union, Type

from qcodes.utils.validators import Enum, Numbers, Anything, Ints
from qcodes.instrument.base import Instrument

log = logging.getLogger(__name__)

try:
    # add the location of the pyspcm header file manually
    header_dir = os.path.split(__file__)[0]

    if not header_dir in sys.path:
        log.info('M4i: adding header_dir %s to sys.path' % header_dir)
        sys.path.append(header_dir)
    import pyspcm
    import py_header.spcerr
except (ImportError, OSError):
    info_str = 'to use the M4i driver install the pyspcm module and the M4i libs'
    log.exception(info_str)
    raise ImportError(info_str)

# %% Helper functions


def szTypeToName(lCardType):
    """""" Convert card type to string

    This function is taken from an example provided by Spectrum GmbH
    """"""
    sName = ''
    lVersion = (lCardType & pyspcm.TYP_VERSIONMASK)
    if (lCardType & pyspcm.TYP_SERIESMASK) == pyspcm.TYP_M2ISERIES:
        sName = 'M2i.%04x' % lVersion
    elif (lCardType & pyspcm.TYP_SERIESMASK) == pyspcm.TYP_M2IEXPSERIES:
        sName = 'M2i.%04x-Exp' % lVersion
    elif (lCardType & pyspcm.TYP_SERIESMASK) == pyspcm.TYP_M3ISERIES:
        sName = 'M3i.%04x' % lVersion
    elif (lCardType & pyspcm.TYP_SERIESMASK) == pyspcm.TYP_M3IEXPSERIES:
        sName = 'M3i.%04x-Exp' % lVersion
    elif (lCardType & pyspcm.TYP_SERIESMASK) == pyspcm.TYP_M4IEXPSERIES:
        sName = 'M4i.%04x-x8' % lVersion
    else:
        sName = 'unknown type'
    return sName

_errormsg_dict = {
        getattr(py_header.spcerr, name): name
        for name in dir(py_header.spcerr) if name.startswith('ERR_')
        }

# %% Main driver class


class M4i(Instrument):

    _NO_HF_MODE = -1

    def __init__(self, name, cardid='spcm0', **kwargs):
        """""" Driver for the Spectrum M4i.44xx-x8 cards.

        For more information see: http://spectrum-instrumentation.com/en/m4i-platform-overview

        Example:

            Example usage for acquisition with channel 2 using an external trigger
            that triggers multiple times with trigger mode HIGH::

                m4 = M4i(name='M4i', server_name=None)
                m4.enable_channels(pyspcm.CHANNEL2)
                m4.set_channel_settings(2,mV_range, input_path, termination, coupling, compensation)
                m4.set_ext0_OR_trigger_settings(pyspcm.SPC_TM_HIGH,termination,coupling,level0)
                calc = m4.multiple_trigger_acquisition(mV_range,memsize,seg_size,posttrigger_size)

        Note:
          Error generated by the card can be retrieved with the method :func:`get_error_info32bit`. The card can be
          reset with :func:`reset`.
          Sometimes when an error occurs (including validation errors) the python console needs to be restarted


        """"""
        super().__init__(name, **kwargs)

        self.hCard = pyspcm.spcm_hOpen(cardid)
        if self.hCard is None:
            logging.warning(""M4i: no card found\n"")

        self._last_set_result = 0

        # add parameters for getting
        self.add_parameter('card_id',
                           label='card id',
                           get_cmd=None, set_cmd=None,
                           initial_value=cardid,
                           vals=Anything(),
                           docstring='The card ID')
        self.add_parameter('max_sample_rate',
                           label='max sample rate',
                           unit='Hz',
                           get_cmd=self.get_max_sample_rate,
                           docstring='The maximumum sample rate')
        self.add_parameter('memory',
                           label='memory',
                           unit='bytes',
                           get_cmd=self.get_card_memory,
                           docstring='Amount of memory on card')
        self.add_parameter('resolution',
                           label='resolution',
                           unit='bits',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_MIINST_BITSPERSAMPLE),
                           docstring='Resolution of the card')
        self.add_parameter('pcidate',
                           label='pcidate',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_PCIDATE),
                           docstring='The PCI date')
        self.add_parameter('serial_number',
                           label='serial number',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_PCISERIALNO),
                           docstring='The serial number of the board')
        self.add_parameter('hardware_version',
                           label='hardware version',
                           get_cmd=self.get_hardware_version,
                           docstring='The hardware version of the board')
        self.add_parameter('firmware_version',
                           label='firmware version',
                           get_cmd=self.get_firmware_version,
                           docstring='The firmware version of the board')
        self.add_parameter('features',
                           label='features',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_PCIEXTFEATURES),
                           docstring='Installed options and features')
        self.add_parameter('channel_count',
                           label='channel count',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_CHCOUNT),
                           docstring='Return number of enabled channels')
        self.add_parameter('input_path_count',
                           label='input path count',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_READAIPATHCOUNT),
                           docstring='Return number of analog input paths')
        self.add_parameter('input_ranges_count',
                           label='input ranges count',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_READIRCOUNT),
                           docstring='Return number of input ranges for the current input path')
        self.add_parameter('input_path_features',
                           label='input path features',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_READAIFEATURES),
                           docstring='Return a bitmap of features for current input path')
        self.add_parameter('available_card_modes',
                           label='available card modes',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_AVAILCARDMODES),
                           docstring='Return a bitmap of available card modes')
        self.add_parameter('card_status',
                           label='card status',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_M2STATUS),
                           docstring='Return a bitmap for the status information')
        self.add_parameter('read_range_min_0',
                           label='read range min 0', unit='mV',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_READRANGEMIN0),
                           docstring='Return the lower border of input range 0')

        # buffer handling
        self.add_parameter('user_available_length',
                           label='user available length',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_DATA_AVAIL_USER_LEN),
                           docstring='returns the number of currently to the user available bytes inside a sample data transfer')
        self.add_parameter('user_available_position',
                           label='user available position',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_DATA_AVAIL_USER_POS),
                           docstring='returns the position as byte index where the currently available data samles start')
        self.add_parameter('buffer_fill_size',
                           label='buffer fill size',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_FILLSIZEPROMILLE),
                           docstring='returns the current fill size of the on-board memory (FIFO buffer) in promille (1/1000)')

        # triggering
        self.add_parameter('available_trigger_or_mask',
                           label='available trigger or mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_AVAILORMASK),
                           docstring='bitmask, in which all bits of sources for the OR mask are set, if available')
        self.add_parameter('available_channel_or_mask',
                           label='available channel or mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_CH_AVAILORMASK0),
                           docstring='bitmask, in which all bits of sources/channels (0-31) for the OR mask are set, if available')
        self.add_parameter('available_trigger_and_mask',
                           label='available trigger and mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_AVAILANDMASK),
                           docstring='bitmask, in which all bits of sources for the AND mask are set, if available')
        self.add_parameter('available_channel_and_mask',
                           label='available channel and mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_CH_AVAILANDMASK0),
                           docstring='bitmask, in which all bits of sources/channels (0-31) for the AND mask are set, if available')
        self.add_parameter('available_trigger_delay',
                           label='available trigger delay',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_AVAILDELAY),
                           docstring='contains the maximum available delay as decimal integer value')
        self.add_parameter('available_external_trigger_modes',
                           label='available external trigger modes',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_EXT0_AVAILMODES),
                           docstring='bitmask showing all available trigger modes for external 0 (main analog trigger input)')
        self.add_parameter('external_trigger_min_level',
                           label='external trigger min level',
                           unit='mV',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_EXT_AVAIL0_MIN),
                           docstring='returns the minimum trigger level')
        self.add_parameter('external_trigger_max_level',
                           label='external trigger max level',
                           unit='mV',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_EXT_AVAIL0_MAX),
                           docstring='returns the maximum trigger level')
        self.add_parameter('external_trigger_level_step_size',
                           label='external trigger level step size',
                           unit='mV',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_EXT_AVAIL0_STEP),
                           docstring='returns the step size of the trigger level')
        self.add_parameter('available_channel_trigger_modes',
                           label='available channel trigger modes',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_CH_AVAILMODES),
                           docstring='bitmask, in which all bits of the modes for the channel trigger are set')
        self.add_parameter('trigger_counter',
                           label='trigger counter',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIGGERCOUNTER),
                           docstring='returns the number of triger events since acquisition start')
        # data per sample
        self.add_parameter('bytes_per_sample',
                           label='bytes per sample',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_MIINST_BYTESPERSAMPLE),
                           docstring='returns the number of bytes per sample')
        self.add_parameter('bits_per_sample',
                           label='bits per sample',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_MIINST_BITSPERSAMPLE),
                           docstring='returns the number of bits per sample')

        # available clock modes
        self.add_parameter('available_clock_modes',
                           label='available clock modes',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_AVAILCLOCKMODES),
                           docstring='returns a bitmask in which the bits of the clock modes are set, if available')

        # converting ADC samples to voltage values
        self.add_parameter('ADC_to_voltage',
                           label='ADC to voltage',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_MIINST_MAXADCVALUE),
                           docstring='contains the decimal code (in LSB) of the ADC full scale value')

        self.add_parameter('box_averages',
                           label='number samples in box averaging',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_BOX_AVERAGES),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_BOX_AVERAGES),
                           vals=Enum(2, 4, 8, 16, 32, 64, 128, 256),
                           docstring='Defines the number of successive samples per channel that are summed together')

        self.add_parameter('oversampling_factor',
                           label='oversampling factor',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_OVERSAMPLINGFACTOR),
                           docstring='Reads the oversampling factor')

        # add parameters for setting and getting (read/write direction
        # registers)

        self.add_parameter('enable_channels',
                           label='Channels enabled',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_CHENABLE),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_CHENABLE),
                           vals=Enum(1, 2, 4, 8, 3, 5, 9, 6, 10, 12, 15),
                           docstring='Set and get enabled channels')

        # analog input path functions
        # TODO: change Enum validator to set_parser for the numbered functions
        # if we want string inputs

        self.add_parameter('read_input_path',
                           label='read input path',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_READAIPATH),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_READAIPATH),
                           vals=Enum(0, 1, 2, 3),
                           docstring='Select the input path which is used to read out the features')

        for i in [0, 1, 2, 3]:
            self.add_parameter(f'input_path_{i}',
                               label=f'input path {i}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_PATH{i}')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_PATH{i}')),
                               vals=Enum(0, 1),
                               docstring=f'Set and get analog input path for channel {i}')

            # channel range functions
            # TODO: check the input path to set the right validator (either by
            # directly calling input_path_x() or by storing a variable)
            self.add_parameter(f'range_channel_{i}',
                               label=f'range channel {i}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_AMP{i}')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_AMP{i}')),
                               vals=Enum(200, 500, 1000, 2000,
                                         2500, 5000, 10000),
                               unit='mV',
                               docstring=f'Set and get input range of channel {i} (in mV)')

            # input termination functions
            self.add_parameter(f'termination_{i}',
                               label=f'termination {i}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_50OHM{i}')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_50OHM{i}')),
                               vals=Enum(0, 1),
                               docstring=f'if 1 sets termination to 50 Ohm, otherwise 1 MOhm for channel {i}')

            # input coupling
            ACDC_coupling_docstring = f'if 1 sets the AC coupling, otherwise sets the DC coupling for channel {i}'
            ACDC_coupling_docstring += '\nThe AC coupling only works if the card is in HF mode.'
            self.add_parameter(f'ACDC_coupling_{i}',
                               label=f'ACDC coupling {i}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_ACDC{i}')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_ACDC{i}')),
                               vals=Enum(0, 1),
                               docstring=ACDC_coupling_docstring)

            # AC/DC offset compensation
            self.add_parameter(f'ACDC_offs_compensation_{i}',
                               label=f'ACDC offs compensation {i}',
                               get_cmd=partial(self._get_compensation, i),
                               set_cmd=partial(self._set_compensation, i),
                               vals=Enum(0, 1, M4i._NO_HF_MODE),
                               docstring=(f'if 1 enables compensation, if 0 disables compensation for channel {i}. '
                                          'Value {M4i._NO_HF_MODE} means the card is not in HF mode'))

            # anti aliasing filter (Bandwidth limit)
            self.add_parameter(f'anti_aliasing_filter_{i}',
                               label=f'anti aliasing filter {i}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_FILTER{i}')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_FILTER{i}')),
                               vals=Enum(0, 1),
                               docstring=f'if 1 selects bandwidth limit, if 0 sets to full bandwidth for channel {i}')

            self.add_parameter(f'channel_{i}',
                               label=f'channel {i}',
                               unit='a.u.',
                               get_cmd=partial(self._read_channel, i))

        # acquisition modes
        # TODO: If required, the other acquisition modes can be added to the
        # validator
        self.add_parameter('card_mode',
                           label='card mode',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_CARDMODE),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_CARDMODE),
                           vals=Enum(pyspcm.SPC_REC_STD_SINGLE, pyspcm.SPC_REC_STD_MULTI,
                                     pyspcm.SPC_REC_STD_GATE, pyspcm.SPC_REC_STD_ABA,
                                     pyspcm.SPC_REC_FIFO_SINGLE, pyspcm.SPC_REC_FIFO_MULTI,
                                     pyspcm.SPC_REC_FIFO_GATE, pyspcm.SPC_REC_FIFO_ABA,
                                     pyspcm.SPC_REC_STD_AVERAGE, pyspcm.SPC_REC_STD_BOXCAR),
                           docstring='defines the used operating mode')

        # wait command
        self.add_parameter('timeout',
                           label='timeout',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TIMEOUT),
                           unit='ms',
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TIMEOUT),
                           docstring='defines the timeout for wait commands (in ms)')

        # Single acquisition mode memory, pre- and posttrigger (pretrigger = memory size - posttrigger)
        # TODO: improve the validators to make them take into account the
        # current state of the instrument
        self.add_parameter('data_memory_size',
                           label='data memory size',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_MEMSIZE),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_MEMSIZE),
                           vals=Numbers(min_value=16),
                           docstring='sets the memory size in samples per channel')
        self.add_parameter('posttrigger_memory_size',
                           label='posttrigger memory size',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_POSTTRIGGER),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_POSTTRIGGER),
                           docstring='sets the number of samples to be recorded after trigger event')

        # FIFO single acquisition length and pretrigger
        self.add_parameter('pretrigger_memory_size',
                           label='pretrigger memory size',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_PRETRIGGER),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_PRETRIGGER),
                           docstring='sets the number of samples to be recorded before trigger event')
        self.add_parameter('segment_size',
                           label='segment size',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_SEGMENTSIZE),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_SEGMENTSIZE),
                           docstring='length of segments to acquire')
        self.add_parameter('total_segments',
                           label='total segments',
                           get_cmd=partial(self._param32bit, pyspcm.SPC_LOOPS),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_LOOPS),
                           docstring='number of segments to acquire in total. Setting 0 makes it run until stopped by user')

        # clock generation
        self.add_parameter('clock_mode',
                           label='clock mode',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_CLOCKMODE),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_CLOCKMODE),
                           vals=Enum(pyspcm.SPC_CM_INTPLL, pyspcm.SPC_CM_QUARTZ2,
                                     pyspcm.SPC_CM_EXTREFCLOCK, pyspcm.SPC_CM_PXIREFCLOCK),
                           docstring='defines the used clock mode or reads out the actual selected one')
        self.add_parameter('reference_clock',
                           label='frequency of external reference clock', unit='Hz',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_REFERENCECLOCK),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_REFERENCECLOCK),
                           vals=Ints(),
                           docstring='defines the frequency of the external reference clock')

        self.add_parameter('sample_rate',
                           label='sample rate',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_SAMPLERATE),
                           unit='Hz',
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_SAMPLERATE),
                           docstring='write the sample rate for internal sample generation or read rate nearest to desired. This sample rate is rounded to an integer number.')

        self.add_parameter('exact_sample_rate',
                           label='sample rate',
                           get_cmd=self._exact_sample_rate,
                           unit='Hz',
                           docstring='return the exact sampling rate in Hz. This is an integer divisor of the maximum sample rate')

        self.add_parameter('special_clock',
                           label='special clock',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_SPECIALCLOCK),
                           unit='Hz',
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_SPECIALCLOCK),
                           docstring='Activate/Deactivate the special clock mode (lower and more sampling clock rates)')

        # triggering
        self.add_parameter('trigger_or_mask',
                           label='trigger or mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_ORMASK),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_ORMASK),
                           vals=Enum(pyspcm.SPC_TMASK_NONE, pyspcm.SPC_TMASK_SOFTWARE,
                                     pyspcm.SPC_TMASK_EXT0, pyspcm.SPC_TMASK_EXT1),
                           docstring='defines the events included within the  trigger OR mask card')
        self.add_parameter('channel_or_mask',
                           label='channel or mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_CH_ORMASK0),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_CH_ORMASK0),
                           docstring='includes the channels (0-31) within the channel trigger OR mask of the card')
        self.add_parameter('trigger_and_mask',
                           label='trigger and mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_ANDMASK),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_ANDMASK),
                           vals=Enum(pyspcm.SPC_TMASK_NONE,
                                     pyspcm.SPC_TMASK_EXT0, pyspcm.SPC_TMASK_EXT1),
                           docstring='defines the events included within the  trigger AND mask card')
        self.add_parameter('channel_and_mask',
                           label='channel and mask',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_CH_ANDMASK0),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_CH_ANDMASK0),
                           docstring='includes the channels (0-31) within the channel trigger AND mask of the card')
        self.add_parameter('trigger_delay',
                           label='trigger delay',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_DELAY),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_DELAY),
                           docstring='defines the delay for the detected trigger events')
        self.add_parameter('external_trigger_mode',
                           label='external trigger mode',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_EXT0_MODE),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_EXT0_MODE),
                           docstring='defines the external trigger mode for the external SMA connector trigger input')
        self.add_parameter('external_trigger_termination',
                           label='external trigger termination',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_TERM),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_TERM),
                           vals=Enum(0, 1),
                           docstring='A 1 sets the 50 Ohm termination, a 0 sets high impedance termination')
        self.add_parameter('external_trigger_input_coupling',
                           label='external trigger input coupling',
                           get_cmd=partial(self._param32bit,
                                           pyspcm.SPC_TRIG_EXT0_ACDC),
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_TRIG_EXT0_ACDC),
                           vals=Enum(0, 1),
                           docstring='A 1 sets the AC coupling for the external trigger, a 0 sets DC')

        for l in [0, 1]:
            self.add_parameter(f'external_trigger_level_{l}',
                               label=f'external trigger level {l}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_TRIG_EXT0_LEVEL{l}')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_TRIG_EXT0_LEVEL{l}')),
                               unit='mV',
                               docstring=f'trigger level {l} for external trigger')

        for i in [0, 1, 2, 3]:
            self.add_parameter(f'trigger_mode_channel_{i}',
                               label=f'trigger mode channel {i}',
                               get_cmd=partial(self._param32bit,
                                               getattr(pyspcm, f'SPC_TRIG_CH{i}_MODE')),
                               set_cmd=partial(self._set_param32bit,
                                               getattr(pyspcm, f'SPC_TRIG_CH{i}_MODE')),
                               docstring=f'sets the trigger mode for channel {i}')
            for l in [0, 1]:
                self.add_parameter(f'trigger_channel_{i}_level_{l}',
                                   label=f'trigger channel {i} level {l}',
                                   get_cmd=partial(self._param32bit,
                                                   getattr(pyspcm, f'SPC_TRIG_CH{i}_LEVEL{l}')),
                                   set_cmd=partial(self._set_param32bit,
                                                   getattr(pyspcm, f'SPC_TRIG_CH{i}_LEVEL{l}')),
                                   docstring=f'trigger level {l} channel {i}')

        # add parameters for setting (write only registers)

        # Buffer handling
        self.add_parameter('card_available_length',
                           label='card available length',
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_DATA_AVAIL_CARD_LEN),
                           docstring='writes the number of bytes that the card can now use for sample data transfer again')

        # General
        self.add_parameter('general_command',
                           label='general command',
                           set_cmd=partial(self._set_param32bit,
                                           pyspcm.SPC_M2CMD),
                           docstring='executes a command for the card or data transfer')

        # memsize used for simple channel read-out
        self._channel_memsize = 2**12

    # checks if requirements for the compensation get and set functions are met
    def _get_compensation(self, i):
        # if HF enabled
        if self.get(f'input_path_{i}') == 1:
            return self._param32bit(getattr(pyspcm, f'SPC_ACDC_OFFS_COMPENSATION{i}'))
        else:
            logging.info(""M4i: HF path not set, ACDC offset compensation parameter will be ignored by the M4i card\n"")
            return M4i._NO_HF_MODE

    def _set_compensation(self, i, value):
        # if HF enabled
        if self.get(f'input_path_{i}') == 1:
            self._set_param32bit(
                getattr(pyspcm, f'SPC_ACDC_OFFS_COMPENSATION{i}'), value)
        else:
            logging.warning(""M4i: HF path not set, ignoring ACDC offset compensation set\n"")

    def get_hardware_version(self):
        version_info = self._param32bit(pyspcm.SPC_PCIVERSION)
        return version_info >> 16

    def get_firmware_version(self):
        version_info = self._param32bit(pyspcm.SPC_PCIVERSION)
        return version_info & 0xFFFF

    def active_channels(self):
        """""" Return a list with the indices of the active channels """"""
        x = bin(self.enable_channels.cache())[2:][::-1]
        return [i for i in range(len(x)) if int(x[i])]

    def get_idn(self):
        return {
                'vendor': 'Spectrum_GMBH',
                'model': szTypeToName(self.get_card_type()),
                'serial': self.serial_number(),
                'firmware': self.firmware_version()
                }

    def reset(self):
        """""" Reset the card

        The pyspcm.M2CMD_CARD_RESET command is executed.
        """"""
        self.general_command(pyspcm.M2CMD_CARD_RESET)

    def convert_to_voltage(self, data, input_range):
        """"""convert an array of numbers to an array of voltages.""""""
        resolution = self.ADC_to_voltage.cache()
        return data * (input_range / resolution)

    def initialize_channels(self, channels=None, mV_range=1000, input_path=0,
                            termination=0, coupling=0, compensation=None,
                            memsize=2**12, pretrigger_memsize=16,
                            lp_filter=None):
        """""" Setup channels of the digitizer for simple readout using Parameters

        The channels can be read out using the Parameters `channel_0`,
        `channel_1`, ...

        Args:
            channels (list): list of channels to setup. mV_range, input_path,
                termination, coupling, compensation. Passed to the
                set_channel_settings function
            memsize (int): memory size to use for simple channel readout
            pretrigger_memsize (int): Pretrigger memory size to use.
                The default value used is 16, which is the smallest value
                possible.
        """"""
        allchannels = 0
        self._channel_memsize = memsize
        self._channel_pretrigger_memsize = pretrigger_memsize
        self.data_memory_size(memsize)
        if channels is None:
            channels = range(4)
        for ch in channels:
            self.set_channel_settings(ch, mV_range, input_path=input_path,
                                      termination=termination, coupling=coupling,
                                      compensation=compensation, lp_filter=lp_filter)
            allchannels = allchannels + getattr(pyspcm, 'CHANNEL%d' % ch)

        self.enable_channels(allchannels)

    def _channel_mask(self, channels=range(4)):
        """""" Return mask for specified channels

        Args:
            channels (list): list of channel indices
        Returns:
            cx (int): channel mask
        """"""
        cx = 0
        for c in channels:
            cx += getattr(pyspcm, f'CHANNEL{c}')
        return cx

    def _read_channel(self, channel, memsize=None):
        """""" Helper function to read out a channel

        Before a channel is measured all channels are enabled to ensure we can
        read out channels without the overhead of changing channels.
        """"""
        if memsize is None:
            memsize = self._channel_memsize
        posttrigger_size = memsize - self._channel_pretrigger_memsize
        mV_range = self.get(f'range_channel_{channel}')
        cx = self._channel_mask()
        self.enable_channels(cx)
        data = self.single_software_trigger_acquisition(
            mV_range, memsize, posttrigger_size)
        active = self.active_channels()
        data = data.reshape((-1, len(active)))
        value = np.mean(data[:, channel])
        return value

    def set_channel_settings(self, channel_index, mV_range, input_path,
                             termination, coupling, compensation=None,
                             lp_filter=None):
        """""" Update settings of the specified channel

        Args:
            channel_index (int): channel to update
            mV_range (float): measurement range for the channel
                (buffered path: 200, 500, 1000, 2000, 5000, or 10000)
                (HF path: 500, 1000, 2500, or 5000)
            input_path (int): input path (0: default/buffered; 1: HF/50 Ohm)
            termination (None or int): If None, then do not update the
                termination (0: 1 MOhm; 1: 50 Ohm)
            coupling (None or int): Set the ACDC_coupling.If None, then do not
                update the coupling (0: DC; 1 AC)
            compensation (None or int): If None, then do not update the
                compensation (0: off, 1: off)
            lp_filter (Optional[int]): enable (1) or disable (0) the 20 MHz low pass filter
        """"""
        # initialize
        self.set(f'input_path_{channel_index}', input_path)
        if termination is not None:
            self.set(f'termination_{channel_index}', termination)
        if coupling is not None:
            self.set(f'ACDC_coupling_{channel_index}', coupling)
        if lp_filter is not None:
            self.set(f'anti_aliasing_filter_{channel_index}', lp_filter)
        self.set(f'range_channel_{channel_index}', mV_range)  # note: set after voltage range
        # can only be used with DC coupling and 50 Ohm path (hf)
        if compensation is not None:
            self.set(f'ACDC_offs_compensation_{channel_index}', compensation)

    def set_ext0_OR_trigger_settings(self, trig_mode, termination, coupling, level0, level1=None):
        """""" Configures ext0 trigger

        Args:
            trig_mode: 0: None, 1: Positive edge, 2: Negative edge, 4: Both, 8: High, 16: Low,
                32: Enter window, 64: Leave window, 128: Inside window, 256: Outside window,
                0x01000001: Positive + re-arm, 0x01000002: Negative + re-arm
            termination: input termination 0: 1 MOhm, 1: 50 Ohm
            coupling: DC/AC input coupling (0: DC, 1: AC)
            level0: trigger level [mV]
            level1: 2nd level for re-arm and windowed modes. [mV]
        """"""
        self.channel_or_mask(0)
        self.external_trigger_mode(trig_mode)
        self.trigger_or_mask(pyspcm.SPC_TMASK_EXT0)
        self.external_trigger_termination(termination)
        self.external_trigger_input_coupling(coupling)
        self.external_trigger_level_0(level0)
        if(level1 != None):
            self.external_trigger_level_1(level1)

    # Note: the levels need to be set in bits, not voltages! (between -8191 to
    # 8191 for 14 bits)
    def set_channel_OR_trigger_settings(self, i, trig_mode, bitlevel0, bitlevel1=None):
        """"""When a channel is used for triggering it must be enabled during the
        acquisition.""""""
        self.trigger_or_mask(0)
        self.channel_or_mask(getattr(pyspcm, f'SPC_TMASK0_CH{i}'))
        self.set(f'trigger_channel_{i}_level_0', bitlevel0)
        if(bitlevel1 != None):
            self.set(f'trigger_channel_{i}_level_1', bitlevel1)
        self.set(f'trigger_mode_channel_{i}', trig_mode)  # trigger mode

    def setup_multi_recording(self, posttrigger_size, n_triggers=1,
                              pretrigger_size=None, boxcar_average=False):
        """""" Setup multi recording.

        Triggering must have been configured separately.
        Data acquisition must started with start_triggered().
        The collected data can be acquired with the function get_data().

        Args:
            posttrigger_size (int): size of data trace after triggering
            n_triggers (int): total number of triggers
            pretrigger_size (int): size of data trace before triggering
            boxcar_average (bool): use mode 'boxcar average'

        Example:
            digitizer.setup_multi_recording(size, n_triggers)
            digitizer.start_triggered()
            data = digitizer.get_data()
            # do another measurement with same settings
            digitizer.start_triggered()
            data = digitizer.get_data()

        """"""
        if boxcar_average:
            if self.oversampling_factor() != 1:
                raise Exception('Averaging with BOXCAR can only be used with '
                                'maximum sample rate')
            self.card_mode(pyspcm.SPC_REC_STD_BOXCAR)
        else:
            self.card_mode(pyspcm.SPC_REC_STD_MULTI)

        if not pretrigger_size:
            pretrigger_size = self.pretrigger_memory_size()
        posttrigger_size = self._hw_memsize(posttrigger_size)
        seg_size = self._hw_memsize(posttrigger_size+pretrigger_size)
        memsize = self._hw_memsize(n_triggers * seg_size)
        self.data_memory_size(memsize)
        self.segment_size(seg_size)
        self.posttrigger_memory_size(posttrigger_size)

    def start_triggered(self):
        """""" Starts triggered acquisition
        """"""
        self.general_command(pyspcm.M2CMD_CARD_START
                             | pyspcm.M2CMD_CARD_ENABLETRIGGER)

    def get_data(self):
        """""" Reads measurement data from the digitizer.

        The data acquisition must have been started by start_acquisition() or
        start_triggered().

        Returns:
            2D array with voltages per channel in V.
        """"""
        active_channels = self.active_channels()
        memsize = self.data_memory_size.cache()
        numch = len(active_channels)

        res = self.wait_ready()
        if res == pyspcm.ERR_TIMEOUT:
            logging.error(f'Timeout waiting for data (timeout: {self.timeout()} ms)')
        elif res != pyspcm.ERR_OK:
            raise Exception(f'Error waiting for data: (0x{res:04x})')

        try:
            if self.card_mode() == pyspcm.SPC_REC_STD_BOXCAR:
                box_averages = self.box_averages()
                raw_data = self._transfer_buffer_numpy(memsize, numch, bytes_per_sample=4)
            else:
                box_averages = 1
                raw_data = self._transfer_buffer_numpy(memsize, numch)
        finally:
            self._stop_acquisition()

        resolution = self.ADC_to_voltage.cache()
        voltages = np.zeros((numch, len(raw_data)//numch))
        for i,ch in enumerate(active_channels):
            mV_range = self.get(f'range_channel_{ch}')
            voltages[i,:] = raw_data[i::numch] * (mV_range / 1000 / resolution / box_averages)
        return voltages


    def _stop_acquisition(self):

        # close acquisition
        self.general_command(pyspcm.M2CMD_DATA_STOPDMA)

        # invalidate buffer
        self._invalidate_buf(pyspcm.SPCM_BUF_DATA)

        self.general_command(pyspcm.M2CMD_CARD_STOP)

    # TODO: if multiple channels are used at the same time, the voltage conversion needs to be updated
    # TODO: the data also needs to be organized nicely (currently it
    # interleaves the data)
    def multiple_trigger_acquisition(self, mV_range, memsize, seg_size, posttrigger_size):
        """""" Acquire traces with the SPC_REC_STD_MULTI mode

        This method does not update the triggering properties.

        Args:
            mV_range (float): Input range used for coversion to voltage
            memsize (int): Size of total buffer to acquire
            seg_size (int): Size of segments to record
            posttrigger_size (int): Size of the if post trigger buffer
        Returns:
            Array with measured voltages

        """"""
        self.card_mode(pyspcm.SPC_REC_STD_MULTI)  # multi

        self.data_memory_size(memsize)
        self.segment_size(seg_size)
        self.posttrigger_memory_size(posttrigger_size)
        numch = self._num_channels()

        self.general_command(pyspcm.M2CMD_CARD_START | pyspcm.M2CMD_CARD_ENABLETRIGGER)
        self.wait_ready()

        # convert transfer data to numpy array
        try:
            output = self._transfer_buffer_numpy(memsize, numch, bytes_per_sample=2)
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(output, mV_range / 1000)

        return voltages

    def start_acquisition(self, mV_range, memsize, posttrigger_size=None, verbose=0):
        """""" Start data acquisition of a single data trace

        The resulting data can be acquired with the function retrieve_data.

        Args:
            mV_range (float): range in mV
            memsize (int): size of data trace
            posttrigger_size (int or None): size of data trace after triggering
        Returns:
            trace as a dict. Data concerning the trace
        """"""
        self.card_mode(pyspcm.SPC_REC_STD_SINGLE)  # single

        self.data_memory_size(memsize)
        if posttrigger_size is None:
            posttrigger_size = memsize - 16
        self.posttrigger_memory_size(posttrigger_size)
        numch = self._num_channels()

        # start/enable trigger/wait ready
        self.trigger_or_mask(pyspcm.SPC_TMASK_SOFTWARE)  # software trigger
        self.general_command(pyspcm.M2CMD_CARD_START |
                             pyspcm.M2CMD_CARD_ENABLETRIGGER)

        return {'memsize': memsize, 'numch': numch, 'mV_range': mV_range}

    def _transfer_buffer_numpy(self, memsize: int, numch: int, bytes_per_sample=2) -> np.ndarray:
        """""" Transfer buffer to numpy array

        Args:
            memsize (int): number of samples to transfer
            numch (int): number of channels
            bytes_per_sample (int): specifies the datatype. 2 for int16, 4 for int32
        Returns:
            array: transfered data

        """"""
        # setup software buffer
        sample_ctype: Union[Type[ct.c_int16], Type[ct.c_int32]]
        if bytes_per_sample == 2:
            sample_ctype = ct.c_int16
        elif bytes_per_sample == 4:
            sample_ctype = ct.c_int32
        else:
            raise ValueError('bytes_per_sample should be 2 or 4')

        ctype_buffer_type = sample_ctype * memsize * numch
        data_buffer = (ctype_buffer_type)()
        data_pointer = ct.cast(data_buffer, ct.c_void_p)

        # data acquisition
        self._def_transfer64bit(
            pyspcm.SPCM_BUF_DATA, pyspcm.SPCM_DIR_CARDTOPC, 0, data_pointer, 0, bytes_per_sample * memsize * numch)
        self.general_command(pyspcm.M2CMD_DATA_STARTDMA | pyspcm.M2CMD_DATA_WAITDMA)
        if self._last_set_result != pyspcm.ERR_OK:
            res = self._last_set_result
            raise Exception(f'Error transferring data: {_errormsg_dict[res]} (0x{res:04x})')

        # convert buffer to numpy array
        # this does not typecheck with numpy 1.22 should be updated
        # by someone with access to test on the real data.
        output = np.frombuffer(data_buffer, dtype=sample_ctype) # type: ignore[call-overload]

        return output

    def retrieve_data(self, trace):
        """""" Retrieve data from the digitizer

        The data acquisition must have been started by start_acquisition.

        Args:
            trace (dict): dictionary with acquisition settings.

        Returns:
            voltages (array)
        """"""
        memsize = trace['memsize']
        numch = trace['numch']
        mV_range = trace['mV_range']

        self.wait_ready()
        try:
            output = self._transfer_buffer_numpy(memsize, numch)
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(output, mV_range / 1000)

        return voltages

    def single_trigger_acquisition(self, mV_range, memsize, posttrigger_size):
        """""" Acquire traces with the SPC_REC_STD_SINGLE mode

        This method does not update the triggering properties.

        Args:
            mV_range (float): Input range used for coversion to voltage
            memsize (int): Size of total buffer to acquire
            posttrigger_size (int): Size of the if post trigger buffer
        Returns:
            Array with measured voltages
        """"""
        self.card_mode(pyspcm.SPC_REC_STD_SINGLE)

        # set memsize and posttrigger
        self.data_memory_size(memsize)
        self.posttrigger_memory_size(posttrigger_size)
        numch = self._num_channels()

        self.general_command(pyspcm.M2CMD_CARD_START | pyspcm.M2CMD_CARD_ENABLETRIGGER)
        self.wait_ready()

        try:
            output = self._transfer_buffer_numpy(memsize, numch)
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(output, mV_range / 1000)

        return voltages

    def gated_trigger_acquisition(self, mV_range, memsize, pretrigger_size, posttrigger_size):
        """"""doesn't work completely as expected, it triggers even when the
        trigger level is set outside of the signal range it also seems to
        additionally acquire some wrong parts of the wave, but this also exists
        in SBench6, so it is not a problem caused by this code.""""""

        self.card_mode(pyspcm.SPC_REC_STD_GATE)  # gated

        # set memsize and posttrigger
        self.data_memory_size(memsize)
        self.pretrigger_memory_size(pretrigger_size)
        self.posttrigger_memory_size(posttrigger_size)
        numch = self._num_channels()

        self.general_command(pyspcm.M2CMD_CARD_START | pyspcm.M2CMD_CARD_ENABLETRIGGER )
        self.wait_ready()

        try:
            output = self._transfer_buffer_numpy(memsize, numch)
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(output, mV_range / 1000)

        return voltages

    def single_software_trigger_acquisition_boxcar(self, mV_range, memsize, posttrigger_size):
        """""" Acquire a single data trace with boxcar averaging

        Args:
            mV_range (float): range in mV
            memsize (int): size of data trace
            posttrigger_size (int): size of data trace after triggering
        Returns:
            voltages (array)
        """"""
        self.card_mode(pyspcm.SPC_REC_STD_BOXCAR)  # single

        self.segment_size(memsize)
        self.posttrigger_memory_size(posttrigger_size)
        self.data_memory_size(memsize * self.box_averages())
        numch = self._num_channels()

        self.trigger_or_mask(pyspcm.SPC_TMASK_SOFTWARE)
        self.general_command(pyspcm.M2CMD_CARD_START | pyspcm.M2CMD_CARD_ENABLETRIGGER)
        self.wait_ready()

        try:
            output = self._transfer_buffer_numpy(memsize, numch, bytes_per_sample=4)
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(
            output, mV_range / 1000) / self.box_averages()

        return voltages

    def single_software_trigger_acquisition(self, mV_range, memsize, posttrigger_size):
        """""" Acquire a single data trace

        Args:
            mV_range (float): range in mV
            memsize (int): size of data trace
            posttrigger_size (int): size of data trace after triggering
        Returns:
            voltages (array)
        """"""
        self.card_mode(pyspcm.SPC_REC_STD_SINGLE)  # single

        self.data_memory_size(memsize)
        self.posttrigger_memory_size(posttrigger_size)
        numch = self._num_channels()

        # start/enable trigger/wait ready
        self.trigger_or_mask(pyspcm.SPC_TMASK_SOFTWARE)  # software trigger
        self.general_command(pyspcm.M2CMD_CARD_START | pyspcm.M2CMD_CARD_ENABLETRIGGER)
        self.wait_ready()

        try:
            output = self._transfer_buffer_numpy(memsize, numch)
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(output, mV_range / 1000)

        return voltages

    def _check_buffers(self):
        """""" Check validity of buffers

        See: manual section ""Limits of pre trigger, post trigger, memory size""
        """"""

        pretrigger = self.data_memory_size() - self.posttrigger_memory_size()
        if pretrigger > 2**13:
            raise Exception('value of SPC_PRETRIGGER is invalid')

    def _num_channels(self):
        """""" Return number of channels that is enabled """"""
        return bin(self.enable_channels()).count(""1"")

    def wait_ready(self) -> int:
        """"""  Wait for the M4i card to be ready using M2CMD_CARD_WAITREADY
        Returns:
               Return code of the M4i general command used to wait for the card to be ready
        """"""
        command_result = pyspcm.spcm_dwSetParam_i32(self.hCard, pyspcm.SPC_M2CMD, int(pyspcm.M2CMD_CARD_WAITREADY))
        return command_result

    def blockavg_hardware_trigger_acquisition(self, mV_range, nr_averages=10,
                                              verbose=0, post_trigger=None):
        """""" Acquire data using block averaging and hardware triggering

        To read out multiple channels, use `initialize_channels`. This methods updates
        the external_trigger_mode and trigger_or_mask parameters.

        Args:
            mV_range (float)
            nr_averages (int): number of averages to take
            verbose (int): output level
            post_trigger (None or int): optional size of post_trigger buffer
        Returns:
            An array of voltages. If multiple channels are read,
            then the data is interleaved
        """"""
        # self.available_card_modes()
        memsize = self.data_memory_size()
        self.segment_size(memsize)

        if post_trigger is None:
            pre_trigger = min(2**13, 16 * int((memsize / 2) // 16))
            post_trigger = memsize - pre_trigger
        else:
            pre_trigger = memsize - post_trigger
        self.posttrigger_memory_size(post_trigger)
        self.pretrigger_memory_size(pre_trigger)

        self._check_buffers()

        if verbose:
            print('blockavg_hardware_trigger_acquisition: errors %s' %
                  (self.get_error_info32bit(), ))
            print('blockavg_hardware_trigger_acquisition: card_status %s' %
                  (self.card_status(), ))

        if nr_averages == 1:
            # special case since SPC_AVERAGES cannot handle 1
            if verbose:
                print(
                    'blockavg_hardware_trigger_acquisition: pass to single_trigger_acquisition')
            return self.single_trigger_acquisition(mV_range=mV_range, memsize=memsize, posttrigger_size=post_trigger)

        self.card_mode(pyspcm.SPC_REC_STD_AVERAGE)
        self._set_param32bit(pyspcm.SPC_AVERAGES, nr_averages)
        numch = self._num_channels()

        self.external_trigger_mode(pyspcm.SPC_TM_POS)
        self.trigger_or_mask(pyspcm.SPC_TMASK_EXT0)
        self.general_command(pyspcm.M2CMD_CARD_START | pyspcm.M2CMD_CARD_ENABLETRIGGER)
        self.wait_ready()

        try:
            output = self._transfer_buffer_numpy(memsize, numch, bytes_per_sample=4) / nr_averages
        finally:
            self._stop_acquisition()

        voltages = self.convert_to_voltage(output, mV_range / 1000)

        return voltages

    def close(self):
        """"""Close handle to the card.""""""
        if self.hCard is not None:
            pyspcm.spcm_vClose(self.hCard)
            self.hCard = None
        super().close()

    def get_card_type(self, verbose=0):
        """"""Read card type.""""""
        # read type, function and sn and check for D/A card
        lCardType = pyspcm.int32(0)
        pyspcm.spcm_dwGetParam_i32(
            self.hCard, pyspcm.SPC_PCITYP, pyspcm.byref(lCardType))
        if verbose:
            print('card_type: %s' % szTypeToName(lCardType.value))
        return (lCardType.value)

    # only works if the error was not caused by running the entire program
    # (and therefore making a new M4i object)
    def get_error_info32bit(self, verbose=False):
        """"""Read an error from the error register.

        Args:
            verbose (bool): If True then print the error message to stdout
        Returns:
            errorreg (int)
            errorvalue (int)
        """"""
        dwErrorReg = pyspcm.uint32(0)
        lErrorValue = pyspcm.int32(0)

        if verbose:
            buffer = (ct.c_uint8 * pyspcm.ERRORTEXTLEN)()
            pyspcm.spcm_dwGetErrorInfo_i32(self.hCard, pyspcm.byref(
                dwErrorReg), pyspcm.byref(lErrorValue), buffer)
            bb = (bytearray(buffer)).decode().strip('\x00')
            print('get_error_info32bit: %d %d: %s' %
                  (dwErrorReg.value, lErrorValue.value, bb))
        else:
            pyspcm.spcm_dwGetErrorInfo_i32(self.hCard, pyspcm.byref(
                dwErrorReg), pyspcm.byref(lErrorValue), None)
        return (dwErrorReg.value, lErrorValue.value)

    def _param64bit(self, param):
        """"""Read a 64-bit parameter from the device.""""""
        data = pyspcm.int64(0)
        pyspcm.spcm_dwGetParam_i64(self.hCard, param, pyspcm.byref(data))
        return (data.value)

    def _param32bit(self, param):
        """"""Read a 32-bit parameter from the device.""""""
        data = pyspcm.int32(0)
        pyspcm.spcm_dwGetParam_i32(self.hCard, param, pyspcm.byref(data))
        return (data.value)

    def _set_param32bit(self, param, value):
        """""" Set a 32-bit parameter on the device.""""""
        value = int(value)  # convert floating point to int if necessary
        res = pyspcm.spcm_dwSetParam_i32(self.hCard, param, value)
        self._last_set_result = res
        if res == pyspcm.ERR_TIMEOUT:
            logging.warning('SetParam timeout')
        elif res != pyspcm.ERR_OK:
            raise Exception(f'SetParam failed. param:0x{param:08X} value:0x{value:08X}: '
                            f'result: {_errormsg_dict[res]} (0x{res:08X})')

    def _invalidate_buf(self, buf_type):
        """"""Invalidate device buffer.""""""
        pyspcm.spcm_dwInvalidateBuf(self.hCard, buf_type)

    def _def_transfer64bit(self, buffer_type, direction, bytes_till_event, data_pointer, offset, buffer_length):
        """"""Define a 64-bit transer between the device and the computer.""""""
        pyspcm.spcm_dwDefTransfer_i64(
            self.hCard, buffer_type, direction, bytes_till_event, data_pointer, offset, buffer_length)

    def _exact_sample_rate(self):
        """""" Return exact sampling rate as a floating point number """"""
        sample_rate_hz = self.sample_rate()
        max_sample_rate = self.get_max_sample_rate()
        factor = int(np.round(max_sample_rate/sample_rate_hz))
        return max_sample_rate/factor

    def get_max_sample_rate(self, verbose=0):
        """"""Return max sample rate.""""""
        # read type, function and sn and check for D/A card
        value = self._param32bit(pyspcm.SPC_PCISAMPLERATE)
        if verbose:
            print('max_sample_rate: %s' % (value))
        return value

    def get_card_memory(self, verbose=0):
        data = pyspcm.int64(0)
        pyspcm.spcm_dwGetParam_i64(
            self.hCard, pyspcm.SPC_PCIMEMSIZE, pyspcm.byref(data))
        if verbose:
            print('card_memory: %s' % (data.value))
        return (data.value)

    def _hw_memsize(self, size):
        return (size + 15) // 16 * 16
"
126,301.0,US,"
The M5180 is a 2-port, 18 GHz Vector Network Analyzer that delivers metrology-grade performance in a more economical package that excludes a number of advanced features",M 5180,112.0,"**Copper Mountain Technologies** develops innovative RF test and measurement solutions for engineers worldwide that enable engineers to extend their reach.

",Qcodes Community,Coppermountain,"[OrderedDict([('id', 'atthotVCDq0T4DOTa'), ('width', 1637), ('height', 1279), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/SwM3zxiNcQK1aDs58vQZ_g/YUmgnG-5ApstV5gGUntXXH_dmH1sdeBMaqRd0RcYoojpPk_p7ff80GDyhY2OmDenM51cUqa0tTFYvwR_jcjaJXyoIzKlxr6jubU92dQ5gCw/_wAy0yovlz4Wqb6uCKmpMk3PtYz_mL8MCxQYSHMX0Eo'), ('filename', 'LOGO.webp'), ('size', 59418), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GHvEsgkHrJmVXws9FF26EQ/IsE8yJk0qC5GN1LG4EKts88mxn5AjKxpTRdsARmQ1gx0sGYh1BHDCNJlkBNlz1R5K8k-lofN7oaQr9w4Uy8xZjwyGsinvNQGBJ0x6TQ_rNs/3DGWNQbn4Oe0AuWNTRl1ixOL39OqAcQlVHJia3OSlMU'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ho5hLqlF5SULTmsFLfUWzA/OExQZfE1Ph_YYo9j-W9hroJf11rChpWhv4jyAgGVNWl-3SMkXLEK1BtbqzE_19foT7gjsUqbBsWikT1qmHxd6pnnA4MJ2wtpQp8ZT-dE4mE/ugrNSzzmjIVrSx3TgDsSBYq92oXqgLIdgSMN4ghurHU'), ('width', 655), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/f5RL5c1E2NdVjP-PfV_UVw/cU9bLpXQ1MRCJ4P6ZNyEtqYkY9JorOh5XdsKrSBRNkDp29SAKt_6wRXGfIRBctMKlg6pHfVplFLYDqx20dTuNaXXBE4iq0Bv-tA9J5kImy8/nDj4ywr8w0fbxA1F9bLdoS019KvRR9z52eSyXK5rGHg'), ('width', 3000), ('height', 3000)]))]))])]",https://coppermountaintech.com/,Write a Python script that uses Qcodes Community to connect to a M5180 2-Port 18 GHz Analyzer Network Analyzer,https://en.wikipedia.org/wiki/Network_analyzer_(electrical),['Network Analyzer'],"A vector network analyzer achieves highly accurate measurements by correcting for the systematic errors in the instrument, the characteristics of cables, adapters and test fixtures",M5180 2-Port 18 GHz Analyzer,https://coppermountaintech.com/m-series-data-sheet/,"[OrderedDict([('id', 'attegotigtZ5pNULK'), ('width', 450), ('height', 350), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Rxf7rr-IUBVX6y99UpR6sg/bZh3FjYt18IAs8XqejzH3jTP_wUDBaIRdsLdsAcer51GIARlbI9l1UEaJWVtQ0BT0F2m2b5W4h3WXuYcjyFuWaGbu0ql2j5GiOOBxEz8vAQ/l152E19k8wMDmNlYIGZHq0smloJ4JFV_h68zclFQhNo'), ('filename', 'M5180-left-450x350.png'), ('size', 86498), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/3jtjYCAlgRQtDioY477d2A/qNXCozDLc4AGQUlwtTQjnsFg4nvKLrKz8OXBxqveYO8ytFrU7z_cp4FtExKKdQ4gZa0JCYiS4sxvT2UdikrmUg/stkywUwyCxmm_pos00fVBM-Z3x1xz-DJr3n0XeCEDHg'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0ZBnqv_JA0ggwWF32oXkdw/u_qJJRZx9izBF4Ag3FZPYOl5L8gNvgfvSjJA5K6iLicivGAs_Mn3DxPhGVWimSv1rXic6k0h4rM0Ib7cwaiv2g/kIjZgTkFVf7u84VAfdZ0BbZYPY7S_e2siLfe489XiPE'), ('width', 450), ('height', 350)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KNwhdO8cwbJvOpLXWt9NSg/SMlNFnihpcmnMBoEcnBy5XIVHwB3fNjYwR28zYO1QMxyzfAVBIsna6BCXx-QjCKgMZ8sw3Eybq6EydIb4TkXhQ/-j0R-cwPufj36w98-NSJSHCiu6rd2poHdIg5GrRQ9lY'), ('width', 3000), ('height', 3000)]))]))])]",https://coppermountaintech.com/vna/m5180-2-port-18-ghz-analyzer/,,https://qcodes.github.io/Qcodes_contrib_drivers/_modules/qcodes_contrib_drivers/drivers/CopperMountain/M5180.html,,,,,
127,1657.0,"Austin, Texas, USA",,Rfsg,374.0,"A producer of automated test equipment and virtual instrumentation software. Common applications include data acquisition, instrument control and machine vision. 
",Qcodes Community,National Instruments,"[OrderedDict([('id', 'attXAVi8mGWUwkEk7'), ('width', 960), ('height', 541), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/buqaMhTGWSsLDsPp_ibFaQ/De8HjydUx3EOCX_p1f2SSDo9dGCp11ixF2oTBsR7CR6yGYXYE_XR4FWNSn3MqZ20E_25rrfDoA8lE2RfAkuP7Q/mRTYDKwu5YneGKzi9In5jj7Q0Jc2rufjx4bGgEHckdg'), ('filename', '0x0.webp'), ('size', 3600), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Pv0WHzZMcUe18sDTIk-6mg/jr5uhXQ9KZen3aLRHNCAvPFX560knZg5OC3GuZHWWZUlwbT5OU_POa-kuo1PD5qEWl5eEs1dnPwCnMthpfYMxWBP2ALfrZR8zjpqzA1TrFQ/MbyuehtfHbxyhnrazXO_aVtHoiJ-YxS2aY_z_AlOlI4'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/H2ohCz7JKiucuuY1yKqARA/PC2AnJ8K6bupw239v_vXHNw2Bw02LZLYgFDZExIJ_IYgHKZF3aKphU6VgFnEXdi_JSVfBWTNow1CPi7pJroA801RTFAurSQsjnCQd46i1tI/iQUX1GjeerVvwDnChxusHAS0iRltSIlZ9OIhT6aWeyI'), ('width', 909), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FbZiry0wuZILUwoQONwY7w/TPig8INn4HxQab3cUodGEZ-LmxYwwAgZ-P2q9uDSN0Ldk6LIqGUZwq8U0ONnHe4UeVnJel-tkU0whlEnSfHvMB2WbUcP1DTtJGt-UvawHkI/mGxqe-xjeAIUQCHVOUg5_cDcuiJu0KrjzJiiqkUQRMI'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca.html,Write a Python script that uses Qcodes Community to connect to a RFSG RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",RFSG,,,,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/NationalInstruments/RFSG.py,,,,,,"import logging
from typing import Optional
from functools import partial

from qcodes.utils.helpers import create_on_off_val_mapping as on_off_map
from qcodes.utils.validators import Numbers

from .visa_types import (
        ViString, ViAttr, ViSession, ViReal64, ViBoolean, ViInt32,
        )
from .dll_wrapper import AttributeWrapper, NamedArgType
from .ni_dll_instrument import NIDLLInstrument

# Constants used for querying attributes.
# These can be found in the RFSG C API documentation, see below.
NIRFSG_ATTR_INSTRUMENT_FIRMWARE_REVISION = AttributeWrapper(ViAttr(1050510), ViString)
NIRFSG_ATTR_INSTRUMENT_MANUFACTURER      = AttributeWrapper(ViAttr(1050511), ViString)
NIRFSG_ATTR_INSTRUMENT_MODEL             = AttributeWrapper(ViAttr(1050512), ViString)
NIRFSG_ATTR_SPECIFIC_DRIVER_VENDOR       = AttributeWrapper(ViAttr(1050513), ViString)
NIRFSG_ATTR_SPECIFIC_DRIVER_REVISION     = AttributeWrapper(ViAttr(1050551), ViString)
NIRFSG_ATTR_SERIAL_NUMBER                = AttributeWrapper(ViAttr(1150026), ViString)
NIRFSG_ATTR_FREQUENCY                    = AttributeWrapper(ViAttr(1250001), ViReal64)
NIRFSG_ATTR_POWER_LEVEL                  = AttributeWrapper(ViAttr(1250002), ViReal64)
NIRFSG_ATTR_OUTPUT_ENABLED               = AttributeWrapper(ViAttr(1250004), ViBoolean)
NIRFSG_ATTR_REF_CLOCK_SOURCE             = AttributeWrapper(ViAttr(1150001), ViString)
NIRFSG_ATTR_ANALOG_MODULATION_TYPE       = AttributeWrapper(ViAttr(1150032), ViInt32)
NIRFSG_ATTR_ANALOG_MODULATION_AM_SENSITIVITY = AttributeWrapper(ViAttr(1150167), ViReal64)
NIRFSG_ATTR_PULSE_MODULATION_ENABLED     = AttributeWrapper(ViAttr(1250051), ViBoolean)

logger = logging.getLogger(__name__)


# Name mapping for analog modulation mode.
# These can be found in the NI RFSG header file, found by default in
# C:\Program Files (x86)\IVI Foundation\IVI\Include\niRFSG.h
# or in the online documentation: https://zone.ni.com/reference/en-XX/help/371025V-01/rfsgproperties/pnirfsg_anlgmod.type/
ANALOG_MOD_NAME_MAP = {
    ""none"": 0, # NIRFSG_VAL_NONE
    ""FM"": 2000, # NIRFSG_VAL_FM
    ""PM"": 2001, # NIRFSG_VAL_PM
    ""AM"": 2002, # NIRFSG_VAL_AM
}


CLK_SRC_MAP = {
    ""onboard"": ""OnboardClock"",
    ""clk_in"": ""ClkIn"",
    ""ref_in"": ""RefIn"",
    ""pxi_clk"": ""PXI_CLK"",
    ""ref_in_2"": ""RefIn2"",
    ""pxi_clk_master"": ""PXI_ClkMaster"",
}


class NationalInstruments_RFSG(NIDLLInstrument):
    r""""""
    This is the QCoDeS driver for National Instruments RF signal generator
    devices based on the NI-RFSG driver. As of NI-RFSG version 18.1, the
    supported devices are
    PXI-5610,  PXI-5650,  PXI-5651,  PXI-5652,  PXI-5670,  PXI-5671, PXIe-5611,
    PXIe-5644, PXIe-5645, PXIe-5646, PXIe-5650, PXIe-5651, PXIe-5652,
    PXIe-5653, PXIe-5654, PXIe-5672, PXIe-5673, PXIe-5673E, PXIe-5820,
    PXIe-5840.

    Documentation for the NI-RFSG C API can be found by default in the
    folder C:\Users\Public\Documents\National Instruments\NI-RFSG\Documentation

    Only very basic functionality is implemented.

    Tested with

    - PXIe-5654

    Args:
        name: Name for this instrument
        resource: Identifier for this instrument in NI MAX.
        dll_path: path to the NI-RFSG library DLL. If not provided, use the
            default location,
            ``C:\Program Files\IVI Foundation\IVI\bin\NiRFSG_64.dll``.
        id_query: whether to perform an ID query on initialization
        reset_device: whether to reset the device on initialization
    """"""

    # default DLL location
    dll_path = r""C:\Program Files\IVI Foundation\IVI\bin\NiRFSG_64.dll""
    # C:\Program Files (x86)\IVI Foundation\IVI\bin\NiRFSG.dll for 32-bit

    def __init__(self, name: str, resource: str,
                 dll_path: Optional[str] = None,
                 id_query: bool = False,
                 reset_device: bool = False,
                 **kwargs):

        super().__init__(name=name, resource=resource,
                         dll_path=dll_path or self.dll_path,
                         lib_prefix=""niRFSG"", **kwargs)

        # Wrap DLL calls
        self.wrapper.Initiate = self.wrapper.wrap_dll_function_checked(  # type: ignore[attr-defined]
                name_in_library=""Initiate"",
                argtypes=[NamedArgType(""vi"", ViSession)]
                )

        self.wrapper.Abort = self.wrapper.wrap_dll_function_checked(  # type: ignore[attr-defined]
                name_in_library=""Abort"",
                argtypes=[NamedArgType(""vi"", ViSession)])

        self.wrapper.ConfigureRF = self.wrapper.wrap_dll_function_checked(  # type: ignore[attr-defined]
                name_in_library=""ConfigureRF"",
                argtypes=[
                    NamedArgType(""vi"", ViSession),
                    NamedArgType(""frequency"", ViReal64),
                    NamedArgType(""powerLevel"", ViReal64),
                    ]
                )

        self.add_parameter(name=""frequency"",
                           unit=""Hz"",
                           get_cmd=partial(self.get_attribute,
                                           NIRFSG_ATTR_FREQUENCY),
                           set_cmd=self._set_frequency,
                           )

        self.add_parameter(name=""power_level"",
                           unit=""dBm"",
                           label=""power level"",
                           get_cmd=partial(self.get_attribute,
                                           NIRFSG_ATTR_POWER_LEVEL),
                           set_cmd=self._set_power_level,
                           )

        self.add_parameter(name=""output_enabled"",
                           label=""Output enabled"",
                           get_cmd=partial(self.get_attribute,
                                           NIRFSG_ATTR_OUTPUT_ENABLED),
                           set_cmd=partial(self.set_attribute,
                                           NIRFSG_ATTR_OUTPUT_ENABLED),
                           val_mapping=on_off_map(on_val=True, off_val=False),
                           initial_value=False,
                           )

        self.add_parameter(name=""pulse_mod_enabled"",
                           label=""Pulse modulation enabled"",
                           get_cmd=partial(self.get_attribute,
                                           NIRFSG_ATTR_PULSE_MODULATION_ENABLED
                                           ),
                           set_cmd=partial(self.set_attribute,
                                           NIRFSG_ATTR_PULSE_MODULATION_ENABLED
                                           ),
                           val_mapping=on_off_map(on_val=True, off_val=False),
                           initial_value=False,
                           )

        self.add_parameter(name=""analog_mod_type"",
                           label=""Analog modulation type"",
                           docstring=""Specifies the analog modulation format ""
                                     ""to use. FM = frequency modulation, PM = ""
                                     ""phase modulation, AM = amplitude ""
                                     ""modulation. Set to 'none' to disable ""
                                     ""analog modulation."",
                           get_cmd=partial(self.get_attribute,
                                           NIRFSG_ATTR_ANALOG_MODULATION_TYPE),
                           set_cmd=partial(self.set_attribute,
                                           NIRFSG_ATTR_ANALOG_MODULATION_TYPE),
                           val_mapping=ANALOG_MOD_NAME_MAP,
                           )

        self.add_parameter(name=""amplitude_mod_sensitivity"",
                           label=""Amplitude modulation sensitivity"",
                           docstring=""The modulation signal sent to AM IN is ""
                                     ""scaled by this percentage before ""
                                     ""multiplying the carrier wave."",
                           unit=""%/V"",
                           get_cmd=partial(
                                self.get_attribute,
                                NIRFSG_ATTR_ANALOG_MODULATION_AM_SENSITIVITY
                           ),
                           set_cmd=partial(
                                self.set_attribute,
                                NIRFSG_ATTR_ANALOG_MODULATION_AM_SENSITIVITY
                           ),
                           vals=Numbers(0, 100),
                           )

        self.add_parameter(name=""clock_source"",
                           label=""Reference clock source"",
                           docstring=""Specify the reference clock source for ""
                           ""the device. See the ``vals`` attribute for valid ""
                           ""values.\n\nThe values 'ref_in_2' and ""
                           ""'pxi_clk_master' are valid for PXIe-5840 with ""
                           ""PXIe-5653. For further details, see the NI-RFSG ""
                           ""documentation."",
                           get_cmd=partial(self.get_attribute,
                                           NIRFSG_ATTR_REF_CLOCK_SOURCE),
                           set_cmd=partial(self.set_attribute,
                                           NIRFSG_ATTR_REF_CLOCK_SOURCE),
                           val_mapping=CLK_SRC_MAP,
                           )

        self.initiate()
        self.connect_message()

    def initiate(self):
        """"""
        Initiate signal generation. This causes the NI-RFSG device to leave
        the Configuration state.
        """"""
        self.wrapper.Initiate(self._handle)

    def abort(self):
        """"""
        Stop signal generation and return to the Configuration state.
        """"""
        self.wrapper.Abort(self._handle)

    def _configure_rf(self, frequency: float, power_level: float,
                      initiate: bool):
        """"""
        NI-RFSG devices can only set both the frequency and power level
        simultatneously. Convenience methods are defined below for setting
        them individually.

        NOTE: PXI-5670/5671 and PXIe-5672 devices must be in the Configuration
        state before calling this function (by calling abort()), that is not
        checked here.

        Args:
            frequency: frequency in Hz
            power_level: power level in dBm
            initiate: if True, call self.initiate after configuring, which
                starts RF output
        """"""
        self.wrapper.ConfigureRF(  # type: ignore[attr-defined]
            self._handle,
            ViReal64(frequency),
            ViReal64(power_level)
        )

        if initiate:
            self.initiate()

    def _set_frequency(self, frequency: float, initiate: bool = False):
        power_level = self.get_attribute(NIRFSG_ATTR_POWER_LEVEL)
        self._configure_rf(frequency, power_level, initiate)

    def _set_power_level(self, power_level: float, initiate: bool = False):
        frequency = self.get_attribute(NIRFSG_ATTR_FREQUENCY)
        self._configure_rf(frequency, power_level, initiate)

    @property
    def vendor(self) -> str:
        return self.get_attribute(NIRFSG_ATTR_SPECIFIC_DRIVER_VENDOR)

    @property
    def model(self) -> str:
        return self.get_attribute(NIRFSG_ATTR_INSTRUMENT_MODEL)

    @property
    def serial(self) -> str:
        return self.get_attribute(NIRFSG_ATTR_SERIAL_NUMBER)

    @property
    def firmware(self) -> str:
        return self.get_attribute(NIRFSG_ATTR_INSTRUMENT_FIRMWARE_REVISION)

    def get_idn(self):
        return {
                ""vendor"": self.vendor,
                ""model"": self.model,
                ""serial"": self.serial,
                ""firmware"": self.firmware
        }

# class NationalInstruments_RFSG


# shorthand alias for the above
NI_RFSG = NationalInstruments_RFSG
"
132,5.0,USA,"The LDA-302P-HN Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +33 dBm, and offers frequency coverage of 10 to 3,000 MHz. It has an attenuation range of 31.5 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-302P-HN ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-302P-HN,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attAXR8c8ki57a3nQ'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aeU8msYTt6OQ1Gp6SY5dYg/2pXCcWCvEWq-1wBqaeqHyWXMn7GFQ-8Ku0ixYp9Wj4-ZCZQ241oAd__eZrAr1mBvj9BWTxxCh7ZIgmWtQCtbFzo02dJ3YpYYG88NGIu5uOyenZSbmaaGYjllPaEgRqi1/KbVbNB8CPXoAC0AV-pNVKPmet8VvwqjA7PqcyqRY_3A'), ('filename', 'vaunix-digital-attenuator-102.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bTBzH9bpw34imsgJSEf1zQ/bKiX2AV_OBhDHNtqQFZLpTtYADEwBJ8oLJbmABG0YWj57tQJazjR7ZUmN1mSEkJkxAHYW6mXWDcHN56tsSHWkw/pMnUKmpNGnn-KuPxmAUlfhptwrrYHuLtbz4dHqaOZ-4'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uIQvzqlmS-Ia9OfVo0njFQ/TPmsw2CP-1_eUgWfC9X-Em4diEVV08yttGzuaEY1sNjAeXCFarRN29ByEzk42C4F4xG6PD-BhY7EWEgi31RZ4w/6EPpqibF0Kv9Rd7U-c_9Owxc_TxWqWwW6kUTmpzzWxw'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/TRM9nXcWPR6s8YnpMQmtcw/W9hNcF_E2g7BIiwcFYJrJltZc4gj1UhFlXgHS10Hzpy988te6xCBt4zVHmlvTa2yLPyUrhw1V3rcMv1XQSOotA/mBN-oAZlgLNPp6rous_MCeYSDbnYi-sLk7q41k-1Gxo'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-302p-hn-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,615.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
137,32.0,Finland,"With a modern and intuitive user interface, you gain direct control and overview of the dilution refrigerator system’s temperature status.","Bluefors temperature controller
",109.0,"**Bluefors** is the world's leading manufacturer of ultra-low temperature dilution refrigerator measurement systems
",Qcodes Community,Bluefors,"[OrderedDict([('id', 'attXPNgeU0vdqC6YW'), ('width', 1064), ('height', 592), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/MLMykXkq9CnJcj-Hf6tzXw/QpVpRafawGshbemMxiUMnjROzTAGNE-ghrcVqN-vVUwC2GXWDfWiyC2T5hKu0NRGj8khov5BIDtNsY2pY_UehcsgMWprcI7xa7bJH28QReG0FKmCqKtj4xFN9WtD4I3OCT6_XKxxtFpaSviKFAig9Q/9YzX5-Z-8v_4C2__yLygF8fs3hS3hpcWxeCOPZqHs5w'), ('filename', 'bluefors_logos_RGB_300dpi_black_block-002.jpg'), ('size', 13721), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZSe2s3v0hRHMVT_5ZxhshA/Zk4JMrm__pfwKrCV1rUSlv0HiY4LR_-qH8MyyN4fiDf5w5EM1REYtrOH9m7UJHkf9KyWeotbSu3tjfn4mTCVjg/hHDrivAQ5okAajFeQ1C1hxrBZrAGx8LZ2Pltch4jfrA'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/8bbycuzXb3Rex8Uy0Je74w/5EnEveOEHQK3xa8f-SR4EB3o7dHenFZfkdTDuYRH0aXrOLfvPud0NFi2QtRU1XnpE7yMxi7UjTkmgchnBJT2Cw/UgHVKMr-86M2b_81OMSeO3HTP0nbH7W1m-aLmeF3sVo'), ('width', 920), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/kB_qs35Kyw_veuNsqxG1dg/MtnWPuixYXQO0FjdCFIgQphBGOYNlJWGYsPJTJ021C8XPjLyKHbtpeklBprEWudviKpFRtUKkYQOgqYFmCXpcw/c-fXUGTGF3YBAgsPJV8hGdUb4YqJbVSDUaDTHQfdnjQ'), ('width', 3000), ('height', 3000)]))]))])]",https://bluefors.com/,"Write a Python script that uses Qcodes Community to connect to a Bluefors temperature controller
 Temperature Controllers",https://bluefors.com/blog/enhanced-user-experience-with-temperature-controller/,['Temperature Controllers'],"Temperature control is a process in which change of temperature of a space (and objects collectively there within), or of a substance, is measured or otherwise detected, and the passage of heat energy into or out of the space or substance is adjusted to achieve a desired temperature","Bluefors temperature controller
",https://bluefors.com/blog/enhanced-user-experience-with-temperature-controller/,"[OrderedDict([('id', 'attX0SFxuKJyGvviK'), ('width', 706), ('height', 355), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/cyE3naJ7MUTaQkqGhva8Kw/P1j3c7Z4VPD7XJeIoRyeTQ66UioRhycerjoNHloUNwZlyUO964ZUJD_a9fmY5LcSnZpw7EzTsBxlMwxPfEeXQ8ktZdfnOWcLi88h_EI_lzkA_Y-VrEHkke-DXWbIWTpUEJjpIUv9LInTz9b4mSISleFPjPmJQk84hOW4KZz3uHw/MTGQdaYa83BqS6hQ1vl2uYS8Ly4762iSe-c1ANVOZ9k'), ('filename', 'temperature-controller-for-bluefors-cryogenic-systems-706.png'), ('size', 224298), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7JONd-jhIpUD2ESr8SZfpw/n2f8-rpSjWhtYArL1ILOSTilJtnct-JamxHar4EfVWXP143kGxeeMCc1-r93ncXCjz1YjQdOtMG2KZQAnz4DWg/kck8F2oroBHSvOrJOlvwYjKgxhuvCh1nt5B_yVDS-5I'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/PCVZQk-xLHvzXL9WrowaRA/xRN5GkExKamv2UjdYOkZyY7R-CL8f3DpUz45-8vH5kR5VYdUUPeNRPUOnsBTaBZQhowDLOt9zAhJSEuVynstLA/niok-TMb7Y_f5jmTeQNu9i8xSWIsgjlcvxhQHI8Tvf8'), ('width', 706), ('height', 355)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/5YMZbEkozz0LjToZ2lD45g/0G-yJTXGutMbZvNdfFg2DRtPp7EKJ0HgvPUlYq5a7VZDiigyizXfkV3RCgVDx9W2nIbXH4c7bdUADgQY2k2zFg/WJtj_cYaPBjMmesrlEoqfVrq1lNjoBm8tPPcYYdgqsU'), ('width', 3000), ('height', 3000)]))]))])]",https://bluefors.com/blog/enhanced-user-experience-with-temperature-controller/,https://qcodes.github.io/Qcodes/examples/driver_examples/Qcodes%20example%20with%20Lakeshore%20336%20or%20372%20-%20Bluefors%20T%20control.html,https://qtt.readthedocs.io/en/latest/qtt.instrument_drivers.html,,,,,
140,14.0,Canda - QC,"Touchscreen display device for power & energy measurement. Single-channel, multiple outputs (USB, Ethernet, analog).
",Gentec EO Maestro,138.0,"Gentec-EO is a manufacturer of laser beam measurement technologies
",Qcodes Community,Gentec Eo,"[OrderedDict([('id', 'attM49N3urZQzbQiJ'), ('width', 900), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tE7OvXk1bvAyN7_LK2Slkw/Iebso5SRvj5j813FAKx1iZe9Pn9DvhO2G2tyDXZzUvYdT57sm_AYlWCz3KJh3PG2oSzIMV-8NjWwX8KgTUQCzX5pi112IMHx51WH61hrZuOUs12tuFCgxp-Wz2c_QcYQ/4NYztiarn05PFD6Ca0ES8M3QjhHdF5gJYC0SjhJGhxU'), ('filename', 'gentec-eo-logo-vector.png'), ('size', 4244), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ly_hiXE4GdyEZXUY8YdQOA/zsphVrN9CvJi3kTo9RpiKnoqSMaPp0XlY-Eq5bKBr77x4kQfQtRDJ9GGOiQIoLj7slDrwfqcLPHYoMbVDTzKSQ/xQlMhU-vJRDlyiuACEtvChdZ0GPN3sI5BrtjYmOQM-o'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/NY-w070qOe0F4bwjQArBCQ/-mtOngcqVpvECDbcQfb81lyBaPzivh9mbPqmKvUfTtaumCQdMpbX_i22-oGwR_ff0ywlkyClvzMvxD3ks8twyQ/0gn3ZoNvw684StYzBEoGzS8TI2MjJiV1uKKNf4fGsBw'), ('width', 900), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fpOC5g8Qee3nFBP29zkASA/ViVyL11K6B9V7Dsif3PRaP-DPaNdrARhkBkoU7n9G4UkGPd7N6zJ496wy20h0e1-iEmPgQBVDKg99_OEXwgjew/CszSulwrlCFdyakVJt600UBHN_O561yUtw0T-aSpT9w'), ('width', 3000), ('height', 3000)]))]))])]",https://www.gentec-eo.com/,Write a Python script that uses Qcodes Community to connect to a Gentec EO Maestro Screen Display,https://en.wikipedia.org/wiki/Display,['Screen Display'],"Touchscreen Display device
",Gentec EO Maestro,https://downloads.gentec-eo.com/prod/cecfd555/MAESTRO-Product-specifications-Gentec-EO.pdf,"[OrderedDict([('id', 'attnY8OZIObgRRtkH'), ('width', 1225), ('height', 950), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OzrVI27jT7J89_wXsyfaKQ/v8o0i_FeXQ-lJfiqy7UzFjH0FryqGDsDS0Sod2Vx0tN8lNtdGw412UELAIQSytLIYgI7nBYBThlyGoMgLcz6-7Yl5cw9ppYhNX1mBjmLTqk/uvs--BOWvi3h8nKMnEMWDdvKya7dto9dWca9vYo1Udo'), ('filename', 'maestro.png'), ('size', 668995), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/JsDYHLjTbE3kG7as0EylrQ/UhokqTNJqluSjJTvi2fKlD7LkLpsA4TxDxk7xVkclLPmZ-MzKzF_ZAeCtrr8ZFhD-B-MPHFAObFPqR5znxJcgQ/mWeCbFcWeNL1qQbiInA8AXzvTMyz_58qp-qxnLduUHY'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Llv7vsmBFcgKRhpERSFAIg/3ZmL581eLO2HpAleDUDei_tdEEeTj-cst0dcLxd56I4GRD-7WkmZBvlF3-my7AIbeInoZp-fdxSF2Yrvhap5-w/vv0H5s3pyrNY6cs4JZGYa215l0CIcOkgZQ1-aMkl2DY'), ('width', 660), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-mdt_nALBgX3lm3Rm1U6jQ/YYXlbPJR23bZZils2PaZLBSp3-j9plc8dpX4c7skR4oHJ5fIXQZNOUICsluW23g0HdffHdWj1cFjBeIJ96Pzkg/OY0tW9oCwff2JJmTo4Up-2HHelEwmqQqog3Ur_yQqJk'), ('width', 3000), ('height', 3000)]))]))])]",https://www.gentec-eo.com/products/maestro,https://github.com/BenMoon/LabSoft/blob/master/Instruments/gentec.py,https://www.gentec-eo.com/blog/interfacing-options-on-pc-for-powerenergy-detectors,2400.0,,,,"# -*- coding: utf-8 -*-

from PyQt5 import QtNetwork
from guidata.qt.QtGui import (QSplitter, QGridLayout, QLineEdit,
                              QWidget, QSpinBox, QIntValidator,
                              QPushButton, QRegExpValidator,
                              QLabel, QMessageBox)
from guidata.qt.QtCore import (QThread, Qt, Signal, QRegExp)

import numpy as np
import time
from datetime import datetime
from queue import Queue

from Helpers.genericthread import GenericWorker

class MaestroUi(QSplitter):
    connected = Signal() # gets emitted if stage was sucessfully connected
    newPlotData = Signal(object)
    updateAvgTxt = Signal(object)
    def __init__(self, parent):
        #super(ObjectFT, self).__init__(Qt.Vertical, parent)
        super().__init__(parent)

        self.meter = None
        self.collectData = True # bool for data collection thread
        self.avgData = Queue() # need data for averaging and set for holding all
        self.measure = False
        self.runDataThr = True
        self.measureData = []
        self.startTime = None


        layoutWidget = QWidget()
        layout = QGridLayout()
        layoutWidget.setLayout(layout)

        ##############
        # gui elements
        self.ipEdit = QLineEdit()
        rx = QRegExp(""^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"")
        self.ipEdit.setValidator(QRegExpValidator(rx))
        self.ipEdit.setText('127.0.0.1')
        self.portEdit = QLineEdit()
        self.portEdit.setValidator(QIntValidator(1, 65535, self))
        self.portEdit.setText('5000')
        self.connectBtn = QPushButton('Connect')
        self.avgSpin = QSpinBox()
        self.avgSpin.setValue(1)
        self.avgSpin.setRange(1, 10000)
        self.currValDisp = QLabel('0.0')
        self.startMeasBtn = QPushButton('Start aq')
        self.stopMeasBtn  = QPushButton('Stop aq')

        ##############
        # put layout together
        layout.addWidget(QLabel('IP Address:'), 0, 0)
        layout.addWidget(self.ipEdit, 1, 0)
        layout.addWidget(QLabel('Port:'), 0, 1)
        layout.addWidget(self.portEdit, 1, 1)
        layout.addWidget(self.connectBtn, 2, 1)
        layout.addWidget(QLabel('Averages'), 4, 0)
        layout.addWidget(self.avgSpin, 5, 0)
        layout.addWidget(self.currValDisp, 5, 1)
        layout.addWidget(self.startMeasBtn, 6, 0)
        layout.addWidget(self.stopMeasBtn, 6, 1)
        layout.setRowStretch(7, 10)
        self.addWidget(layoutWidget)

        ##############
        # Network stuff
        self.tcpClient = QtNetwork.QTcpSocket()
        self.tcpClient.readyRead.connect(self.__getSocketData)
        self.tcpClient.error.connect(lambda x: print(x))

        ##############
        # make button and stuff functional
        self.connectBtn.released.connect(self.connectMeter)
        self.avgSpin.valueChanged.connect(self.changeAverage)
        self.startMeasBtn.released.connect(self._startMeasure)
        self.stopMeasBtn.released.connect(self._stopMeasure)

        ##############
        # thread for getting data from socket
        self.updateAvgTxt.connect(self.__updateAvgTxt)
        self.dataAq_Thr = QThread()
        self.dataAq_Thr.start()
        self.dataAq_worker = GenericWorker(self.__getData)
        self.dataAq_worker.moveToThread(self.dataAq_Thr)


    def connectMeter(self):
        print('connected')
        self.tcpClient.connectToHost(self.ipEdit.text(), int(self.portEdit.text()))
        self.tcpClient.write('start\n'.encode())
        self.dataAq_worker.start.emit()

    def _startMeasure(self):
        self.measure = True
        self.measureData = [] # reinitialize measure data array
        time.sleep(0.1) # time to wait for first data to arrive
        self.startTime = datetime.now() # datetime object
        
    def _stopMeasure(self):
        self.measure = False

    #@Slot
    def __updateAvgTxt(self, text):
        '''
        update current value label
        '''
        self.currValDisp.setText(text)


    def changeAverage(self):
        shape = int(self.avgSpin.value())
        self.dispData = np.zeros(shape)
    
    def __getData(self):
        '''
        Function run in thread
        '''
        while self.runDataThr:
            tmpData = np.array(int(self.avgSpin.text())*[[datetime.now(), 0]])
            for i in range(len(tmpData)):
                tmpData[i] = self.avgData.get()
                if self.measure:
                    self.measureData.append(
                        (tmpData[i,0].isoformat().encode(),
                         (tmpData[i,0]-self.startTime).total_seconds(),
                         tmpData[i,1]))
            #print('mean', tmpData.mean())
            self.updateAvgTxt.emit(str(tmpData[:,1].mean()))
            if self.measure:
                self.newPlotData.emit(np.float_(np.asarray(self.measureData)[:,1:]))
        self.avgData.task_done()

    #@Slot()
    def __getSocketData(self):
        '''
        to be called if network buffer has more data
        push data to queue
        '''
        self.avgData.put([datetime.now(), float(self.tcpClient.readLine(1024).decode().rstrip())])

    def closeEvent(self, event):
        if self.tcpClient.isOpen():
            self.RunDataThr = False
            self.tcpClient.write('stop\n'.encode())
            time.sleep(0.1)
            self.tcpClient.close()
            print(self.tcpClient.isOpen())
        #if self.console is not None:
        #    self.console.exit_interpreter()
        event.accept()
        
if __name__ == '__main__':
    from guidata.qt.QtGui import QApplication
    import sys
    app = QApplication(sys.argv)
    #test = MyApp()
    test = MaestroUi(None)
    test.show()
    app.exec_()
"
145,5.0,USA,"The LDA-102-75F Lab Brick USB programmable 75 Ohm digital attenuator has an input power of up to +30 dBm, and offers frequency coverage of 10 to 1,000 MHz. It has an attenuation range of 95 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-102-75F ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-102-75F,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attjFawHPuZIhCIvm'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/A6hv1Z0aMapfmOu-wXeIJw/-gyFqxvqUmIRBCO6SW6l7ktt3cFrFoyrVe5xgenrLKUOa8jKv2zo3gY8tyioYSfpSxyrghMXMTdPk1xFlt43eyMvzrW4KQf-9KBqCpX8NkqhFXbyzSa_966xjZXGiesu/L_HRmjPNsm8UJDN0e7p7kZ-QZqX2jOFyFIXH6ZfZvuI'), ('filename', 'vaunix-digital-attenuator.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GUwQORyqTC0-zAwyrcgH1w/YqAnHP-5f5_zWSu2h1BU1NmyNqbld1y2V5kpukzwbVzEi4luMjFQQ4PyiGpV11HPMcEMaiNkG7r3SkK_LMrLcw/I6ozji7OafxVBdhVca1pLYRRPX1tYNMmH04xjRgAeCE'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/MEd92cWH1XXXWYf03zG-Mg/oceNNd0D9cNv1PJv_mnxGAKZAtFcalIkg4Zvsvc2YdzEzS0XE02g0GE3O57xOlm4p9TkCsSKMcEtCFda_2oYjw/HQezMLSprHgNusJZx4AfaIjodhog_BYVluGUud7lVe4'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rSu1vKq12LxNbOO0UDR27A/PtoRD0BZ1vI3OtDQ9ulMs5NfjgUaL0ETAPD-aQ2fF3cPl4bBuM8GlaTFgd72APx6Xr7KQkfX2w5nqJDHwSKqWg/npPLGD__yMf3Q9xefxlQw5fmHhOwS12R9vmDNAQwNog'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-102-75f-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,539.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
148,2500.0,"Munich, Germany","The ZVL is a compact, cost-efficient, powerful and portable network analyzer. It is ideal for use in development, production, and service. It is the only instrument to combine the functions of a network analyzer, spectrum analyzer, and power meter in a single box, making you much more efficient.",ZVL 13,480.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,"Write a Python script that uses Qcodes Community to connect to a {Device name} Network Analyzer, Power Meters, Spectrum Analyzers",,"['Network Analyzer', 'Power Meters', 'Spectrum Analyzers']",,,https://assets-us-01.kc-usercontent.com/ecb176a6-5a2e-0000-8943-84491e5fc8d1/40f0b6d5-bd69-48db-98e8-4276899ca017/RS-ZVL_datasheet.pdf,"[OrderedDict([('id', 'attVcgMzJB7cmmuql'), ('width', 610), ('height', 325), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nzdkipGe_nGlRDvDoB42Bg/nAYoLVLjFKB2240eOE7MiV5smYLURHbyWwNpXMq6vT4QbI7puuHnKmXV2FojFKPPAFbM-RC6WnqSmerrtj1AtIdjW4LI0w-UiUx5pM0Y2Gk/_Q5WgHT5pKyHPQBwti2SAhUnasNbV3U5i42Vii3kpFY'), ('filename', 'ZVL_front.webp'), ('size', 22220), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/33Qh8z-VlUYEjOWHFiw-cw/pZTsigjDD_1PHgHTweNNuAW6XSw-DmmToUk8scTfu09m_Sl4ueGzCB1EM6XddPugFI8dahaOrSaWYbr2VcjUcWP0Cm07mZncVYdvsb2ItIs/BKGsN0z5_U1gZNJy1hWNBsApF4NTtK37DXtTaaZ_Sqk'), ('width', 68), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oU_v3ChtqJieTNlmFmevZw/HgcD6Gk3ZGMDe_qAbKw21Kj_kF41qBpZwtf4KpmYvLJv5HDI9vsAcT8EA5H-vW6me4pAka3DTDwhj08B2xzOMTLnef6tlapz7BJdQ6w5b_w/S8-Q77BSwFC67m2cQJ_bcHh_CTTnrM1TxA7C3rUlUTo'), ('width', 610), ('height', 325)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/t4rIqkk_tWHe5yArA30S9g/0tvwqFfyrMqwZbxpEPjR0mUMtlHnAdjTDLGJYTDypnhvyQA3q4gif_i7wfJxgwVX-XbThUWxmEBT41gQBV56W3_2_4Cc2HRi8ci2uYVynmU/NczxZRqjLn66exauKf3WPWhLFDor5oKeLs2Cmj-la74'), ('width', 3000), ('height', 3000)]))]))])]",https://www.electrorent.com/us/products/rf-and-microwave-network-analyzers/network-analyzers-%3C20ghz/rohde-and-schwarz/zvl13-1303650913/01t1O00000CkRfYQAV?gad=1&gclid=CjwKCAjw-vmkBhBMEiwAlrMeFwS5rA2XF9_QqijzKPoKvusrvgLdIM74vxkrHWdiBlSznwz6HsQP2BoCz5sQAvD_BwE,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/ZVL13.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13,,,,,"from typing import Any
import logging
from functools import partial
from typing import Optional

import numpy as np

from qcodes.utils.validators import Enum, Strings, Ints
from qcodes import VisaInstrument, Instrument
from qcodes import MultiParameter, ArrayParameter


log = logging.getLogger(__name__)


class FrequencySweepMagPhase(MultiParameter):

    def __init__(self, name: str, instrument: Instrument,
                 start: float, stop: float, npts: int, channel: int, **kwargs) -> None:
        super().__init__(name, names=("""", """"), shapes=((), ()), **kwargs)
        self._instrument = instrument
        self.set_sweep(start, stop, npts)
        self._channel = channel
        self.names = ('magnitude',
                      'phase')
        self.labels = (f'{instrument.short_name} magnitude',
                       f'{instrument.short_name} phase')
        self.units = ('', 'rad')
        self.setpoint_units = (('Hz',), ('Hz',))
        self.setpoint_labels = (
            (f'{instrument.short_name} frequency',),
            (f'{instrument.short_name} frequency',)
        )
        self.setpoint_names = (
            (f'{instrument.short_name}_frequency',),
            (f'{instrument.short_name}_frequency',)
        )


    def set_sweep(self, start: float, stop: float, npts: int) -> None:
        f = tuple(np.linspace(int(start), int(stop), num=npts))
        self.setpoints = ((f,), (f,))
        self.shapes = ((npts,), (npts,))

    def get_raw(self):
        old_format = self._instrument.format()
        self._instrument.format('Complex')
        data = self._instrument._get_sweep_data(force_polar=True)
        self._instrument.format(old_format)
        return abs(data), np.angle(data)


class FrequencySweep(ArrayParameter):

    def __init__(self, name: str, instrument: Instrument,
                 start: float, stop: float, npts: int, channel: int, **kwargs) -> None:
        super().__init__(name, shape=(npts,),
                         instrument=instrument,
                         unit='dB',
                         label=f'{instrument.short_name} magnitude',
                         setpoint_units=('Hz',),
                         setpoint_labels=(f'{instrument.short_name}'
                                          ' frequency',),
                         setpoint_names=(f'{instrument.short_name}_frequency',),
                         **kwargs,
                         )
        self.set_sweep(start, stop, npts)
        self._channel = channel

    def set_sweep(self, start: float, stop: float, npts: int) -> None:

        f = tuple(np.linspace(int(start), int(stop), num=npts))
        self.setpoints = (f,)
        self.shape = (npts,)

    def get_raw(self):
        data = self._instrument._get_sweep_data()
        if self._instrument.format() in ['Polar', 'Complex',
                                         'Smith', 'Inverse Smith']:
            log.warning(""QCoDeS Dataset does not currently support Complex ""
                        ""values. Will discard the imaginary part. In order to ""
                        ""acquire phase and amplitude use the ""
                        ""FrequencySweepMagPhase parameter."")
        return data


class ComplexSweep(ArrayParameter):
    def __init__(self, name: str, instrument: Instrument,
                 start: float, stop: float, npts: int, channel:int, **kwargs) -> None:
        super().__init__(name, shape=(npts,),
                         instrument=instrument,
                         unit='dB',
                         label=f'{instrument.short_name} magnitude',
                         setpoint_units=('Hz',),
                         setpoint_labels=(f'{instrument.short_name}'
                                          ' frequency',),
                         setpoint_names=(f'{instrument.short_name}_frequency',),
                         **kwargs,
                         )
        self.set_sweep(start, stop, npts)
        self._channel = channel

    def set_sweep(self, start: float, stop: float, npts: int) -> None:
        f = tuple(np.linspace(int(start), int(stop), num=2*npts))
        self.setpoints = (f,)
        self.shape = (2*npts,)

    def get_raw(self):
        data = self._instrument._get_sweep_data(force_polar=True)
        if self._instrument.format() in ['Polar', 'Complex',
                                         'Smith', 'Inverse Smith']:
            log.warning(""QCoDeS Dataset does not currently support Complex ""
                        ""values. Will discard the imaginary part. In order to ""
                        ""acquire phase and amplitude use the ""
                        ""FrequencySweepMagPhase parameter."")
        return data
    

class SAFrequencySweep(ArrayParameter):
    def __init__(self, name: str, instrument: Instrument,
                 start: float, stop: float, npts: int, channel: int, **kwargs) -> None:
        super().__init__(name, shape=(npts,),
                         instrument=instrument,
                         unit='dBm',
                         label=f'{instrument.short_name} magnitude',
                         setpoint_units=('Hz',),
                         setpoint_labels=(f'{instrument.short_name}'
                                          ' frequency',),
                         setpoint_names=(f'{instrument.short_name}_frequency',),
                         **kwargs,
                         )
        self.set_sweep(start, stop, npts)
        self._channel = channel

    def set_sweep(self, start: float, stop: float, npts: int) -> None:

        f = tuple(np.linspace(int(start), int(stop), num=npts))
        self.setpoints = (f,)
        self.shape = (npts,)

    def get_raw(self):
        data = self._instrument._get_sweep_data_SA()
        return data


class ZVL13(VisaInstrument):
    def __init__(
            self,
            name: str,
            address: str,
            terminator='\n',
            **kwargs: Any):
        super().__init__(name, address, terminator=terminator, **kwargs)

        self.add_parameter(name='mode',
                           label='VNA Mode',
                           get_cmd=self._get_mode,
                           set_cmd=self._set_mode,
                           get_parser=str)

        mode = self.mode.get()
        if mode == 'SAN':
            n = int(1)
            self._tracename = 'Trc1'
        if mode == 'NWA':
            _, trace_name = self._get_trace_name()
            self._tracename = trace_name

        self.inf_lim = 9e+3
        
        self.sup_lim = 13.6e+9

        self.timeout_sweep = 40
        self.timeout_sa = 40

        self.add_parameter('start',
                           get_cmd='FREQ:STAR?',
                           get_parser=float,
                           set_cmd=self._set_start,
                           unit = 'Hz',
                           label='Start Frequency')
        
        self.add_parameter('stop',
                           get_cmd='FREQ:STOP?',
                           get_parser=float,
                           set_cmd=self._set_stop,
                           unit = 'Hz',
                           label='Stop Frequency')
        
        self.add_parameter('center',
                           get_cmd='FREQ:CENT?',
                           get_parser=float,
                           set_cmd=self._set_center,
                           unit = 'Hz',
                           label='Center Frequency')
        
        self.add_parameter('span',
                            get_cmd='FREQ:SPAN?',
                            get_parser=float,
                            set_cmd=self._set_span,
                            unit = 'Hz',
                            label='Center Frequency')
        
        self.add_parameter('npts',
                           get_cmd='SWE:POIN?',
                           get_parser=int,
                           set_cmd=self._set_npts,
                           label='Number of points')
        
        self.add_parameter('power',
                            get_cmd='SOUR:POW?',
                            get_parser=float,
                            set_cmd=self._set_power,
                            unit = 'dBm',
                            label='Power')
        
        self.add_parameter('format',
                            vals=Strings(),
                            get_cmd=partial(self._get_format,
                                            tracename=self._tracename),
                            set_cmd=self._form,
                            label='Format')        
        
        self.add_parameter('avg',
                            get_parser=int,
                            vals=Ints(1, 5000),
                            get_cmd='AVER:COUN?',
                            set_cmd=self._average,
                            label='Averages')
        
        self.add_parameter(name='num_ports',
                           get_cmd='INST:PORT:COUN?',
                           get_parser=int)
        
        self.add_parameter(name='S_parameter',
                           label='S parameter',
                           get_cmd=f""CALC:PAR:MEAS? '{self._tracename}'"",
                           set_cmd=self._set_s_parameter,
                           vals=Strings())
        
        self.add_parameter(name='trace_mag_phase',
                           start=self.start(),
                           stop=self.stop(),
                           npts=self.npts(),
                           channel = n,
                           parameter_class=FrequencySweepMagPhase)
        
        self.add_parameter(name='trace',
                           start=self.start(),
                           stop=self.stop(),
                           npts=self.npts(),
                           channel = n,
                           parameter_class=FrequencySweep)
        
        self.add_parameter(name='S_trace',
                           start=self.start(),
                           stop=self.stop(),
                           npts=self.npts(),
                           channel = n,
                           parameter_class=ComplexSweep)
        
        self.add_parameter(name='spectrum',
                           start=self.start(),
                           stop=self.stop(),
                           npts=self.npts(),
                           channel = n,
                           parameter_class=SAFrequencySweep)
        
        self.add_parameter(name='status',
                            get_cmd='CONF:CHAN1:STAT?',
                            set_cmd='CONF:CHAN1:STAT {{}}',
                            get_parser=int)
        
        self.add_parameter(name='rf_power',
                            get_cmd='OUTP?',
                            set_cmd=self._set_rf_power,
                            get_parser=int)
        
        self.add_parameter(name='bandwidth',
                           label='Bandwidth',
                           unit='Hz',
                           get_cmd='SENS:BAND?',
                           set_cmd=self._set_bandwidth,
                           get_parser=int)
        
        self.add_parameter(name='freq_step',
                           label='Frequency step size',
                           unit='Hz',
                           get_cmd='SENS:SWE:STEP?',
                           set_cmd=self._set_freq_step,
                           get_parser=int)

        self.calibration_file = 'Cal_17_11_2021.cal'
        
        self.add_function('autoscale', call_cmd = 'DISP:WIND:TRAC:Y:AUTO ONCE')

        self.add_function('electrical_delay_auto',
                          call_cmd='CORR:EDEL:AUTO ONCE')
        self.add_function('data_to_mem',
                          call_cmd='CALC:MATH:MEM')
        self.add_function('cont_meas_on',
                          call_cmd='INIT:CONT:ALL ON')
        self.add_function('cont_meas_off',
                          call_cmd='INIT:CONT:ALL OFF')

    def reset(self):
        self.write(""*RST"")

    def calibration(self):
        """"""
        Loads calibration file as specified by ``self.calibration_file``.
        """"""
        self.write(f""MMEMory:LOAD:CORRection 1, '{self.calibration_file}'"")

    def _get_mode(self):
        mode_raw = ((self.ask('INST?')).split('\n')[0]).strip()
        mode_mapping = {
            ""SAN"": ""sa"",
            ""NWA"": ""na"",
        }
        return mode_mapping[mode_raw]

    def _set_mode(self, mode: str):
        if mode == 'sa':
            self.sa_mode()
        elif mode == 'na':
            self.na_mode()
        else:
            raise AttributeError(
                'Wrong string. To set in Spectrum Analyzer mode write ""sa"", to set in Network Analyzer mode write ""na"".'
            )

    def sa_mode(self):
        self.write('INST SAN')
        n = int(1)
        self._tracename = 'Trc1'
        self.mode.cache.set(""sa"")

    def na_mode(self):
        self.write('INST NWA')

        _, trace_name = self._get_trace_name()
        self._tracename = trace_name

        self.mode.cache.set(""na"")

    def _get_trace_catalog(self):
        return self.ask(""CONFigure:TRACe:CATalog?"").split(',')

    def _get_trace_name(self):
        trace_catalog = self._get_trace_catalog()
        if len(trace_catalog) == 2:            
            ch, trace_name = trace_catalog
            n = ch[1]
            trace_name = trace_name[:-1]
        else:
            n = trace_catalog[0][1]
            trace_name = trace_catalog[1]
        return n, trace_name

    def _set_freq_step(self, n: int):
        min_step = (self.stop_f() - self.start_f())/(4001)
        max_step = (self.stop_f() - self.start_f())/1 

        if n>min_step and n<max_step:
            self.write(""SENS:SWE:STEP "" + str(n))
            self.update_traces()
        else:
            raise AttributeError('Step size must be in the range between' + str(min_step) +' Hz and ' + str(max_step) + ' Hz.')

    def _set_npts(self, n: int) -> None:
        self.write(""SWE:POIN "" + str(n))
        self.update_traces()
        
    def _set_s_parameter(self, msg: str) -> None:
        S_params = ['S11','S12','S21','S22']

        if msg in S_params:
            self.write(f""CALC:PAR:MEAS '{self._tracename}', '{msg}'"")
        else: 
            raise AttributeError('Illegal string. Allowed S parameters: S11, S12, S21, S22')

    def _set_bandwidth(self, val:int) -> None:
        if val <= 10e6 and val > 10:
            self.write('SENS:BAND '+str(int(val)))
        else: 
            raise AttributeError('Bandwidth value out of range')
        
    def _set_rf_power(self, val: int) -> None:
        if val == 0:
            self.write('OUTP OFF')
        elif val == 1: 
            self.write('OUTP ON')
        else:
            raise AttributeError('Write 1 to switch on and 0 to switch off')

    def _get_format(self, tracename: str) -> str:
        return self.ask(""CALC:FORM?"")

    def _form(self, msg:str) -> None:
        if msg == 'phase':                
            self.write('CALC:FORM PHAS')
        elif msg == 'dbm':
            self.write('CALC:FORM MLOG')
        elif msg == 'polar':                
            self.write('CALC:FORM POL')          
        elif msg == 'swr':                
            self.write('CALC:FORM SWR')
        elif msg == 'magnitude':
            self.write('CALC:FORM MLIN')            
        elif msg == 'real':                
            self.write('CALC:FORM REAL')
        elif msg == 'img':
            self.write('CALC:FORM IMAG')
        elif msg == 'unwrapped phase':                
            self.write('CALC:FORM UPH')
        elif msg == 'smith':
            self.write('CALC:FORM SMIT')
        elif msg == 'data/mem':
            self.data_to_mem()
            self.write('CALC:MATH:FUNC DIV')
        else:
            raise AttributeError(
                'Format does not exist. Choose one of the following: '
                'dbm, phase, polar, swr, magnitude, real, img, unwrapped phase, smith, data/mem'
            )

    def _average(self, num:float) -> None:
        self.write('AVER:STAT OFF')
        self.write('AVER:COUN ' + str(int(num)))
        self.write('AVER:STAT ON')
        self.write('AVER:CLE')
            
    def _set_start(self, val: float):
        start = val
        stop = self.stop()
        if start >= stop:
            raise ValueError(""Stop frequency must be larger than start frequency."")
        else:
            self.write('FREQ:STAR '+ str(int(start)))

        self.update_traces()
                
    def _set_stop(self, val: float):
        stop = val
        start = self.start()
        if stop <= start:
            raise ValueError(""Stop frequency must be larger than start frequency."")
        else:
            self.write('FREQ:STOP '+ str(int(stop)))

        self.update_traces()
                
    def _set_center(self, val: float):
        center = val

        if center <= self.inf_lim or center >= self.sup_lim:
            raise ValueError(""Out of the VNA limit."")
        else:
            self.write('FREQ:CENT '+ str(int(center)))

        self.update_traces()

    def _set_span(self, val: float):
        span = val   
        center = self.center()

        if center + span * 0.5 >= self.sup_lim or center - span * 0.5 <= self.inf_lim:
            raise ValueError(""Out of the VNA limit."")
        else:        
            self.write('FREQ:SPAN '+ str(int(span)))

        self.update_traces()

    def _set_power(self, val: float):        
        if val > 0:
            raise ValueError(
                ""Attenuation cannot be positive."")
        elif val < -40:
            raise ValueError(""Unleveled power"")
        else:
            self.write('SOUR:POW ' + str(int(val)))

    def _get_sweep_data(self, force_polar: bool = False):
        if force_polar:
            data_format_command = 'SDAT'
        else:
            data_format_command = 'FDAT'

        self.write('SENS:AVER:STAT ON')
        self.write('SENS:AVER:CLE')

        # preserve original state of the znb
        with self.status.set_to(1):
            self.root_instrument.cont_meas_off()
            try:
                with self.root_instrument.timeout.set_to(self.timeout_sweep):
                    self.write('SENS:SWEEP:COUNT '+ str(self.avg()))
                    self.write('INIT:IMMEDIATE:SCOPE:SINGLE')                        
                    self.write('INIT:CONT OFF')
                    self.write('INIT:IMM; *WAI')
                    self.write(""CALC:PAR:SEL '{self._tracename}'"")
                    data_str = self.ask(f'CALC:DATA? {data_format_command}')

                data = np.array(data_str.rstrip().split(',')).astype('float64')
            finally:
                self.root_instrument.cont_meas_on()
        return data

    def _get_sweep_data_SA(self):
        self.write('SENS:AVER:STAT ON')
        self.write('SENS:AVER:CLE')

        self.root_instrument.cont_meas_off()
        try:
            with self.root_instrument.timeout.set_to(self.timeout_sa):
                self.write('SENS:SWEEP:COUNT '+ str(self.avg()))
                self.write('INIT:IMMEDIATE:SCOPE:SINGLE')                        
                self.write('INIT:CONT OFF')
                self.write('INIT:IMM; *WAI')
                data_str = self.ask('FORM ASC;TRAC? TRACE1')

            data = np.array(data_str.rstrip().split(',')).astype('float64')
        finally:
            self.root_instrument.cont_meas_on()
        return data

    def update_traces(self):
        start = self.start()
        stop = self.stop()
        npts = self.npts()
        for _, parameter in self.parameters.items():
            if isinstance(parameter, (ArrayParameter, MultiParameter)):
                try:
                    parameter.set_sweep(start, stop, npts)
                except AttributeError:
                    pass
"
151,5.0,USA,"The LDA-302P-2N Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +33 dBm, and offers frequency coverage of 10 to 3,000 MHz. It has an attenuation range of 90 dB and a step size of 2.0 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software. ",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-302P-2N ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-302P-2N,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attjFawHPuZIhCIvm'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/A6hv1Z0aMapfmOu-wXeIJw/-gyFqxvqUmIRBCO6SW6l7ktt3cFrFoyrVe5xgenrLKUOa8jKv2zo3gY8tyioYSfpSxyrghMXMTdPk1xFlt43eyMvzrW4KQf-9KBqCpX8NkqhFXbyzSa_966xjZXGiesu/L_HRmjPNsm8UJDN0e7p7kZ-QZqX2jOFyFIXH6ZfZvuI'), ('filename', 'vaunix-digital-attenuator.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GUwQORyqTC0-zAwyrcgH1w/YqAnHP-5f5_zWSu2h1BU1NmyNqbld1y2V5kpukzwbVzEi4luMjFQQ4PyiGpV11HPMcEMaiNkG7r3SkK_LMrLcw/I6ozji7OafxVBdhVca1pLYRRPX1tYNMmH04xjRgAeCE'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/MEd92cWH1XXXWYf03zG-Mg/oceNNd0D9cNv1PJv_mnxGAKZAtFcalIkg4Zvsvc2YdzEzS0XE02g0GE3O57xOlm4p9TkCsSKMcEtCFda_2oYjw/HQezMLSprHgNusJZx4AfaIjodhog_BYVluGUud7lVe4'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rSu1vKq12LxNbOO0UDR27A/PtoRD0BZ1vI3OtDQ9ulMs5NfjgUaL0ETAPD-aQ2fF3cPl4bBuM8GlaTFgd72APx6Xr7KQkfX2w5nqJDHwSKqWg/npPLGD__yMf3Q9xefxlQw5fmHhOwS12R9vmDNAQwNog'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-302p-2n-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,639.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
156,5420.0,USA,"N9000A CXA Signal Analyzer, 9 kHz to 26.5 GHz
",Agilent N 9000 A,23.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software

",Qcodes Community,Agilent,"[OrderedDict([('id', 'attc6xrG2EsYbFAYl'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fQUxMyvye7LkRNrW_9LpDw/a1a72T_ybNDngFNeEthdujK-3J411WCU7p5oSDUdZQKBnyItPISoB5kGTdXbBoZHMWn8OVlfLkqUORBw0cWhS3FAreUOnbjBjTSb7AkMQD0/aWKCcUbxs_atz78f_o0gyPdiOT19I4BOaetlO7zRc7s'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/JMLOejSs0sNQqebza0_O4g/ptnoLe_aT143RHRw7XWGMF2Rbl_oJh18VP8XlO3pEzBdEpOleXMyRBWqTWt9h3Cvnv1NVgGzBSewM34fGtz6_G2zfORynLBJVLQttq4CERA/6RykqSNQV6z5GqlyNFAHFATyDxsZtr_dkrebBGCHQqo'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/55V5uSdPbh0zNz0Drmxo7A/nDDnQrgWyg3uGnPFSTEbFZFZg8lh6PmAa0gqcuhRBMy8ux1D1qEeynNZZfXB5RCYzdvd11mgkZDaWWL4zMTDdVK3jm-U_9HlUEEdEIRTjf8/-82nBzlZVRi4Izj7vfypYX3HzbD-Usw5_Owv_MfRxgU'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RWWIIc79xTTZegoK7wkprg/VCK9-LQrz8PtqcOTSmaZiNVa5dpQ2eq5sIELnqJMdDY0-qksJXtd4reH5o2nSEl2SeAVkYTwBrC4ZfMl2h_DMHsN8FrQO1wuGgXs-cNLh60/mZHEAeKa58qt39N5aX3_5o_zlOkrLoir5OMzhvImp8k'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT N9000A Spectrum Analyzers,https://www.keysight.com/us/en/products/spectrum-analyzers-signal-analyzers/x-series-signal-analyzers.html,['Spectrum Analyzers'],"This starts with accessible performance, which is at the heart of every X-Series signal analyzer (spectrum analyzer). They put you closer to the signal analysis (spectrum analysis) answer by easily linking cause and effect. Across the full spectrum — from our CXA to our UXA — you will find the signal analysis (spectrum analysis) tools you need to design, test, and deliver your next breakthrough.",KEYSIGHT N9000A,https://www.keysight.com/us/en/assets/7018-02222/data-sheets/5990-4327.pdf,"[OrderedDict([('id', 'attprLCdip5zIq9LN'), ('width', 1164), ('height', 528), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/MdbqEDIIFVs1SZHdZW0-kg/BgeqqZWJhPACuBInKJ-wnOjFCD8bUqVknopKvATg2wWDrRLCl4_48tHtP1GZ2VRKysko-QfL2lY71BKF9L84AB0xffP3OvWksZ8W7dbYY2c/TSlGcyx0O6ejSCsz_xDHuWXhsNjXIGsc_PXX7UolGGA'), ('filename', 'N9000A.png'), ('size', 523353), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QSxaCr8v7SYdvX954ht2CQ/7R1QA8adizNGw1ynE9eaE67h3qgtqqUmjOxMvED1V5r82EMjBiHG0DEnnTJBKbRQ4QgKkoa3TwnHQK64vfdY4g/EvmQwz6K1dN-hX3LFGxFYh2apbaXczAcOMv66cL70bU'), ('width', 79), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/yTasWEWgKs27sZOcqvhb2w/Su-qvdj-8VNdeMzpkiZTXe2CGHF85mHbeSpkCW6h_0DWtryuP-X5dx5Tlenvf2YY72eySafXLO7F0JBpFF9qsA/dQ8dfAKTFRHbeg4C70uebJg353XK79fP-ywiT7Fph_c'), ('width', 1129), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/B4sv5QZfW1j1XymRgQlT8A/Cszx7x3_APxpfnixH1Sc9O9ZOvPKWI2_22Bhi26k2CilD5P_tk2hXdjHI4ROX9tv5Etlhuv3xTlV0Qg6DYE5Nw/qh4kaJWwc12ojjj75LFJeNS27iNjmIaV0sKUl4CgZv4'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/product/N9000A/cxa-signal-analyzer-9khz-26-5ghz.html,https://qcodes.github.io/Qcodes_contrib_drivers/_modules/qcodes_contrib_drivers/drivers/Agilent/Agilent_N9000A.html,https://www.keysight.com/us/en/lib/software-detail/driver/base-x-series-signal-analyzers-python-instrument-drivers.html,14000.0,"
",,,
160,550.0,USA,"The Kinesis K10CR1 is a compact, precision motorized rotation mount that accepts
Ø1"" optics and SM1-threaded components. It is also compatible with our 30 mm cage
systems (and 60 mm cage systems when used with adapter K10CR1A3)",K 10 CR 1,614.0,"Thorlabs, Inc. is an American privately held optical equipment company headquartered in Newton, New Jersey. The company was founded in 1989 by Alex Cable, who serves as its current president and CEO. As of 2018, Thorlabs has annual sales of approximately $500 million.
",Qcodes Community,Thorlabs,"[OrderedDict([('id', 'attRmyBjaipm6atue'), ('width', 295), ('height', 50), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/B34kPd8TDySPykIqGnAQbw/aiiK819WYExx3Ptf5wMW9occy5nw036iAflUYeUKd3P4oIOtDcjE-9n_aPuC9CIL6NqW9upoWnPw1MNj_dT272K3sQl6HrzLFUheR7vbgDA/McPpt4BKHE-5dfRkgnw9sy91ZT_2J2U6zhqPJLIpSMo'), ('filename', 'Thorlabs_Logo_Red.png'), ('size', 3614), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-IvxdwJZrNBEfbQllhNmjw/R2XVDzJm1eKjim2p3oPbkO0dTIqE8mJXIfagvk20zhFxQhu6OksXnXxFX3T7Js0XghjhysXg1U4hrYSY20fgqw/ePugtvTHT0veIoRZ7driznLOXT78vezhqu8vI9Qr9tw'), ('width', 212), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7MaR2gHuTGamIUDR6lpP_Q/h_TMBraNTFAgmrgYDRJVXnE24Tce3lEenhhkhf4x6E7N8W4ioeCEy-FmPSScWXQSKR9mNqK7eHTYLngjLCjurg/xbql1i-E8yIE38xfkhyh6Ea8xj3EnIOpH7RBtQWLpFs'), ('width', 295), ('height', 50)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aM50-TKhPPqIT7mVMqCDNQ/NqK_Klj2IUd6BRR-rB9c_jzWWg3VIMr5gAf0IasH4eMUL0PkDhO0dpciWLQyN8Z40DMSviJxYrXeZh8qiz8g5Q/IrYPj2E85dh2q1sQ4SOYb_I8-A87BkF7ZS7m31_8sM0'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thorlabs.com/,Write a Python script that uses Qcodes Community to connect to a K10CR1 Motion,,['Motion'],,K10CR1,https://www.thorlabs.com/_sd.cfm?fileName=ETN015302-D02.pdf&partNumber=K10CR1/M,"[OrderedDict([('id', 'attlzCWPu5WLQ2KHM'), ('width', 780), ('height', 780), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QjRqlfI2K_p4oTxtsnsQgQ/DChZ7C0VW9i6sw2KP0wRuza1h3DaavM8DNph0lto_O3wcv9jEcboBZyqkbLZAUTjSSGaAy-hWhGPt69qKWufDZ5ZndWzan8GUYEL7nEmek4/XzX_VPDkkq9Svoe4wvW8mqb1Z1T1MepRa2obaNpCIE4'), ('filename', 'ETN015303-xl.jpg'), ('size', 46688), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/mktrxNcsxosdwCMomoVGmA/9yKN6VCsTVIFStoregEB9ZWCZqSIFxOlO3rSpibcoTm5vtvG961gqH-eJNTnvNFJGX3zy16fRnmx-PLH1kXFrw/v8NufyL1JmYfX49t-QtPTxh_zrtEG6UxZteKlgC2hhc'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9DDb0J-nlgDhCGtZ5uUHog/KXonUxtsgEAZeWVjcql7UNE1gkehlf0znvHDvCRxPQ1bhOtsroGXBC9wTEb66hhkjZj2jTq4cadFVJBLBSUPRA/4kN0ND9nMiLU3ZKCMPwdrQhVNEA1yR2QNtpfsWfOqEE'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ceT612xiMCjj4HakMzYjZQ/oLKp9EjgwMFbRHck3Zb8FcnfGpX6FMpAxSP84v4TRTq6BrNCbIZvDMNWCrolSOWPp-d6Kecyc3zOq8s91O-BTA/1WSoRVEBjSvly9cB3rgE58SxQuC8Lq9DXjwI755CGxU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thorlabs.com/drawings/5b93b1b36a318298-C04D2EB0-B3AB-5DFC-E6B2C996E0FF2E39/K10CR1-ManualforAPT.pdfhttps://www.thorlabs.com/_sd.cfm?fileName=ETN015302-D02.pdf&partNumber=K10CR1/M,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Thorlabs/K10CR1.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Thorlabs_K10CR1.ipynb,1501.21,,,,"import enum
from typing import Tuple, Optional

import qcodes.utils.validators as vals
from qcodes import Instrument

from .APT import Thorlabs_APT, ThorlabsHWType


class RotationDirection(enum.Enum):
    """"""Constants for the rotation direction of Thorlabs K10CR1 rotator""""""
    FORWARD = ""fwd""
    REVERSE = ""rev""


class HomeLimitSwitch(enum.Enum):
    """"""Constants for the home limit switch of Thorlabs K10CR1 rotator""""""
    REVERSE = ""rev""
    FORWARD = ""fwd""


class Thorlabs_K10CR1(Instrument):
    """"""
    Instrument driver for the Thorlabs K10CR1 rotator.

    Args:
        name: Instrument name.
        device_id: ID for the desired rotator.
        apt: Thorlabs APT server.

    Attributes:
        apt: Thorlabs APT server.
        serial_number: Serial number of the device.
        model: Model description.
        version: Firmware version.
    """"""

    def __init__(self, name: str, device_id: int, apt: Thorlabs_APT, **kwargs):
        super().__init__(name, **kwargs)

        # Save APT server reference
        self.apt = apt

        # initialization
        self.serial_number = self.apt.get_hw_serial_num_ex(ThorlabsHWType.K10CR1, device_id)
        self.apt.init_hw_device(self.serial_number)
        self.model, self.version, _ = self.apt.get_hw_info(self.serial_number)

        # Set velocity and move-home parameters to previous values. Otherwise the velocity is very
        # very low and it is not the velocity stored in the parameters... For whatever reason?
        self._set_velocity_parameters()
        self._set_home_parameters()

        # Helpers
        direction_val_mapping = {RotationDirection.FORWARD: 1,
                                 RotationDirection.FORWARD.value: 1,
                                 RotationDirection.REVERSE: 2,
                                 RotationDirection.REVERSE.value: 2}
        lim_switch_val_mapping = {HomeLimitSwitch.REVERSE: 1,
                                  HomeLimitSwitch.REVERSE.value: 1,
                                  HomeLimitSwitch.FORWARD: 4,
                                  HomeLimitSwitch.FORWARD.value: 4}

        # PARAMETERS
        # Position
        self.add_parameter(""position"",
                           get_cmd=self._get_position,
                           set_cmd=self._set_position,
                           vals=vals.Numbers(0, 360),
                           unit=u""\u00b0"",
                           label=""Position"")
        self.add_parameter(""position_async"",
                           get_cmd=None,
                           set_cmd=self._set_position_async,
                           vals=vals.Numbers(0, 360),
                           unit=u""\u00b0"",
                           label=""Position"")

        # Velocity Parameters
        self.add_parameter(""velocity_min"",
                           set_cmd=self._set_velocity_min,
                           get_cmd=self._get_velocity_min,
                           vals=vals.Numbers(0, 25),
                           unit=u""\u00b0/s"",
                           label=""Minimum Velocity"")
        self.add_parameter(""velocity_acceleration"",
                           set_cmd=self._set_velocity_acceleration,
                           get_cmd=self._get_velocity_acceleration,
                           vals=vals.Numbers(0, 25),
                           unit=u""\u00b0/s\u00b2"",
                           label=""Acceleration"")
        self.add_parameter(""velocity_max"",
                           set_cmd=self._set_velocity_max,
                           get_cmd=self._get_velocity_max,
                           vals=vals.Numbers(0, 25),
                           unit=u""\u00b0/s"",
                           label=""Maximum Velocity"")

        # Move home parameters
        self.add_parameter(""move_home_direction"",
                           set_cmd=self._set_home_direction,
                           get_cmd=self._get_home_direction,
                           val_mapping=direction_val_mapping,
                           label=""Direction for Moving Home"")
        self.add_parameter(""move_home_limit_switch"",
                           set_cmd=self._set_home_lim_switch,
                           get_cmd=self._get_home_lim_switch,
                           val_mapping=lim_switch_val_mapping,
                           label=""Limit Switch for Moving Home"")
        self.add_parameter(""move_home_velocity"",
                           set_cmd=self._set_home_velocity,
                           get_cmd=self._get_home_velocity,
                           vals=vals.Numbers(0, 25),
                           unit=u""\u00b0/s"",
                           label=""Velocity for Moving Home"")
        self.add_parameter(""move_home_zero_offset"",
                           set_cmd=self._set_home_zero_offset,
                           get_cmd=self._get_home_zero_offset,
                           vals=vals.Numbers(0, 360),
                           unit=u""\u00b0"",
                           label=""Zero Offset for Moving Home"")

        # FUNCTIONS
        # Stop motor
        self.add_function(""stop"",
                          call_cmd=self._stop,
                          args=[])

        # Moving direction
        self.add_function(""move_direction"",
                          call_cmd=self._move_direction,
                          args=[vals.Enum(*direction_val_mapping)],
                          arg_parser=lambda val: direction_val_mapping[val])

        # Enable/disable
        self.add_function(""enable"",
                          call_cmd=self._enable,
                          args=[])
        self.add_function(""disable"",
                          call_cmd=self._disable,
                          args=[])

        # Move home
        self.add_function(""move_home"",
                          call_cmd=self._move_home,
                          args=[])
        self.add_function(""move_home_async"",
                          call_cmd=self._move_home_async,
                          args=[])

        # print connect message
        self.connect_message()

    def get_idn(self):
        """"""Returns hardware information of the device.""""""
        return {""vendor"": ""Thorlabs"", ""model"": self.model,
                ""firmware"": self.version, ""serial"": self.serial_number}

    def _get_position(self) -> float:
        return self.apt.mot_get_position(self.serial_number)

    def _set_position(self, position: float):
        self.apt.mot_move_absolute_ex(self.serial_number, position, True)

    def _set_position_async(self, position: float):
        self.apt.mot_move_absolute_ex(self.serial_number, position, False)

    def _get_velocity_parameters(self) -> Tuple[float, float, float]:
        return self.apt.mot_get_velocity_parameters(self.serial_number)

    def _set_velocity_parameters(self,
                                 min_vel: Optional[float] = None, accn: Optional[float] = None, max_vel: Optional[float] = None):
        if min_vel is None or accn is None or max_vel is None:
            old_min_vel, old_accn, old_max_vel = self._get_velocity_parameters()
            if min_vel is None:
                min_vel = old_min_vel
            if accn is None:
                accn = old_accn
            if max_vel is None:
                max_vel = old_max_vel
        return self.apt.mot_set_velocity_parameters(self.serial_number, min_vel, accn, max_vel)

    def _get_velocity_min(self) -> float:
        min_vel, _, _ = self._get_velocity_parameters()
        return min_vel

    def _set_velocity_min(self, min_vel: float):
        self._set_velocity_parameters(min_vel=min_vel)

    def _get_velocity_acceleration(self) -> float:
        _, accn, _ = self._get_velocity_parameters()
        return accn

    def _set_velocity_acceleration(self, accn: float):
        self._set_velocity_parameters(accn=accn)

    def _get_velocity_max(self) -> float:
        _, _, max_vel = self._get_velocity_parameters()
        return max_vel

    def _set_velocity_max(self, max_vel: float):
        self._set_velocity_parameters(max_vel=max_vel)

    def _get_home_parameters(self) -> Tuple[int, int, float, float]:
        return self.apt.mot_get_home_parameters(self.serial_number)

    def _set_home_parameters(self, direction: Optional[int] = None, lim_switch: Optional[int] = None,
                             velocity: Optional[float] = None, zero_offset: Optional[float] = None):
        if direction is None or lim_switch is None or velocity is None or zero_offset is None:
            old_direction, old_lim_switch, old_velocity, old_zero_offset = self._get_home_parameters()
            if direction is None:
                direction = old_direction
            if lim_switch is None:
                lim_switch = old_lim_switch
            if velocity is None:
                velocity = old_velocity
            if zero_offset is None:
                zero_offset = old_zero_offset

        return self.apt.mot_set_home_parameters(self.serial_number,
                                                direction, lim_switch, velocity, zero_offset)

    def _get_home_direction(self) -> int:
        direction, _, _, _ = self._get_home_parameters()
        return direction

    def _set_home_direction(self, direction: int):
        self._set_home_parameters(direction=direction)

    def _get_home_lim_switch(self) -> int:
        _, lim_switch, _, _ = self._get_home_parameters()
        return lim_switch

    def _set_home_lim_switch(self, lim_switch: int):
        self._set_home_parameters(lim_switch=lim_switch)

    def _get_home_velocity(self) -> float:
        _, _, velocity, _ = self._get_home_parameters()
        return velocity

    def _set_home_velocity(self, velocity: float):
        self._set_home_parameters(velocity=velocity)

    def _get_home_zero_offset(self) -> float:
        _, _, _, zero_offset = self._get_home_parameters()
        return zero_offset

    def _set_home_zero_offset(self, zero_offset: float):
        self._set_home_parameters(zero_offset=zero_offset)

    def _stop(self):
        self.apt.mot_stop_profiled(self.serial_number)

    def _move_direction(self, direction: int):
        self.apt.mot_move_velocity(self.serial_number, direction)

    def _enable(self):
        self.apt.enable_hw_channel(self.serial_number)

    def _disable(self):
        self.apt.disable_hw_channel(self.serial_number)

    def _move_home(self):
        self.apt.mot_move_home(self.serial_number, True)

    def _move_home_async(self):
        self.apt.mot_move_home(self.serial_number, False)
"
161,2500.0,"Munich, Germany","the two-channel HMC8042 delivers a maximum of 5 A. The HMC804x family offers a wide range of logging functions, an integrated energy meter and electronic fuses that can be individually combined for each channel, making it ideal for hardware developers, labs and industrial environments. Linear switching power supplies ensure high efficiency, for minimum heat dissipation even at full load. Developers and industrial users benefit from useful functions such as sequenced start of channels, EasyArb and EasyRamp functions that are directly programmable on the device, an analog input for external control of voltage values, an external trigger input for controlling channels and arb steps, and adjustable overvoltage/overpower protection for each channel.",HMC 8042,481.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.batronix.com/pdf/Rohde-Schwarz/HMC804X/HMC804X_Datasheet_EN.pdf,"[OrderedDict([('id', 'atttUq01ic3TQNeuu'), ('width', 640), ('height', 360), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Z7WlnMHFiMZgZ5VyVPAu8g/w7VjvPXni1jinj-4dxUTpAAxOYY_xt4UIJf31Zi6UWSxZDYkWz4NGR1Zc3XG58_94CEKwPJ0Ff1iI3zNIZYJEI7-huPzVmhMvbqlReE2vT5Nj4uuxksX0lbmcMOCS7SjWjyh5kVKY_5Bxz_brJb5nLZ-m-xXm0PHgUrDqjuhC-o/uEtSBuvVkpcOC4Ym_ZmcCVQGzIfjy49a6fS0BO6ZVWI'), ('filename', 'hmc804x-dc-power-supply-front-view-rohde-schwarz_200_979_640_360_1.jpg'), ('size', 39364), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/v1JBHCKYpzZczgxxYLm_9A/FN8xC3MX1YJ9xELQIQGmL_ZyOri_1OeCPX2CU2ZfwLmuTmicfW4vEIQE8OnxXtCIXr6K2NZnvVoTlsfgygCzKQ/QEQqlhYW_Hhep2tbgyRqOAezPmOZ9jd40h9joutulhw'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/cKKje41yFyo5RyuKMR_sJQ/J6nRIJI6NKmGG7wWlbzBJ5wL5Sj4i5X231eLE2DOT7ksWP-GroltEfpqwqUF3_N4AVMjXuZLxxaGsuWikaBw1A/M-1c0AnEbaNtnTCGecMLkLKVvSKb6qSP4jVKlqHUfZ0'), ('width', 640), ('height', 360)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Jave52fzdSjMurpOoQJrLQ/wy4YkZ_2ujgG95o8adfHqrP1xxjq4gusMFkmMycIT1qlcihGqkzhBo9NKqi3R9LpSMfmTpsYjDmiIGkzI29qNg/B1ZFzpBfXDa9LImR_cuMEtLCQ8_PnYkTVBZ8VnrbGm8'), ('width', 3000), ('height', 3000)]))]))])]",https://www.testequity.com/product/22868-2-HMC8042-02?gclid=CjwKCAjw-vmkBhBMEiwAlrMeFwUGdQlv0LWh2NEPZyw2XgfWgtfdPvk2wK7auon8PySZGMu5L_Qv2hoC-kIQAvD_BwE,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMC8042.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042,1600.0,,,,"from .private.HMC804x import _RohdeSchwarzHMC804x

class RohdeSchwarzHMC8042(_RohdeSchwarzHMC804x):
    """"""
    This is the qcodes driver for the Rohde & Schwarz HMC8042 Power Supply
    """"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, num_channels=2, **kwargs)
"
163,5420.0,USA,"Keysight's M3201A PXIe arbitrary waveform generator offers 4 channels, on-board FPGA with optional FPGA software tools that enable real-time sequencing, inter-module synchronization, and graphical FPGA design environment.",Keysight M 3201 A,305.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software
",Qcodes Community,Keysight,"[OrderedDict([('id', 'attSixem5KGYQVz77'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CpwBp96kY5dUnguQiqYpww/J9lJkFD16xSDAPvmgv_d56vj9Lqq6ItNUW_5UoMyN-S0Shnh0JOEO8csLebz7Xu4Z8gE07FUhS-nDKuUnQrjlgGl9TDwvdw0ri8xFYWoqJI/u6-p03gBGsvJDX5pDkq8g03E4crw0PcqBr7jJQHqkOI'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OHgE-tcyvCBxuFqu2T7t_A/az7HG7f0QS1vnZ52VcX5uXPXMyaXWm0aU0XpvVcbL-iaXMyXmXzrSR-B4rc2L0dd-f6o9qeZB5ZLJwyXF5Ddw0s88QIR6eB5yl5YgvaK938/HNFmDeic35zFTM_Qz4ZdgLI6Ram83KauYXm5s4osP2w'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EXCh0xCs_7MHSTx5Zz4CPA/Vm4LQikWqhLq7BQ4diBo6XQAAS5CLk1cfq9-S4yaTSMKcSuykUmlSiBgLAQSc73c_ggpGgo-k66P49Sg6IvYNQsS9xuXJrGvmuhM7B3ygEQ/9HyBiUmvRW0XEd9GhYUpcS4ZSI2K8DRyjI70MXa9kr4'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RQAo4UuLDVUF9_USADgP3w/dB55bQeyNGnlF3qRJsUAPWsAKtJnjKtA7XkA6scBhm0AkS5S6u_fVInQqEF-cIPNvke9dKGD1bz6c74uEryk4Ez3lO2dlivDqcW_KnVzMQM/vqKwTVltxdBX1CwxjuFTUNpzJ5R2NnBqC3e7aQx3xzA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT M3201A RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",KEYSIGHT M3201A,https://www.keysight.com/us/en/assets/7018-05391/data-sheets/5992-1797.pdf,"[OrderedDict([('id', 'attzfnOP0CNrZnqTK'), ('width', 2000), ('height', 1685), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/YHFRKUMDCxUi9JIhUX7UxQ/eFYm14coZBGe7DIykHOsemEv1htLxSm6FBu9Jkzusrsw7iyMFQbHTpGZlmdoCTYFAYVazkPTLv60g7vWAvONB2jC6z2wI762gUXorexP8KM/B4uu-lGSseAo8yX2OsUYxYj32nsbVsZXrfQyS3wWIqo'), ('filename', 'PROD-2747478-01.png'), ('size', 1198367), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/jWiKhkTBqtunqZKzGMDq1A/oSqGUtn52ZsQTZH2yVqOqfAQ_Ll5CPqQcr1O9rA7I1kpesM6tlEiEnWBVzri7wSOUp5bnncBziluuM6631khDg/2tRx0CZXzjF5OpISkq5viRSnJVlFkYhAJvyqysKTxTg'), ('width', 43), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_ofFvC4sIgxinGg5UtplvQ/YAzHjyRFxXj6E-CgOIYTlPWYBXxyfXHFAjYqlGcmAGKcSvKb50l3WZt5q-O8sIDWFhWseUu0pHnkN3ks1keL5Q/KJcwZOC5NcGLwVPG7fxB-STu9ivnF9i7QGskSCMueQs'), ('width', 608), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_QuPG2uoraX3v1XmnFnA2g/x9aF9MapQoJ58BUUoVN7YHGsCbiI5znuA4FQGZkNgANyNzHOtrUSLNs-fu5CoHHFTr8EoAleWY82Q8gYhtt_aw/2bGAC8GEGgk8fvdavsVmdFnBHYUWT6sWcSjmMifEIA8'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/products/arbitrary-waveform-generators/pxi-arbitrary-waveform-generators.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Keysight/Keysight_M3201A.py,,,,,,"# from qcodes import validators as validator
# from functools import partial
#
# from .SD_common.SD_Module import *
from .SD_common.SD_AWG import SD_AWG


class Keysight_M3201A(SD_AWG):
    """"""
    This is the qcodes driver for the Keysight M3201A AWG PXIe card

    Args:
        name (str): name for this instrument, passed to the base instrument
        chassis (int): chassis number where the device is located
        slot (int): slot number where the device is plugged in
    """"""

    def __init__(self, name, chassis=1, slot=7, **kwargs):
        super().__init__(name, chassis, slot, channels=4, triggers=8, **kwargs)
"
169,2.0,"COPENHAGEN, DENMARK","The original and popular QDAC from QDevil is a high-precision low-noise computer-controlled voltage generator designed for DC and low-frequency control of high impedance devices, such as gates in quantum electronics and quantum computer qubits. It also comes in a “high-current” version which can source up to 10 mA, for example for flux biasing of superconducting qubits. In addition to precise and stable voltage output, the QDAC can measure output currents, for example, to detect leaking gates or shorted bonding wires. The QDAC originates from the laboratories of the Center for Quantum Devices at the University of Copenhagen, where it is used for quantum computing research. The QDAC has 24 channels and offers a cost-effective way of getting many high-quality D/A converter channels.",Qdac 1,425.0,"Founded in 2016, QDevil is an international quantum technology company focused on developing and manufacturing auxiliary electronics and specialized components, operating from mK to room temperature. The mission is to accelerate research and development in quantum electronics labs. To fulfill the mission QDevil helps customers around the world by supplying world-class auxiliary electronics.
",Qcodes Community,Qdevil,"[OrderedDict([('id', 'attz9erwtKcDDy955'), ('width', 150), ('height', 22), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Iaef-6NIciOWKsa10JxRkQ/2GD5HG7BPockb2ex1jGFrrTiU7BBCn-BUh4yFbVUC5HnbjZi95IkzXzO47AqXvh4ovR1NzYgfo7u3K7F-Iy8CnFqjwnWhHdoP_drQzUgyBk/oOtNVvCMSwDpcFzmES9UhD5dKEVKxrogflaoIXeeec8'), ('filename', 'QM-and-QD-logos4.svg'), ('size', 30131), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FEuZ28mowNgi5RsJVepsLA/nE8QsdJyxc7HF5HxYg-4FFyeNkCTIKwJqjAwoaeytJ-iQqogaf-JVLfsCMLSML3dXxikZxzR6Rup1FkWKPSsp6TdH_lwDt2uwXfZZObRFaw/Mr8sxOK6ErffdVcGCGd9Noq-q8_R0fFznaYT4z6B90Y'), ('width', 150), ('height', 22)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Bc9p_dlutAJiwDTZk-lRuA/xZRaVdQKhbsxI4GHc1mwsR36JbnSB5oSf8NvVCn4V_nuitBVHtQnG-gO3jON58ALpa1lVZoXLx1CboupbmfRHo3f8f4YYwqAuWrV1agWFVk/kFtddMZcEdyeo4wkQWKEZgqJAOXxNMFF7M0ly33iR-U'), ('width', 150), ('height', 22)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZWUIK3fC6Wb-Ng9czNLYlA/m5_LISZrGWJewXrhSx_993pJ9dPAO2-JAj8Mg-w58KQZkiDxtbCozX6QJOc4ji80rHiwF-hC-y3R2Iq50RB-K7PdX7GbvFYACEcEIz4kCkg/5N7AzqvO5ZJj-aPr-dLGjU-y_oooID3NX9eRPyvp5zE'), ('width', 3000), ('height', 3000)]))]))])]",https://qdevil.com/,"Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies, Digital-Analog Converter",https://en.wikipedia.org/wiki/Electric_generator,"['Power Supplies', 'Digital-Analog Converter']","In electricity generation, a generator[1] is a device that converts motive power (mechanical energy) or fuel-based power (chemical energy) into electric power for use in an external circuit. Sources of mechanical energy include steam turbines, gas turbines, water turbines, internal combustion engines, wind turbines and even hand cranks. The first electromagnetic generator, the Faraday disk, was invented in 1831 by British scientist Michael Faraday. Generators provide nearly all of the power for electric power grids.",,,"[OrderedDict([('id', 'attJwDhnnFpXdEJS9'), ('width', 768), ('height', 512), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EJXj9qJB4ZiPzaXy_tPZxg/bnA6rl1BQ3r62xjjtumfNYOoW9v54Gr4oYt_Vft5y-0LcniaACdcFT-9TZDhrnLVqI7BDP4CqnPxOC-zNqi6nLsj9ip3BpvYLLGGeTsKPj4/D-WKi9MyLBwlJkcFvhZwGWX0LgwBhasoslmmhw_JcXQ'), ('filename', 'QDAC24_1024-768x512.png'), ('size', 70154), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/AXGsoDAA55a0_ziJNTX8Cw/eUhfjH0s3MlSQ2uHrZcZt1PoDdEHLADYVUdZu0ghun1svzsOeqe-VFU2ceVdfPWsDYCAW8PrcLzXajaq4V4YMw/tm0YwyQTL9ahUPCMudDejn-44QvimqrF_zAShr9_yto'), ('width', 54), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/cOqExrHDx3NEP-VG2IbbBQ/a4_oPuNi8j3Z7LngE7MKZ2YAq_lyoaKLtKu4IaQNyQxRNopdVHX1cMMr-lSrryaOO_8PKK17rQhhWE_HGOnO9A/bVZLPNhOa4wEEPl4AMYGQ3CZdh6uzSfU8puCsQwKLoE'), ('width', 768), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rGIUR0ReZg_ks4iLR_ctLQ/wskVA2fHgc7dJTtM43FgRPKpb6nRUmnL2aNNpFOGX9TcuH-wzrnWv_fQxDcZhTSHpuihCaxixHPlQtOLXokJSQ/N6iiC_6gBAW_Tpg152O9PuXzhZNY4hyFu1nGhP5WcSE'), ('width', 3000), ('height', 3000)]))]))])]",https://qdevil.com/qdac/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QDevil/QDAC1.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QDevil.html#module-qcodes_contrib_drivers.drivers.QDevil.QDAC1,,,,,"# QCoDeS driver for the QDevil QDAC using channels
# Adapted by QDevil from the qdev QDac driver in qcodes
# Version 2.2 QDevil 2023-02-20

import logging
import time
from collections import namedtuple
from enum import Enum
from functools import partial
from typing import Any, Dict, Optional, Sequence, Tuple, Union

import pyvisa
import pyvisa.constants
from pyvisa.resources.serial import SerialInstrument

from qcodes import validators as vals
from qcodes.instrument import ChannelList, InstrumentChannel, VisaInstrument
from qcodes.parameters import MultiChannelInstrumentParameter, ParamRawDataType

LOG = logging.getLogger(__name__)


_ModeTuple = namedtuple('_ModeTuple', 'v i')


class Mode(Enum):
    """"""
    Enum type use as the mode parameter for channels
    defining the combined voltage and current range.

    get_label() returns a text representation of the mode.
    """"""
    vhigh_ihigh = _ModeTuple(v=0, i=1)
    vhigh_ilow = _ModeTuple(v=0, i=0)
    vlow_ilow = _ModeTuple(v=1, i=0)

    def get_label(self) -> str:
        _MODE_LABELS = {
                ""vhigh_ihigh"": ""V range high / I range high"",
                ""vhigh_ilow"": ""V range high / I range low"",
                ""vlow_ilow"": ""V range low / I range low""}
        return _MODE_LABELS[self.name]


class Waveform:
    # Enum-like class defining the built-in waveform types
    sine = 1
    square = 2
    triangle = 3
    staircase = 4
    all_waveforms = [sine, square, triangle, staircase]


class Generator:
    #  Class used in the internal book keeping of generators
    def __init__(self, generator_number: int):
        self.fg = generator_number
        self.t_end = 9.9e9


class QDacChannel(InstrumentChannel):
    """"""
    A single output channel of the QDac.

    Exposes chan.v, chan.i, chan.mode, chan.slope,
    chan.sync, chan.sync_delay, chan.sync_duration.\n
    NB: Set v to zero before changing mode if the
    mode_force lfag is False (default).
    """"""

    def __init__(self, parent: ""QDac"", name: str, channum: int):
        """"""
        Args:
            parent: The instrument to which the channel belongs.
            name: The name of the channel
            channum: The number of the channel (1-24 or 1-48)
        """"""
        super().__init__(parent, name)

        # Add the parameters
        self.add_parameter(name='v',
                           label=f'Channel {channum} voltage',
                           unit='V',
                           set_cmd=partial(self._parent._set_voltage, channum),
                           get_cmd=partial(self._parent._get_voltage, channum),
                           get_parser=float,
                           # Initial range. Updated on init and during
                           # operation:
                           vals=vals.Numbers(-9.99, 9.99)
                           )

        self.add_parameter(name='mode',
                           label=f'Channel {channum} mode.',
                           set_cmd=partial(self._parent._set_mode, channum),
                           get_cmd=None,
                           vals=vals.Enum(*list(Mode))
                           )

        self.add_parameter(name='i',
                           label=f'Channel {channum} current',
                           get_cmd=f'get {channum}',
                           unit='A',
                           get_parser=self._parent._current_parser
                           )

        self.add_parameter(name='slope',
                           label=f'Channel {channum} slope',
                           unit='V/s',
                           set_cmd=partial(self._parent._setslope, channum),
                           get_cmd=partial(self._parent._getslope, channum),
                           vals=vals.MultiType(vals.Enum('Inf'),
                                               vals.Numbers(1e-3, 10000))
                           )

        self.add_parameter(name='sync',
                           label=f'Channel {channum} sync output',
                           set_cmd=partial(self._parent._setsync, channum),
                           get_cmd=partial(self._parent._getsync, channum),
                           vals=vals.Ints(0, 4)  # Updated at qdac init
                           )

        self.add_parameter(name='sync_delay',
                           label=f'Channel {channum} sync pulse delay',
                           unit='s',
                           get_cmd=None, set_cmd=None,
                           vals=vals.Numbers(0, 10000),
                           initial_value=0
                           )

        self.add_parameter(
                        name='sync_duration',
                        label=f'Channel {channum} sync pulse duration',
                        unit='s',
                        get_cmd=None, set_cmd=None,
                        vals=vals.Numbers(0.001, 10000),
                        initial_value=0.01
                        )

    def snapshot_base(
            self,
            update: Optional[bool] = False,
            params_to_skip_update: Optional[Sequence[str]] = None
    ) -> Dict[Any, Any]:
        update_currents = self._parent._update_currents and update
        if update and not self._parent._get_status_performed:
            self._parent._update_cache(update_currents=update_currents)
        # call update_cache rather than getting the status individually for
        # each parameter. This is only done if _get_status_performed is False
        # this is used to signal that the parent has already called it and
        # no need to repeat.
        if params_to_skip_update is None:
            params_to_skip_update = ('v', 'i', 'mode')
        snap = super().snapshot_base(
                            update=update,
                            params_to_skip_update=params_to_skip_update)
        return snap


class QDacMultiChannelParameter(MultiChannelInstrumentParameter):
    """"""
    The class to be returned by __getattr__ of the ChannelList. Here customised
    for fast multi-readout of voltages.
    """"""
    def __init__(self, channels: Sequence[InstrumentChannel],
                 param_name: str,
                 *args: Any,
                 **kwargs: Any):
        super().__init__(channels, param_name, *args, **kwargs)

    def get_raw(self) -> Tuple[ParamRawDataType, ...]:
        """"""
        Return a tuple containing the data from each of the channels in the
        list.
        """"""
        # For voltages, we can do something slightly faster than the naive
        # approach by asking the instrument for a channel overview.

        if self._param_name == 'v':
            qdac = self._channels[0]._parent
            qdac._update_cache(update_currents=False)
            output = tuple(chan.parameters[self._param_name].cache()
                           for chan in self._channels)
        else:
            output = tuple(chan.parameters[self._param_name].get()
                           for chan in self._channels)

        return output


class QDac(VisaInstrument):
    """"""
    Channelised driver for the QDevil QDAC voltage source.

    Exposes channels, temperature sensors and calibration output,
    and 'ramp_voltages' + 'ramp_voltages_2d' for multi channel ramping.

    In addition a 'mode_force' flag (default False) is exposed.
    'mode_force' (=True) is used to enable voltage range switching, via
    the channel 'mode' parameter, even at non-zero output voltages.

    Tested with Firmware Version: 1.07

    The driver assumes that the instrument is ALWAYS in verbose mode OFF
    and sets this as part of the initialization, so please do not change this.
    """"""

    # set nonzero value (seconds) to accept older status when reading settings
    max_status_age = 1

    def __init__(self,
                 name: str,
                 address: str,
                 update_currents: bool = False,
                 **kwargs: Any):
        """"""
        Instantiates the instrument.

        Args:
            name: The instrument name used by qcodes
            address: The VISA name of the resource
            update_currents: Whether to query all channels for their
                current sensor value on startup, which takes about 0.5 sec
                per channel. Default: False.

        Returns:
            QDac object
        """"""

        super().__init__(name, address, **kwargs)
        handle = self.visa_handle
        self._get_status_performed = False

        assert isinstance(handle, SerialInstrument)
        # Communication setup + firmware check
        handle.baud_rate = 460800
        handle.parity = pyvisa.constants.Parity(0)
        handle.data_bits = 8
        self.set_terminator('\n')
        handle.write_termination = '\n'
        self._write_response = ''
        firmware_version = self._get_firmware_version()
        if firmware_version < 1.07:
            LOG.warning(f""Firmware version: {firmware_version}"")
            raise RuntimeError('''
                No QDevil QDAC detected or the firmware version is obsolete.
                This driver only supports version 1.07 or newer. Please
                contact info@qdevil.com for a firmware update.
                ''')

        # Initialse basic information and internal book keeping
        self.num_chans = self._get_number_of_channels()
        num_boards = int(self.num_chans/8)
        self._output_n_lines = self.num_chans + 2
        self._chan_range = range(1, 1 + self.num_chans)
        self.channel_validator = vals.Ints(1, self.num_chans)
        self._reset_bookkeeping()

        # Add channels (and channel parameters)
        channels = ChannelList(self, ""Channels"", QDacChannel,
                               snapshotable=False,
                               multichan_paramclass=QDacMultiChannelParameter)

        for i in self._chan_range:
            channel = QDacChannel(self, f'chan{i:02}', i)
            channels.append(channel)
            self.add_submodule(f""ch{i:02}"", channel)
        self.add_submodule(""channels"", channels.to_channel_tuple())

        # Updatechannel  sync port validator according to number of boards
        self._num_syns = max(num_boards-1, 1)
        for chan in self._chan_range:
            self.channels[chan-1].sync.vals = vals.Ints(0, self._num_syns)

        # Add non-channel parameters
        for board in range(num_boards):
            for sensor in range(3):
                label = f'Board {board}, Temperature {sensor}'
                self.add_parameter(name=f'temp{board}_{sensor}',
                                   label=label,
                                   unit='C',
                                   get_cmd=f'tem {board} {sensor}',
                                   get_parser=self._num_verbose)

        self.add_parameter(name='cal',
                           set_cmd='cal {}',
                           vals=vals.Ints(0, self.num_chans))

        self.add_parameter(name='mode_force',
                           label='Mode force',
                           get_cmd=None, set_cmd=None,
                           vals=vals.Bool(),
                           initial_value=False)

        # Due to a firmware bug in 1.07 voltage ranges are always reported
        # vebosely. So for future compatibility we set verbose True
        self.write('ver 1')
        self._update_voltage_ranges()
        # The driver require verbose mode off except for the above command
        self.write('ver 0')
        self._verbose = False  # Just so that the code can check the state
        self.connect_message()
        LOG.info('[*] Querying all channels for voltages and currents...')
        self._update_cache(update_currents=update_currents)
        self._update_currents = update_currents
        self._load_state()
        LOG.info('[+] Done')

    def _reset_bookkeeping(self) -> None:
        """"""
        Resets all internal variables used for ramping and
        synchronization outputs.
        """"""
        # Assigned slopes. Entries will eventually be {chan: slope}
        self._slopes:  Dict[int, Union[str, float]] = {}
        # Function generators and triggers (used in ramping)
        self._fgs = set(range(1, 9))
        self._assigned_fgs: Dict[int, Generator] = {}  # {chan: fg}
        self._trigs = set(range(1, 10))
        self._assigned_triggers: Dict[int, int] = {}  # {fg: trigger}
        # Sync channels
        self._syncoutputs: Dict[int, int] = {}  # {chan: syncoutput}

    def _load_state(self) -> None:
        """"""
        Used as part of initiaisation. DON'T use _load_state() separately.\n
        Updates internal book keeping of running function generators.
        used triggers and active sync outputs.\n
        Slopes can not be read/updated as it is not possible to
        say if a generator is running because a slope has been assigned
        or because it is being ramped direcly (by e.g. ramp_voltages_2d()).
        """"""
        # Assumes that all variables and virtual
        # parameters have been initialised (and read)

        self.write('ver 0')  # Just to be on the safe side

        self._reset_bookkeeping()
        for ch_idx in range(self.num_chans):
            chan = ch_idx + 1
            # Check if the channels are being ramped
            # It is not possible to find out if it has a slope assigned
            # as it may be ramped explicitely by the user
            # We assume that generators are running, but we cannot know
            self.write(f'wav {chan}')
            fg_str, amplitude_str, offset_str = self._write_response.split(',')
            amplitude = float(amplitude_str)
            offset = float(offset_str)
            fg = int(fg_str)
            if fg in range(1, 9):
                voltage = self.channels[ch_idx].v.get()
                time_now = time.time()
                self.write(f'fun {fg}')
                response = self._write_response.split(',')
                waveform = int(response[0])
                # Probably this driver is involved if a stair case is assigned
                if waveform == Waveform.staircase:
                    if len(response) == 6:
                        step_length_ms, no_steps, rep, rep_remain_str, trigger \
                            = response[1:6]
                        rep_remain = int(rep_remain_str)
                    else:
                        step_length_ms, no_steps, rep, trigger = response[1:5]
                        rep_remain = int(rep)
                    ramp_time = 0.001 * float(step_length_ms) * int(no_steps)
                    ramp_remain = 0
                    if (amplitude != 0):
                        ramp_remain = (amplitude+offset-voltage)/amplitude
                    if int(rep) == -1:
                        time_end = time_now + 315360000
                    else:
                        time_end = (ramp_remain + max(0, rep_remain-1)) \
                                   * ramp_time + time_now + 0.001
                else:
                    if waveform == Waveform.sine:
                        period_ms, rep, rep_remain_str, trigger = response[1:5]
                    else:
                        period_ms, _, rep, rep_remain_str, trigger = response[1:6]
                    if int(rep) == -1:
                        time_end = time_now + 315360000  # 10 years from now
                    else:  # +1 is just a safe guard
                        time_end = time_now + 0.001 \
                                   * (int(rep_remain_str)+1) * float(period_ms)

                self._assigned_fgs[chan] = Generator(fg)
                self._assigned_fgs[chan].t_end = time_end
                if int(trigger) != 0:
                    self._assigned_triggers[fg] = int(trigger)
                for syn in range(1, self._num_syns+1):
                    self.write(f'syn {syn}')
                    syn_fg, delay_ms, duration_ms = \
                        self._write_response.split(',')
                    if int(syn_fg) == fg:
                        self.channels[ch_idx].sync.cache.set(syn)
                        self.channels[ch_idx].sync_delay(float(delay_ms)/1000)
                        self.channels[ch_idx].sync_duration(
                            float(duration_ms)/1000)

    def reset(self, update_currents: bool = False) -> None:
        """"""
        Resets the instrument setting all channels to zero output voltage
        and all parameters to their default values, including removing any
        assigned sync putputs, function generators, triggers etc.
        """"""
        # In case the QDAC has been switched off/on
        # clear the io buffer and set verbose False
        self.device_clear()
        self.write('ver 0')

        self.cal(0)
        # Resetting all slopes first will cause v.set() disconnect generators
        self.channels[0:self.num_chans].slope('Inf')
        self.channels[0:self.num_chans].v(0)
        self.channels[0:self.num_chans].mode(Mode.vhigh_ihigh)
        self.channels[0:self.num_chans].sync(0)
        self.channels[0:self.num_chans].sync_delay(0)
        self.channels[0:self.num_chans].sync_duration(0.01)

        if update_currents:
            self.channels[0:self.num_chans].i.get()
        self.mode_force(False)
        self._reset_bookkeeping()

    def snapshot_base(
            self,
            update: Optional[bool] = False,
            params_to_skip_update: Optional[Sequence[str]] = None
    ) -> Dict[Any, Any]:
        update_currents = self._update_currents and update is True
        if update:
            self._update_cache(update_currents=update_currents)
            self._get_status_performed = True
        # call _update_cache rather than getting the status individually for
        # each parameter. We set _get_status_performed to True
        # to indicate that each update channel does not need to call this
        # function as opposed to when snapshot is called on an individual
        # channel
        snap = super().snapshot_base(
                                update=update,
                                params_to_skip_update=params_to_skip_update)
        self._get_status_performed = False
        return snap

    #########################
    # Channel gets/sets
    #########################

    def _get_voltage(self, chan: int) -> str:
        """"""
        Clear the output from the instrument and ask for the current voltage

        Args:
            chan (int): The 1-indexed channel number
        """"""
        self.clear_read_queue()
        self.write(f'set {chan}')
        return self._write_response

    def _set_voltage(self, chan: int, v_set: float) -> None:
        """"""
        set_cmd for the chXX_v parameter

        Args:
            chan: The 1-indexed channel number
            v_set: The target voltage

        If a finite slope has been assigned, a function generator will
        ramp the voltage.
        """"""
        slope = self._slopes.get(chan, None)
        if not slope:
            # Should not be necessary to wav here.
            self.write('wav {ch} 0 0 0;set {ch} {voltage:.6f}'
                       .format(ch=chan, voltage=v_set))
            return
        # We need .get and not cache/get_latest in case a ramp
        # was interrupted
        v_start = self.channels[chan-1].v.get()
        v_span = v_set - v_start
        v_amplitude = abs(v_span)
        s_duration = v_amplitude / slope
        LOG.info(f'Slope: {slope}, time: {s_duration}')
        if v_amplitude <= 10:
            # SYNCing happens inside ramp_voltages
            self.ramp_voltages([chan], [v_start], [v_set], s_duration)
            return
        # Divide sweep into two parts
        v_half_span = v_span / 2
        s_half_duration = s_duration / 2
        v_half_way = v_start + v_half_span
        self.ramp_voltages([chan], [v_start], [v_half_way], s_half_duration)
        LOG.warning('Trying to ramp more than 10 volts. '
            'Waiting for first ramp to finish')
        time.sleep(s_half_duration)
        self.ramp_voltages([chan], [v_half_way], [v_set], s_half_duration)

    def _set_mode(self, chan: int, new_mode: Mode) -> None:
        """"""
        set_cmd for the QDAC's mode (combined voltage and current sense range).
        It is not possible to switch from voltage range without setting the
        the voltage to zero first or set the global mode_force parameter True.
        """"""
        def _clipto(value: float, min_: float, max_: float) -> float:
            errmsg = (""Voltage is outside the bounds of the new voltage range""
                      "" and is therefore clipped."")
            if value > max_:
                LOG.warning(errmsg)
                return max_
            elif value < min_:
                LOG.warning(errmsg)
                return min_
            else:
                return value

        # It is not possible ot say if the channel is connected to
        # a generator, so we need to ask.
        def wav_or_set_msg(chan: int, new_voltage: float) -> str:
            self.write(f'wav {chan}')
            fw_str = self._write_response
            gen, _, _ = fw_str.split(',')
            if int(gen) > 0:
                # The amplitude must be set to zero to avoid potential overflow
                # Assuming that voltage range is not changed during a ramp
                return 'wav {} {} {:.6f} {:.6f}'\
                        .format(chan, int(gen), 0, new_voltage)
            else:
                return f'set {chan} {new_voltage:.6f}'

        old_mode = self.channels[chan-1].mode.cache()
        new_vrange = new_mode.value.v
        old_vrange = old_mode.value.v
        new_irange = new_mode.value.i
        old_irange = old_mode.value.i
        message = ''
        max_zero_voltage = {0: 20e-6, 1: 3e-6}
        NON_ZERO_VOLTAGE_MSG = (
                'Please set the voltage to zero before changing the voltage'
                ' range in order to avoid jumps or spikes.'
                ' Or set mode_force=True to allow voltage range change for'
                ' non-zero voltages.')

        if old_mode == new_mode:
            return

        # If the voltage range is going to change we have to take care of
        # setting the voltage after the switch, and therefore read it first
        # We also need to make sure than only one of the voltage/current
        # relays is on at a time (otherwise the firmware will enforce it).

        if (new_irange != old_irange) and (new_vrange == old_vrange == 0):
            # Only the current sensor relay has to switch:
            message += f'cur {chan} {new_irange}'
        # The voltage relay (also) has to switch:
        else:
            # Current sensor relay on->off before voltage relay off->on:
            if new_irange < old_irange and new_vrange > old_vrange:
                message += f'cur {chan} {new_irange};'
            old_voltage = self.channels[chan-1].v.get()
            # Check if voltage is non-zero and mode_force is off
            if ((self.mode_force() is False) and
                    (abs(old_voltage) > max_zero_voltage[old_vrange])):
                raise ValueError(NON_ZERO_VOLTAGE_MSG)
            new_voltage = _clipto(
                    old_voltage, self.vranges[chan][new_vrange]['Min'],
                    self.vranges[chan][new_vrange]['Max'])
            message += f'vol {chan} {new_vrange};'
            message += wav_or_set_msg(chan, new_voltage)
            # Current sensor relay off->on after voltage relay on->off:
            if new_irange > old_irange and new_vrange < old_vrange:
                message += f';cur {chan} {new_irange}'
            self.channels[chan-1].v.vals = self._v_vals(chan, new_vrange)
            self.channels[chan-1].v.cache.set(new_voltage)

        self.write(message)

    def _v_vals(self, chan: int, vrange_int: int) -> vals.Numbers:
        """"""
        Returns the validator for the specified voltage range.
        """"""
        return vals.Numbers(self.vranges[chan][vrange_int]['Min'],
                            self.vranges[chan][vrange_int]['Max'])

    def _update_v_validators(self) -> None:
        """"""
        Command for setting all 'v' limits ('vals') of all channels to the
        actual calibrated output limits for the range each individual channel
        is currently in.
        """"""
        for chan in range(1, self.num_chans+1):
            vrange = self.channels[chan-1].mode.value.v
            self.channels[chan-1].v.vals = self._v_vals(chan, vrange)

    def _num_verbose(self, s: str) -> float:
        """"""
        Turns a return value from the QDac into a number.
        If the QDac is in verbose mode, this involves stripping off the
        value descriptor.
        """"""
        if self._verbose:
            s = s.split(': ')[-1]
        return float(s)

    def _current_parser(self, s: str) -> float:
        """"""
        Parser for chXX_i parameter (converts from uA to A)
        """"""
        return 1e-6*self._num_verbose(s)

    def _update_cache(self, update_currents: bool = False) -> None:
        """"""
        Function to query the instrument and get the status of all channels.
        Takes a while to finish.

        The `status` call generates 27 or 51 lines of output. Send the command
        and read the first one, which is the software version line
        the full output looks like:
        Software Version: 1.07\r\n
        Channel\tOut V\t\tVoltage range\tCurrent range\n
        \n
        8\t  0.000000\t\tX 1\t\tpA\n
        7\t  0.000000\t\tX 1\t\tpA\n
        ... (all 24/48 channels like this)
        (no termination afterward besides the \n ending the last channel)
        """"""
        irange_trans = {'hi cur': 1, 'lo cur': 0}
        vrange_trans = {'X 1': 0, 'X 0.1': 1}

        # Status call, check the
        version_line = self.ask('status')
        if version_line.startswith('Software Version: '):
            self.version = version_line.strip().split(': ')[1]
        else:
            self._wait_and_clear()
            raise ValueError('unrecognized version line: ' + version_line)

        # Check header line
        header_line = self.read()
        headers = header_line.lower().strip('\r\n').split('\t')
        expected_headers = ['channel', 'out v', '', 'voltage range',
                            'current range']
        if headers != expected_headers:
            raise ValueError('unrecognized header line: ' + header_line)

        chans_left = set(self._chan_range)
        while chans_left:
            line = self.read().strip()
            if not line:
                continue
            chanstr, v, _, vrange, _, irange = line.split('\t')
            chan = int(chanstr)
            vrange_int = int(vrange_trans[vrange.strip()])
            irange_int = int(irange_trans[irange.strip()])
            mode = Mode((vrange_int, irange_int))
            self.channels[chan-1].mode.cache.set(mode)
            self.channels[chan-1].v.cache.set(float(v))
            self.channels[chan-1].v.vals = self._v_vals(chan, vrange_int)
            chans_left.remove(chan)

        if update_currents:
            for chan in self._chan_range:
                self.channels[chan-1].i.get()

    def _setsync(self, chan: int, sync: int) -> None:
        """"""
        set_cmd for the chXX_sync parameter.

        Args:
            chan: The channel number (1-48 or 1-24)
            sync: The associated sync output (1-3 on 24 ch units
            or 1-5 on 48 ch units). 0 means 'unassign'
        """"""

        if chan not in range(1, self.num_chans+1):
            raise ValueError(
                    f'Channel number must be 1-{self.num_chans}.')

        if sync == 0:
            oldsync = self.channels[chan-1].sync.cache()
            # try to remove the sync from internal bookkeeping
            self._syncoutputs.pop(chan, None)
            # free the previously assigned sync
            if oldsync is not None:
                self.write(f'syn {oldsync} 0 0 0')
            return

        # Make sure to clear hardware an _syncoutpus appropriately
        if chan in self._syncoutputs:
            # Changing SYNC port for a channel
            oldsync = self.channels[chan-1].sync.cache()
            if sync != oldsync:
                self.write(f'syn {oldsync} 0 0 0')
        elif sync in self._syncoutputs.values():
            # Assigning an already used SYNC port to a different channel
            oldchan = [ch for ch, sy in self._syncoutputs.items()
                       if sy == sync]
            self._syncoutputs.pop(oldchan[0], None)
            self.write(f'syn {sync} 0 0 0')

        self._syncoutputs[chan] = sync
        return

    def _getsync(self, chan: int) -> int:
        """"""
        get_cmd of the chXX_sync parameter
        """"""
        return self._syncoutputs.get(chan, 0)

    def print_syncs(self) -> None:
        """"""
        Print assigned SYNC ports, sorted by channel number
        """"""
        for chan, sync in sorted(self._syncoutputs.items()):
            print(f'Channel {chan}, SYNC: {sync} (V/s)')

    def _setslope(self, chan: int, slope: Union[float, str]) -> None:
        """"""
        set_cmd for the chXX_slope parameter, the maximum slope of a channel.
        With a finite slope the channel will be ramped using a generator.

        Args:
            chan: The channel number (1-24 or 1-48)
            slope: The slope in V/s.
            Write 'Inf' to release the channelas slope channel and to release
            the associated function generator. The output rise time will now
            only depend on the analog electronics.
        """"""
        if chan not in range(1, self.num_chans+1):
            raise ValueError(
                        f'Channel number must be 1-{self.num_chans}.')

        if slope == 'Inf':
            # Set the channel in DC mode
            v_set = self.channels[chan-1].v.get()
            self.write('set {ch} {voltage:.6f};wav {ch} 0 0 0'
                       .format(ch=chan, voltage=v_set))

            # Now release the function generator and fg trigger (if possible)
            try:
                fg = self._assigned_fgs[chan]
                self._assigned_fgs[chan].t_end = 0
                self._assigned_triggers.pop(fg.fg)
            except KeyError:
                pass

            # Remove a sync output, if one was assigned
            if chan in self._syncoutputs:
                self.channels[chan-1].sync.set(0)
            # Now clear the assigned slope
            self._slopes.pop(chan, None)
        else:
            self._slopes[chan] = slope

    def _getslope(self, chan: int) -> Union[str, float]:
        """"""
        get_cmd of the chXX_slope parameter
        """"""
        return self._slopes.get(chan, 'Inf')

    def print_slopes(self) -> None:
        """"""
        Print the finite slopes assigned to channels, sorted by channel number
        """"""
        for chan, slope in sorted(self._slopes.items()):
            print(f'Channel {chan}, slope: {slope} (V/s)')

    def _get_minmax_outputvoltage(self, channel: int, vrange_int: int) -> Dict[str, float]:
        """"""
        Returns a dictionary of the calibrated Min and Max output
        voltages of 'channel' for the voltage given range (0,1) given by
        'vrange_int'
        """"""
        # For firmware 1.07 verbose mode and nn verbose mode give verbose
        # result, So this is designed for verbose mode
        if channel not in range(1, self.num_chans+1):
            raise ValueError(
                        f'Channel number must be 1-{self.num_chans}.')
        if vrange_int not in range(0, 2):
            raise ValueError('Range must be 0 or 1.')

        self.write(f'rang {channel} {vrange_int}')
        fw_str = self._write_response
        return {'Min': float(fw_str.split('MIN:')[1].split('MAX')[0].strip()),
                'Max': float(fw_str.split('MAX:')[1].strip())}

    def _update_voltage_ranges(self) -> None:
        # Get all calibrated min/max output values, requires verbose on
        # in firmware version 1.07
        self.write('ver 1')
        self.vranges = {}
        for chan in self._chan_range:
            self.vranges.update(
                {chan: {0: self._get_minmax_outputvoltage(chan, 0),
                        1: self._get_minmax_outputvoltage(chan, 1)}})
        self.write('ver 0')

    def write(self, cmd: str) -> None:
        """"""
        QDac always returns something even from set commands, even when
        verbose mode is off, so we'll override write to take this out
        if you want to use this response, we put it in self._write_response
        (but only for the very last write call)

        In this method we expect to read one termination char per command. As
        commands are concatenated by `;` we count the number of concatenated
        commands as count(';') + 1 e.g. 'wav 1 1 1 0;fun 2 1 100 1 1' is two
        commands. Note that only the response of the last command will be
        available in `_write_response`
        """"""

        LOG.debug(f""Writing to instrument {self.name}: {cmd}"")
        self.visa_handle.write(cmd)
        for _ in range(cmd.count(';')+1):
            self._write_response = self.visa_handle.read()
            if self._write_response.startswith('Error: '):
                LOG.warning(self._write_response)

    def read(self) -> str:
        return self.visa_handle.read()

    def _wait_and_clear(self, delay: float = 0.5) -> None:
        time.sleep(delay)
        self.visa_handle.clear()

    def clear_read_queue(self) -> Sequence[str]:
        """"""
        Flush the VISA message queue of the instrument

        Waits 1 ms between each read.

        Returns:
            Sequence[str]: Messages lingering in queue
        """"""
        lingering = list()
        with self.timeout.set_to(0.001):
            while True:
                try:
                    message = self.visa_handle.read()
                except pyvisa.VisaIOError:
                    break
                else:
                    lingering.append(message)
        return lingering

    def connect_message(self,
                        idn_param: str = 'IDN',
                        begin_time: Optional[float] = None) -> None:
        """"""
        Override of the standard Instrument class connect_message.
        Usually, the response to `*IDN?` is printed. Here, the
        software version is printed.
        """"""
        self.visa_handle.write('version')
        LOG.info('Connected to QDAC on {}, {}'.format(
                                    self._address, self.visa_handle.read()))

    def _get_firmware_version(self) -> float:
        """"""
        Check if the ""version"" command reponds. If so we probably have a QDevil
        QDAC, and the version number is returned. Otherwise 0.0 is returned.
        """"""
        self.write('version')
        fw_str = self._write_response
        if ((not (""Unrecognized command"" in fw_str))
                and (""Software Version: "" in fw_str)):
            fw_version = float(
                self._write_response.replace(""Software Version: "", """"))
        else:
            fw_version = 0.0
        return fw_version

    def _get_number_of_channels(self) -> int:
        """"""
        Returns the number of channels for the instrument
        """"""
        self.write('boardNum')
        fw_str = self._write_response
        return 8*int(fw_str.strip(""numberOfBoards:""))

    def print_overview(self, update_currents: bool =  False) -> None:
        """"""
        Pretty-prints the status of the QDac
        """"""

        self._update_cache(update_currents=update_currents)

        for ii in range(self.num_chans):
            line = f""Channel {ii+1} \n""
            line += ""    Voltage: {} ({}).\n"".format(
                self.channels[ii].v.cache(), self.channels[ii].v.unit
            )
            line += ""    Current: {} ({}).\n"".format(
                self.channels[ii].i.cache.get(get_if_invalid=False),
                self.channels[ii].i.unit,
            )
            line += f""    Mode: {self.channels[ii].mode.cache().get_label()}.\n""
            line += ""    Slope: {} ({}).\n"".format(
                self.channels[ii].slope.cache(), self.channels[ii].slope.unit
            )
            if self.channels[ii].sync.cache() > 0:
                line += '    Sync Out: {}, Delay: {} ({}), '\
                        'Duration: {} ({}).\n'.format(
                            self.channels[ii].sync.cache(),
                            self.channels[ii].sync_delay.cache(),
                            self.channels[ii].sync_delay.unit,
                            self.channels[ii].sync_duration.cache(),
                            self.channels[ii].sync_duration.unit,
                        )

            print(line)

    def _get_functiongenerator(self, chan: int) -> int:
        """"""
        Function for getting a free generator (of 8 available) for a channel.
        Used as helper function for ramp_voltages, but may also be used if the
        user wants to use a function generator for something else.
        If there are no free generators this function will wait for up to
        fgs_timeout for one to be ready.

        To mark a function generator as available for others set
        self._assigned_fgs[chan].t_end = 0

        Args:
            chan: (1..24/48) the channel for which a function generator is
                  requested.
        """"""
        fgs_timeout = 2  # Max time to wait for next available generator

        if len(self._assigned_fgs) < 8:
            fg = min(self._fgs.difference(
                        {g.fg for g in self._assigned_fgs.values()}))
            self._assigned_fgs[chan] = Generator(fg)
        else:
            # If no available fgs, see if one is soon to be ready
            # Nte, this does not handle if teh user has assigned the
            # same fg to multiple channels cheating the driver
            time_now = time.time()
            available_fgs_chans = []
            fgs_t_end_ok = [g.t_end for chan, g
                            in self._assigned_fgs.items()
                            if g.t_end < time_now+fgs_timeout]
            if len(fgs_t_end_ok) > 0:
                first_ready_t = min(fgs_t_end_ok)
                available_fgs_chans = [chan for chan, g
                                       in self._assigned_fgs.items()
                                       if g.t_end == first_ready_t]
                if first_ready_t > time_now:
                    LOG.warning('''
                    Trying to ramp more channels than there are generators.\n
                    Waiting for ramp generator to be released''')
                    time.sleep(first_ready_t - time_now)

            if len(available_fgs_chans) > 0:
                oldchan = available_fgs_chans[0]
                fg = self._assigned_fgs[oldchan].fg
                self._assigned_fgs.pop(oldchan)
                self._assigned_fgs[chan] = Generator(fg)
                # Set the old channel in DC mode
                v_set = self.channels[oldchan-1].v.cache()
                self.write('set {ch} {voltage:.6f};wav {ch} 0 0 0'
                           .format(ch=oldchan, voltage=v_set))
            else:
                raise RuntimeError('''
                Trying to ramp more channels than there are generators
                available. Please insert delays allowing channels to finish
                ramping before trying to ramp other channels, or reduce the
                number of ramped channels. Or increase fgs_timeout.''')
        return fg

    def ramp_voltages(
            self,
            channellist: Sequence[int],
            v_startlist: Sequence[float],
            v_endlist: Sequence[float],
            ramptime: float) -> float:
        """"""
        Function for smoothly ramping one channel or more channels
        simultaneously (max. 8). This is a shallow interface to
        ramp_voltages_2d. Function generators and triggers are
        are assigned automatically.

        Args:
            channellist:    List (int) of channels to be ramped (1 indexed)\n
            v_startlist:    List (int) of voltages to ramp from.
                            MAY BE EMPTY. But if provided, time is saved by
                            NOT reading the present values from the instrument.

            v_endlist:      List (int) of voltages to ramp to.\n
            ramptime:       Total ramp time in seconds (min. 0.002). Has
                            to be an integer number of 0.001 secs).\n
        Returns:
            Estimated time of the excecution of the 2D scan.

        NOTE: This function returns as the ramps are started. So you need
        to wait for 'ramptime' until measuring....
        """"""

        if ramptime < 0.002:
            LOG.warning('Ramp time too short: {:.3f} s. Ramp time set to 2 ms.'
                        .format(ramptime))
            ramptime = 0.002
        steps = int(ramptime*1000)
        return self.ramp_voltages_2d(
                            slow_chans=[], slow_vstart=[], slow_vend=[],
                            fast_chans=channellist, fast_vstart=v_startlist,
                            fast_vend=v_endlist, step_length=0.001,
                            slow_steps=1, fast_steps=steps)

    def ramp_voltages_2d(
            self,
            slow_chans: Sequence[int],
            slow_vstart: Sequence[float],
            slow_vend: Sequence[float],
            fast_chans: Sequence[int],
            fast_vstart: Sequence[float],
            fast_vend: Sequence[float],
            step_length: float,
            slow_steps: int,
            fast_steps: int) -> float:
        """"""
        Function for smoothly ramping two channel groups simultaneously with
        one slow (x) and one fast (y) group. used by 'ramp_voltages' where x is
        empty. Function generators and triggers are assigned automatically.

        Args:
            slow_chans:   List of channels to be ramped (1 indexed) in
                          the slow-group\n
            slow_vstart:  List of voltages to ramp from in the
                          slow-group.
                          MAY BE EMPTY. But if provided, time is saved by NOT
                          reading the present values from the instrument.\n
            slow_vend:    list of voltages to ramp to in the slow-group.

            fast_chans:   List of channels to be ramped (1 indexed) in
                          the fast-group.\n
            fast_vstart:  List of voltages to ramp from in the
                          fast-group.
                          MAY BE EMPTY. But if provided, time is saved by NOT
                          reading the present values from the instrument.\n
            fast_vend:    list of voltages to ramp to in the fast-group.

            step_length:  Time spent at each step in seconds
                          (min. 0.001) multiple of 1 ms.\n
            slow_steps:   number of steps in the slow direction.\n
            fast_steps:   number of steps in the fast direction.\n

        Returns:
            Estimated time of the excecution of the 2D scan.\n
        NOTE: This function returns as the ramps are started.
        """"""
        channellist = [*slow_chans, *fast_chans]
        v_endlist = [*slow_vend, *fast_vend]
        v_startlist = [*slow_vstart, *fast_vstart]
        step_length_ms = int(step_length*1000)

        if step_length < 0.001:
            LOG.warning('step_length too short: {:.3f} s. \nstep_length set to'
                        .format(step_length_ms) + ' minimum (1ms).')
            step_length_ms = 1

        if any([ch in fast_chans for ch in slow_chans]):
            raise ValueError(
                    'Channel cannot be in both slow_chans and fast_chans!')

        no_channels = len(channellist)
        if no_channels != len(v_endlist):
            raise ValueError(
                    'Number of channels and number of voltages inconsistent!')

        for chan in channellist:
            if chan not in range(1, self.num_chans+1):
                raise ValueError(
                        f'Channel number must be 1-{self.num_chans}.')
            if not (chan in self._assigned_fgs):
                self._get_functiongenerator(chan)

        # Voltage validation
        for i in range(no_channels):
            self.channels[channellist[i]-1].v.validate(v_endlist[i])
        if v_startlist:
            for i in range(no_channels):
                self.channels[channellist[i]-1].v.validate(v_startlist[i])

        # Get start voltages if not provided
        if not slow_vstart:
            slow_vstart = [self.channels[ch-1].v.get() for ch in slow_chans]
        if not fast_vstart:
            fast_vstart = [self.channels[ch-1].v.get() for ch in fast_chans]

        v_startlist = [*slow_vstart, *fast_vstart]
        if no_channels != len(v_startlist):
            raise ValueError(
                'Number of start voltages do not match number of channels!')

        # Find trigger not aleady uses (avoid starting other
        # channels/function generators)
        if no_channels == 1:
            trigger = 0
        else:
            trigger = int(min(self._trigs.difference(
                                    set(self._assigned_triggers.values()))))

        # Make sure any sync outputs are configured
        for chan in channellist:
            if chan in self._syncoutputs:
                sync = self._syncoutputs[chan]
                sync_duration = int(
                                1000*self.channels[chan-1].sync_duration.get())
                sync_delay = int(1000*self.channels[chan-1].sync_delay.get())
                self.write('syn {} {} {} {}'.format(
                                            sync, self._assigned_fgs[chan].fg,
                                            sync_delay, sync_duration))

        # Now program the channel amplitudes and function generators
        msg = ''
        for i in range(no_channels):
            amplitude = v_endlist[i]-v_startlist[i]
            # TODO: if amplitute is too large, then split into two parts.
            # if abs(amplitude) > 10: ...
            ch = channellist[i]
            fg = self._assigned_fgs[ch].fg
            if trigger > 0:  # Trigger 0 is not a trigger
                self._assigned_triggers[fg] = trigger
            msg += f""wav {ch} {fg} {amplitude} {v_startlist[i]}""
            # using staircase = function 4
            nsteps = slow_steps if ch in slow_chans else fast_steps
            repetitions = slow_steps if ch in fast_chans else 1

            delay = step_length_ms \
                if ch in fast_chans else fast_steps*step_length_ms
            msg += ';fun {} {} {} {} {} {};'.format(
                        fg, Waveform.staircase, delay, int(nsteps),
                        repetitions, trigger)
            # Update latest values to ramp end values
            # (actually not necessary when called from _set_voltage)
            self.channels[ch-1].v.cache.set(v_endlist[i])
        self.write(msg[:-1])  # last semicolon is stripped

        # Fire trigger to start generators simultaneously, saving communication
        # time by not using triggers for single channel ramping
        if trigger > 0:
            self.write(f'trig {trigger}')

        # Update fgs dict so that we know when the ramp is supposed to end
        time_ramp = slow_steps * fast_steps * step_length_ms / 1000
        time_end = time_ramp + time.time()
        for chan in channellist:
            self._assigned_fgs[chan].t_end = time_end
        return time_ramp
"
176,301.0,US,"The S5048 Vector Network Analyzer delivers lab grade performance in a compact package, with all the features engineers have come to expect included standard in our software.",S 5048,113.0,"**Copper Mountain Technologies** develops innovative RF test and measurement solutions for engineers worldwide that enable engineers to extend their reach.

",Qcodes Community,Coppermountain,"[OrderedDict([('id', 'atthotVCDq0T4DOTa'), ('width', 1637), ('height', 1279), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/SwM3zxiNcQK1aDs58vQZ_g/YUmgnG-5ApstV5gGUntXXH_dmH1sdeBMaqRd0RcYoojpPk_p7ff80GDyhY2OmDenM51cUqa0tTFYvwR_jcjaJXyoIzKlxr6jubU92dQ5gCw/_wAy0yovlz4Wqb6uCKmpMk3PtYz_mL8MCxQYSHMX0Eo'), ('filename', 'LOGO.webp'), ('size', 59418), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GHvEsgkHrJmVXws9FF26EQ/IsE8yJk0qC5GN1LG4EKts88mxn5AjKxpTRdsARmQ1gx0sGYh1BHDCNJlkBNlz1R5K8k-lofN7oaQr9w4Uy8xZjwyGsinvNQGBJ0x6TQ_rNs/3DGWNQbn4Oe0AuWNTRl1ixOL39OqAcQlVHJia3OSlMU'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ho5hLqlF5SULTmsFLfUWzA/OExQZfE1Ph_YYo9j-W9hroJf11rChpWhv4jyAgGVNWl-3SMkXLEK1BtbqzE_19foT7gjsUqbBsWikT1qmHxd6pnnA4MJ2wtpQp8ZT-dE4mE/ugrNSzzmjIVrSx3TgDsSBYq92oXqgLIdgSMN4ghurHU'), ('width', 655), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/f5RL5c1E2NdVjP-PfV_UVw/cU9bLpXQ1MRCJ4P6ZNyEtqYkY9JorOh5XdsKrSBRNkDp29SAKt_6wRXGfIRBctMKlg6pHfVplFLYDqx20dTuNaXXBE4iq0Bv-tA9J5kImy8/nDj4ywr8w0fbxA1F9bLdoS019KvRR9z52eSyXK5rGHg'), ('width', 3000), ('height', 3000)]))]))])]",https://coppermountaintech.com/,Write a Python script that uses Qcodes Community to connect to a S5048 2-Port 4.8 GHz Analyzer Network Analyzer,https://en.wikipedia.org/wiki/Network_analyzer_(electrical),['Network Analyzer'],"A vector network analyzer achieves highly accurate measurements by correcting for the systematic errors in the instrument, the characteristics of cables, adapters and test fixtures",S5048 2-Port 4.8 GHz Analyzer,https://coppermountaintech.com/wp-content/uploads/2020/04/Compact-S5048-Extended-Specification-Sheet.pdf,"[OrderedDict([('id', 'att3M5fxriQIUsEuj'), ('width', 1132), ('height', 633), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2JqoaM79nHxeF3KXbCfTJA/fMXuwESpXkrZIvDQz6LX5nVc-FAHkpVAnGGZnkSGvTrLKDXuPK5uP-FM4WDOKGbcV96x_0bCl_W7ISkjHwGcP6HKife2jKcAy0z3OuHRUZc/PZGpyduYhUlx4BM-Fj0ddmmMe5x3JqcP0v_K821kM0s'), ('filename', 'disS5048.png'), ('size', 273882), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-V8ny6sBQ_GnYziKYiFc1w/UnW9Qn3EtfhjcfsmWB-6tMPpE0TOXshus5zdNUkMDaxvLsgdKDX6FgZn7Fe1dmF27g5nJGl6aWLWP5qDvHLvZQ/3VMMsR9vFppoima5EJzP1sebyb_uO_g7B-2WdfCRohU'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/sCBFIq5RZeeLjddETqWX9Q/0-BVAS7u_6ijLmU_R09cMzgvhYbt4CO0AxTw1GotbRo2LgGi4HoHeYfCEHJ4_n1kdtG6io792wpSEDyS0qHIxw/rQ4JZuwIVwvvLO8hWZ6Y6qHaMpHQMCiS6qX9cJ-UgtY'), ('width', 916), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/jmahKZgWvEiS9Wg4gGwy6Q/RmxvJprUUpbSC2RWJfVs3BViaIjjI5Muv0my9NJDlRgIV8yknczDJ4GsbzRlQ38v8bK777T4Kc6eujnLwPJ6QA/GbQjvf3BKKuyry3TyxcAZmIqi4ybDg4CDngdhBskriw'), ('width', 3000), ('height', 3000)]))]))])]",https://coppermountaintech.com/discontinued-s5048-2-port-4-8-ghz-analyzer/,,https://qcodes.github.io/Qcodes_contrib_drivers/py-modindex.html,,,True,,
177,5420.0,USA,"Keysight's M3202A PXIe arbitrary waveform generator offers 4 channels, on-board FPGA with optional software tools that enable real-time sequencing, inter-module synchronization, and graphical FPGA design environment.

",M 3202 A,303.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software
",Qcodes Community,Keysight,"[OrderedDict([('id', 'attSixem5KGYQVz77'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CpwBp96kY5dUnguQiqYpww/J9lJkFD16xSDAPvmgv_d56vj9Lqq6ItNUW_5UoMyN-S0Shnh0JOEO8csLebz7Xu4Z8gE07FUhS-nDKuUnQrjlgGl9TDwvdw0ri8xFYWoqJI/u6-p03gBGsvJDX5pDkq8g03E4crw0PcqBr7jJQHqkOI'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OHgE-tcyvCBxuFqu2T7t_A/az7HG7f0QS1vnZ52VcX5uXPXMyaXWm0aU0XpvVcbL-iaXMyXmXzrSR-B4rc2L0dd-f6o9qeZB5ZLJwyXF5Ddw0s88QIR6eB5yl5YgvaK938/HNFmDeic35zFTM_Qz4ZdgLI6Ram83KauYXm5s4osP2w'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EXCh0xCs_7MHSTx5Zz4CPA/Vm4LQikWqhLq7BQ4diBo6XQAAS5CLk1cfq9-S4yaTSMKcSuykUmlSiBgLAQSc73c_ggpGgo-k66P49Sg6IvYNQsS9xuXJrGvmuhM7B3ygEQ/9HyBiUmvRW0XEd9GhYUpcS4ZSI2K8DRyjI70MXa9kr4'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RQAo4UuLDVUF9_USADgP3w/dB55bQeyNGnlF3qRJsUAPWsAKtJnjKtA7XkA6scBhm0AkS5S6u_fVInQqEF-cIPNvke9dKGD1bz6c74uEryk4Ez3lO2dlivDqcW_KnVzMQM/vqKwTVltxdBX1CwxjuFTUNpzJ5R2NnBqC3e7aQx3xzA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT M3202A RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",KEYSIGHT M3202A,https://www.keysight.com/us/en/assets/7018-05392/data-sheets/5992-1798.pdf,"[OrderedDict([('id', 'attBCqJ6pAa942IBP'), ('width', 2000), ('height', 1700), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EBqR64Ra-DI3Pi8tlRhoxQ/SIyjlBNNVA_GgLbgqsgxpBduPUA7ors08SkzNRpC_pxW0puMrS41Lvbt8q6iZfgkeCyFX_jxSJB3WsKIlGSnljaNfSl2yo0bxcw8dAq0e7U/o6pUp2d5pwn7C3icnvEX1wbZJlKK-LxhQUozj8eeYIA'), ('filename', 'PROD-2732831-01.png'), ('size', 1316028), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7I_cJJjS7WU-qIRnHKFeug/BbQH0a2e73_OzA0xobAHVld_oYmq31Qc4f1NHJ8gY1RsGVyiMElChogyDAHXoZvJEFTOs2GTnfjXg8vr2Axqgw/pfi8zx077u2k4DaZcUJCdE83SDw2OEaer3DQ3YDRRC0'), ('width', 42), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/WijYroV9m6V-fCQqJbhokQ/m220r7kVMRF3k7_L3zYbDoJGMQvczj_OpJ_AUDtDbiovp1Ut3hK2iaNQTvIpV3vDsAL-bODH4-ZkTRcaGh5FOQ/lQbJ_2NOgdlf0tvIiRRvNa7_13aASxTD_XUBG-2pYlY'), ('width', 602), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/luTCmLj3vexdYBnqtrS4Yw/ZNralL35ApvBRxWWzCiWtbmJCSnG-mCHbj8fH6nLBphD22B5oGadMGPYw4t0ZwxuztpDxtQLTy9FDnutC6pK9Q/0jC2lnLLR8mFCMbnuyNiz-NkjHF3OWLl5LIUpfdYJ5Q'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/product/M3202A/pxie-arbitrary-waveform-generator-1-gsa-s-14-bit-400-mhz.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Keysight/M3202A.py,https://qcodes.github.io/Qcodes_contrib_drivers/examples/Keysight_M3202A.html,,,,,"from .SD_common.SD_AWG_Async import SD_AWG_Async


class M3202A(SD_AWG_Async):
    """"""
    qcodes driver for the Keysight M3202A AWG PXIe card.

    M3202A channel numbers start with 1.

    This driver is derived from SD_AWG_Async which uses a thread per module to
    upload waveforms concurrently. The sychronous methods like load_waveform are
    not available in this class.

    Example:
        awg1 = M3202A('awg1', 0, 2)
        ref_1 = awg1.upload_waveform(wave1)

        trigger_mode = keysightSD1.SD_TriggerModes.EXTTRIG
        awg1.awg_queue_waveform(1, ref_1, trigger_mode, 0, 1, 0)

    If you want to test M3202A based on the synchronous SD_AWG, then you can
    instantiate SD_AWG directly.
    Example:
        m3202a_sync = SD_AWG(name, chassis, slot, channels=4, triggers=8,
                             legacy_channel_numbering=False)

    Args:
        name: name for this instrument, passed to the base instrument
        chassis: chassis number where the device is located
        slot: slot number where the device is plugged in
    """"""
    def __init__(self, name: str, chassis: int, slot: int, **kwargs):
        super().__init__(name, chassis, slot, channels=4, triggers=8,
                         legacy_channel_numbering=False, **kwargs)

        module_name = 'M3202A'
        if self.module_name != module_name:
            raise Exception(f""Found module '{self.module_name}' in chassis ""
                            f""{chassis} slot {slot}; expected '{module_name}'"")
"
180,2.0,"COPENHAGEN, DENMARK","QDAC-II is the next generation of the successful QDAC from QDevil. It has all the outstanding features from its predecessor but is even more versatile and with superior performance. QDAC-II is a high-precision ultra-low-noise computer controlled DAC with 24 voltage generators, operating at a sample rate of 1MS/s – a thousand times faster than its predecessor. It is designed for DC and intermediate-frequency control of quantum devices, including, for example, gate electrodes and flux bias coils in qubits, but is a very versatile instrument that can be used for many other purposes. Each of the 24 channels has five voltage generators working in parallel: One for DC, a sine generator, a triangle generator, a square wave generator, and an arbitrary waveform generator (1 million points/second). Additionally, each channel is equipped with a DC current sensor with a resolution down to a few tens of pA, typically used for gate leakage detection and with sample rates up to 3 kHz.",Qdac 2 Array,423.0,"Founded in 2016, QDevil is an international quantum technology company focused on developing and manufacturing auxiliary electronics and specialized components, operating from mK to room temperature. The mission is to accelerate research and development in quantum electronics labs. To fulfill the mission QDevil helps customers around the world by supplying world-class auxiliary electronics.
",Qcodes Community,Qdevil,"[OrderedDict([('id', 'attz9erwtKcDDy955'), ('width', 150), ('height', 22), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Iaef-6NIciOWKsa10JxRkQ/2GD5HG7BPockb2ex1jGFrrTiU7BBCn-BUh4yFbVUC5HnbjZi95IkzXzO47AqXvh4ovR1NzYgfo7u3K7F-Iy8CnFqjwnWhHdoP_drQzUgyBk/oOtNVvCMSwDpcFzmES9UhD5dKEVKxrogflaoIXeeec8'), ('filename', 'QM-and-QD-logos4.svg'), ('size', 30131), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FEuZ28mowNgi5RsJVepsLA/nE8QsdJyxc7HF5HxYg-4FFyeNkCTIKwJqjAwoaeytJ-iQqogaf-JVLfsCMLSML3dXxikZxzR6Rup1FkWKPSsp6TdH_lwDt2uwXfZZObRFaw/Mr8sxOK6ErffdVcGCGd9Noq-q8_R0fFznaYT4z6B90Y'), ('width', 150), ('height', 22)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Bc9p_dlutAJiwDTZk-lRuA/xZRaVdQKhbsxI4GHc1mwsR36JbnSB5oSf8NvVCn4V_nuitBVHtQnG-gO3jON58ALpa1lVZoXLx1CboupbmfRHo3f8f4YYwqAuWrV1agWFVk/kFtddMZcEdyeo4wkQWKEZgqJAOXxNMFF7M0ly33iR-U'), ('width', 150), ('height', 22)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZWUIK3fC6Wb-Ng9czNLYlA/m5_LISZrGWJewXrhSx_993pJ9dPAO2-JAj8Mg-w58KQZkiDxtbCozX6QJOc4ji80rHiwF-hC-y3R2Iq50RB-K7PdX7GbvFYACEcEIz4kCkg/5N7AzqvO5ZJj-aPr-dLGjU-y_oooID3NX9eRPyvp5zE'), ('width', 3000), ('height', 3000)]))]))])]",https://qdevil.com/,"Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies, Digital-Analog Converter",https://en.wikipedia.org/wiki/Electric_generator,"['Power Supplies', 'Digital-Analog Converter']","In electricity generation, a generator[1] is a device that converts motive power (mechanical energy) or fuel-based power (chemical energy) into electric power for use in an external circuit. Sources of mechanical energy include steam turbines, gas turbines, water turbines, internal combustion engines, wind turbines and even hand cranks. The first electromagnetic generator, the Faraday disk, was invented in 1831 by British scientist Michael Faraday. Generators provide nearly all of the power for electric power grids.",,,"[OrderedDict([('id', 'att3KT0VioIKKqGNv'), ('width', 300), ('height', 189), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rWSvt_13P_X0En_oYBahrw/C6vWeLYG8U0SKP7rMXL7FYsQLUtc2jvnmXihj5IlcLy0entxrCtzaJm-Vx4FUiyfqaZWpnk1IX39gl4PUhod_EKU-Av-FtRvZe86qeTEAsU/dhYq6pE-x2NJNxViMTnYiC3K1YihIj8TuDjCL0ZPo-Q'), ('filename', 'QDAC-II_01-300x189.jpg'), ('size', 5690), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/I51twKvYWi-umlA_p42IWg/_I_Ghg8_MKj_trt0eBGoVxOztmDB6STSOd83kw4sezJK3xjplgEESKxbCOvW8TFJXmFEYDcLr9w442jfN9qvJQ/1d5fsrJXXWnsJwPqTkMxYbVtLsPMGbn3pcxwIzSwhH4'), ('width', 57), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uH3VqPc62w8_Wm1IwZTpow/TWdTFx6u1KbJnfJZZK0AJk4lvseT0kO8p99LI_zf65XeEJcI7DbsKz8RwpbFRbf4_47ObHzdA1UWchyp5FgFsQ/JuZK1TY_uPhtN3ARiE-KsI9iALZq_LEQ7E6gJrd-aQI'), ('width', 300), ('height', 189)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/t3SRBGOyfjAquJTWOXEEzw/EPCQZvq1MkrTTfXdCAQwaiOpU6VJ5daYENHiVAKMgMAgu2xXoa0O29UZNRCuUp8U6tQ1S20pcY0u7mjsCNcwGw/k9SMwcAtYK7pQXRKYcXGrVrBbA57Cw6CVLqkO52J8UQ'), ('width', 3000), ('height', 3000)]))]))])]",https://qdevil.com/qdac-ii/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QDevil/QDAC2_Array.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QDevil.html#module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array,,,,,"from .QDAC2 import QDac2, QDac2Channel, QDac2ExternalTrigger, \
    QDac2Trigger_Context, Arrangement_Context, ExternalInput, \
    comma_sequence_to_list_of_floats, diff_matrix
from typing import Tuple, Dict, Sequence, List, FrozenSet, Optional
import numpy as np
from time import sleep as sleep_s

# Version 0.1.1
#
# Guiding principles for this driver for multiple QDevil QDAC-IIs
# ---------------------------------------------------------------
#
# 1. Use the underlying QDAC2.py driver as much as possible.
#


#
# Future improvements
# -------------------
#
# - An array arrangement should support corrections between contacts
#   (which the indiviual arrangements on each instrument does).


def _check_for_reserved_outputs(triggers: Dict[str, int]) -> None:
    for trigger in triggers.values():
        if trigger in (4, 5):
            raise ValueError(f'External output trigger {trigger} is reserved')


class Array_Arrangement_Context:

    def __init__(self, qdacs: 'QDac2_Array',
                 contacts: Dict[str, Dict[str, int]],
                 output_triggers: Optional[Dict[str, Dict[str, int]]] = None,
                 internal_triggers: Optional[Sequence[str]] = None):
        self._qdacs = qdacs
        self._arrangements: Dict[str, Arrangement_Context] = dict()
        self._contacts: Dict[str, str] = dict()
        for qdac in qdacs._qdacs:
            qdac_name = qdac.full_name
            qdac_contacts = contacts.get(qdac_name, dict())
            qdac_outputs = output_triggers.get(qdac_name, dict()) if output_triggers else dict()
            is_contoller = (qdac_name == qdacs._controller_name)
            arrangement = None
            if is_contoller:
                _check_for_reserved_outputs(qdac_outputs)
                arrangement = \
                    qdac.arrange(qdac_contacts, qdac_outputs, internal_triggers)
            else:
                arrangement = qdac.arrange(qdac_contacts, qdac_outputs)
            self._arrangements[qdac_name] = arrangement
            for c_name in qdac_contacts.keys():
                if c_name in self._contacts:
                    raise ValueError(f'Contact name {c_name} used multiple times')
                self._contacts[c_name] = qdac_name

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        for arrangement in self._arrangements.values():
            arrangement.__exit__(exc_type, exc_val, exc_tb)
        return False

    @property
    def contact_names(self) -> Sequence[str]:
        """"""
        Returns:
           Sequence[str]: Channel names
        """"""
        return [name for name in self._contacts.keys()]

    def channel(self, contact: str) -> QDac2Channel:
        """"""
        Args:
            contact (str): Name

        Returns:
           QDac2Channel: Instrument channel
        """"""
        qdac = self._get_qdac_for(contact)
        arrangement = self._arrangements[qdac]
        return arrangement.channel(contact)

    def qdac_names(self) -> Sequence[str]:
        return [qdac.full_name for qdac in self._qdacs._qdacs]

    def virtual_voltage(self, contact: str) -> float:
        """"""
        Args:
            contact (str): Name of contact

        Returns:
            float: Voltage before correction
        """"""
        qdac = self._get_qdac_for(contact)
        arrangement = self._arrangements[qdac]
        return arrangement.virtual_voltage(contact)

    def set_virtual_voltages(self, contacts_to_voltages: Dict[str, float]) -> None:
        for qdac in self.qdac_names():
            qdac_voltages: Dict[str, float] = dict()
            for contact, voltage in contacts_to_voltages.items():
                if self._get_qdac_for(contact) == qdac:
                    qdac_voltages[contact] = voltage
            arrangement = self._arrangements[qdac]
            arrangement.set_virtual_voltages(qdac_voltages)

    def currents_A(self, nplc: int = 1, current_range: str = ""low"") -> Sequence[float]:
        """"""Measure currents on all contacts

        The order is that of contacts()

        Args:
            nplc (int, optional): Number of powerline cycles to average over
            current_range (str, optional): Current range (default low)
        """"""
        # Setup current measurement on all instruments
        for qdac in self.qdac_names():
            arrangement = self._arrangements[qdac]
            channels_suffix = arrangement._all_channels_as_suffix()
            arrangement._qdac.write(f'sens:rang {current_range},{channels_suffix}')
            arrangement._qdac.write(f'sens:nplc {nplc},{channels_suffix}')
        # Discard first reading because of possible output-capacitor effects, etc
        slowest_line_freq_Hz = 50
        sleep_s(1 / slowest_line_freq_Hz)
        for qdac in self.qdac_names():
            arrangement = self._arrangements[qdac]
            channels_suffix = arrangement._all_channels_as_suffix()
            arrangement._qdac.ask(f'read? {channels_suffix}')
        # Then make a proper reading on all instruments
        sleep_s((nplc + 1) / slowest_line_freq_Hz)
        values: List[float] = list()
        for qdac in self.qdac_names():
            arrangement = self._arrangements[qdac]
            channels_suffix = arrangement._all_channels_as_suffix()
            currents = arrangement._qdac.ask(f'read? {channels_suffix}')
            values += comma_sequence_to_list_of_floats(currents)
        return values

    def leakage(self, modulation_V: float, nplc: int = 2) -> np.ndarray:
        """"""Run a simple leakage test between the contacts

        Each contact is changed in turn and the resulting change in current from
        steady-state is recorded.  The resulting resistance matrix is calculated
        as modulation_voltage divided by current_change.

        Args:
            modulation_V (float): Virtual voltage added to each contact
            nplc (int, Optional): Powerline cycles to wait for each measurement

        Returns:
            ndarray: contact-to-contact resistance in Ohms
        """"""
        steady_state_A, currents_matrix = self._leakage_currents(modulation_V, nplc, 'low')
        with np.errstate(divide='ignore'):
            return np.abs(modulation_V / diff_matrix(steady_state_A, currents_matrix))

    def _leakage_currents(self, modulation_V: float, nplc: int,
                          current_range: str
                          ) -> Tuple[Sequence[float], Sequence[Sequence[float]]]:
        steady_state_A = self.currents_A(nplc, 'low')
        currents_matrix = list()
        for qdac in self.qdac_names():
            arrangement = self._arrangements[qdac]
            for index, channel_nr in enumerate(arrangement.channel_numbers):
                original_V = arrangement._virtual_voltages[index]
                arrangement._effectuate_virtual_voltage(index, original_V + modulation_V)
                currents = self.currents_A(nplc, current_range)
                arrangement._effectuate_virtual_voltage(index, original_V)
                currents_matrix.append(currents)
        return steady_state_A, currents_matrix

    def _get_qdac_for(self, contact: str) -> str:
        try:
            return self._contacts[contact]
        except KeyError:
            raise ValueError(f'No contact named ""{contact}""')



class QDac2_Array:
    """"""A collection of interconnected QDAC-IIs

    The instruments are required to be connected as described in section 5.5
    'Synchronization of multiple QDAC-II units' in the manual.  The sync
    cables must be left in place after sync, so that the clock is
    continuously distributed, and the Controller can trigger all Listerners
    by sending pulses from Ext Out 4 to all Ext In 3 simultaneously.
    """"""

    def __init__(self, controller: QDac2, listeners: Sequence[QDac2]):
        self._controller = controller
        self._qdacs = [controller, *listeners]  # Order is important
        self._check_unique_names()

    @property
    def trigger_out(self) -> int:
        return 4

    @property
    def common_trigger_in(self) -> ExternalInput:
        return ExternalInput(3)

    @property
    def controller(self) -> str:
        """"""
            Returns:
               str: Name of Controller
        """"""
        return self._controller_name

    @property
    def names(self) -> FrozenSet[str]:
        """"""
            Returns:
               FrozenSet[str]: Names of all QDAC-IIs in the array
        """"""
        return self._qdac_names

    def allocate_trigger(self) -> QDac2Trigger_Context:
        """"""Allocate internal trigger on the Controller

        Returns:
            QDac2Trigger_Context: context manager
        """"""
        return self._controller.allocate_trigger()

    def connect_external_trigger(self, port: int, trigger: QDac2Trigger_Context,
                                 width_s: float = 1e-6
                                 ) -> None:
        """"""Route internal trigger to external trigger

        Args:
            port (int): External output trigger number
            trigger (QDac2Trigger_Context): Internal trigger
            width_s (float, optional): Output trigger width in seconds (default 1ms)
        """"""
        self._controller.connect_external_trigger(port, trigger, width_s)

    def trigger(self, internal_trigger: QDac2Trigger_Context):
        """"""Fire an internal trigger on the Controller

        Args:
            QDac2Trigger_Context: internal trigger
        """"""
        self._controller.trigger(internal_trigger)

    def sync(self) -> None:
        """"""Synchronizes the array of QDAC-IIs

        The Listeners will stop using their own clock and start using the
        Controller's clock.
        """"""
        if len(self._qdacs) < 2:
            raise ValueError('Need at least two instruments to sync')
        self._controller_write(['syst:cloc:send on'])
        self._listeners_write(['syst:cloc:sour ext', 'syst:cloc:sync'])
        self._controller_write(['syst:cloc:sync', 'outp:sync:sign'])

    def arrange(self, contacts: Dict[str, Dict[str, int]],
                output_triggers: Optional[Dict[str, Dict[str, int]]] = None,
                internal_triggers: Optional[Sequence[str]] = None
                ) -> Array_Arrangement_Context:
        """"""An arrangement of contacts across several QDAC-II instruments

        The arrangement is a collection of QDac2.arrangement, one for each
        instrument but with a dedicated controller.

        See QDac2.arrangement() for further documentation.  Note that an
        array arrangement does not (yet) support corrections between contacts
        (which the indiviual arrangements on each instrument does).

        Args:
            contacts (Dict[str,Dict[str, int]]): Instrument name to contact-name/channel pairs
            output_triggers (Dict[str,Dict[str, int]], optional): Instrument name to name/output-trigger pairs
            internal_triggers (Sequence[str], optional): List of names of internal triggers to allocate on the controller

        Returns:
            Array_Arrangement_Context: context manager
        """"""
        return Array_Arrangement_Context(self, contacts, output_triggers,
                                         internal_triggers)

    def _controller_write(self, commands: List[str]) -> None:
        for command in commands:
            self._controller.write(command)

    def _listeners_write(self, commands: List[str]) -> None:
        listeners = self._qdacs[1:]
        for listener in listeners:
            for command in commands:
                listener.write(command)

    def _check_unique_names(self) -> None:
        self._controller_name = self._controller.full_name
        self._qdac_names = frozenset([qdac.full_name for qdac in self._qdacs])
        if len(self._qdac_names) != len(self._qdacs):
            raise ValueError(f'Instruments need to have unique names: {self._qdac_names}')
"
183,2500.0,"Munich, Germany",The R&S HMP2020 two-channel power supply deliver up to 188 W total output power,HMP 2020,484.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.farnell.com/datasheets/3677014.pdf,"[OrderedDict([('id', 'attmHFq2Bu50vVFGs'), ('width', 300), ('height', 300), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/eSyKsSd0xeRdmWYwbZGj0Q/HlyhIBsC12YKVCzbafEAzGk-cBpebHP63XM57MrPtE_arbXGXMAF29XRPmgZ_YkFMbbfOrtKD0fhgjMR-_u8wZcgOiVUwXnENAbQhGXHnMg/7guaEeexPpwZi_eAlui3x7XVGjpm5CyZsNrw6x_XHfU'), ('filename', 'HMP2030_04-875-.jpg'), ('size', 16316), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/BsXo6ob3BZGTl-5AYw0rwg/3UfuWZdkKlIgDFmAidfOsYL-j-zyARxD5rUzOw5Mlu8YOn89pjdMltLezBQt_xkOYnqBV6MFMaiVVFMCs8atjQ/hS_un0bKdWLthKI4R7chDj07wTtRuiAoeBeU2IIrk1w'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/PuEV_P2cIp8o168tA6abVQ/reyJEGNtU4vo_w7AJ4-AGipRyN9zoh545QmEElw9cNpJHyQz3k3Gq7nTvh4Aa7tsD2R8n0hBvZeHEpnUAa9FhA/lo3M0pdTti1imf3wM2cquJqKLjmnREKddfdN0d1yd3s'), ('width', 300), ('height', 300)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7j8d4usP4GO7qDLB0O391g/XzhevNIcf4eZaFvE2TA-pU_tIqjKaUThGEJ7IYSX11Yg5o815Dy0BGZZv5bRNNrdbMngvpURqRR8p4LohQtNvw/_FtTtFqAjHqC1uDr2U8EnA-VVVE_1DYDRubcNIZQ0Uc'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tequipment.net/Rohde-&-Schwarz/HMP2020/DC-Power-Supplies-/-Lab-Power-Supplies/?gclid=CjwKCAjw-vmkBhBMEiwAlrMeFwYpZRtIgfIz93ieslLUYQquAPXSMNXgoggVpuLMDUcB8NwBOp2wUxoCNKcQAvD_BwE,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMP2020.py,1945.0,,,,
190,5.0,USA,"The LDA-802-12 Digital Attenuator is a rack mounted 12-channel high dynamic range, bidirectional, 50 Ohm step attenuator. The LDA-802-12 provides 120 dB of attenuation control range from 200 to 8000 MHz with a step size of 0.1 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-802-12 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-802-12,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attDZEn0j6ttyKWqa'), ('width', 735), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-FTeWq7vn2HJtdg07ByXrg/Libv1Yh_F9VMxxgamvxaKR16bcNwWumiO7c6CfJ-0gllE3Dev_WjmaNOnyv5j_V8206jnpd1arPpVdTPeajslNS6KjeCRCpo5Pkk17oEHwE/vgDJD12fiJub59H-5fa_YHr674xgMHq_sPIPp2YGhOo'), ('filename', 'lda-802-12.png'), ('size', 97818), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/6H8B08kkjT7u8VhBILX99Q/rqZ8ti4Fy4PFseQCeGnvFH0WENymk68Rj4b51FobcqzzMIrofkmNKs7tZXmcMxEjv5YtOykGZjA2StxyQNLZng/D5vm2iucxsr18fXKd3hSYKbP-IIwM3fzbtNtZhj8vB0'), ('width', 53), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RRJvJVdFJbudLJVnU9Vfwg/NWKgzPbWiQXJYVML-SxO1e0wW1k-8cs5Vs-ET-pNx5LtU479wNFjgYLeiYQo_T8dxozzBDrg-56mOe2ntkexsg/7VQ-g6BYVF8KUAOOlHyAm1VxL1T52gjWvAXd4d0cFCc'), ('width', 735), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UtvclpM4ikUMz9iNuj40YQ/jfoLgSdL1K0NYBKHNdSDZ6PugfZtqp-ElE_wq1y-Y_iA3MvOBczkxMztu9Nhm4VG-2eAhBkOyaWkj46CjpdofA/a6Fx97F2kctpOirwa6cKEcbHlTlen6nmeoX5YoNxAos'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-802-12-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,8500.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
199,1657.0,"Austin, Texas, USA","Data acquisition (DAQ) is the process of measuring an electrical or physical phenomenon, such as voltage, current, temperature, pressure, or sound. A DAQ system consists of sensors, DAQ measurement hardware, and a computer with programmable software such as LabVIEW.

",DAQ,373.0,"A producer of automated test equipment and virtual instrumentation software. Common applications include data acquisition, instrument control and machine vision. 
",Qcodes Community,National Instruments,"[OrderedDict([('id', 'attXAVi8mGWUwkEk7'), ('width', 960), ('height', 541), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/buqaMhTGWSsLDsPp_ibFaQ/De8HjydUx3EOCX_p1f2SSDo9dGCp11ixF2oTBsR7CR6yGYXYE_XR4FWNSn3MqZ20E_25rrfDoA8lE2RfAkuP7Q/mRTYDKwu5YneGKzi9In5jj7Q0Jc2rufjx4bGgEHckdg'), ('filename', '0x0.webp'), ('size', 3600), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Pv0WHzZMcUe18sDTIk-6mg/jr5uhXQ9KZen3aLRHNCAvPFX560knZg5OC3GuZHWWZUlwbT5OU_POa-kuo1PD5qEWl5eEs1dnPwCnMthpfYMxWBP2ALfrZR8zjpqzA1TrFQ/MbyuehtfHbxyhnrazXO_aVtHoiJ-YxS2aY_z_AlOlI4'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/H2ohCz7JKiucuuY1yKqARA/PC2AnJ8K6bupw239v_vXHNw2Bw02LZLYgFDZExIJ_IYgHKZF3aKphU6VgFnEXdi_JSVfBWTNow1CPi7pJroA801RTFAurSQsjnCQd46i1tI/iQUX1GjeerVvwDnChxusHAS0iRltSIlZ9OIhT6aWeyI'), ('width', 909), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FbZiry0wuZILUwoQONwY7w/TPig8INn4HxQab3cUodGEZ-LmxYwwAgZ-P2q9uDSN0Ldk6LIqGUZwq8U0ONnHe4UeVnJel-tkU0whlEnSfHvMB2WbUcP1DTtJGt-UvawHkI/mGxqe-xjeAIUQCHVOUg5_cDcuiJu0KrjzJiiqkUQRMI'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca.html,Write a Python script that uses Qcodes Community to connect to a DAQ DAQ boards,https://en.wikipedia.org/wiki/Analog-to-digital_converter,['DAQ boards'],"In electronics, an analog-to-digital converter (ADC, A/D, or A-to-D) is a system that converts an analog signal, such as a sound picked up by a microphone or light entering a digital camera, into a digital signal",DAQ,,"[OrderedDict([('id', 'attZrjq58VqBzHqyT'), ('width', 900), ('height', 651), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/yDPOtOeGrjibcj1JDrGZLg/2XlqMA0e0ODArdmuIckcxivTlYmwg4QI3eJmIqZW22zB2ofrXvGbV1r0HZNj2DLf2FhRSK1eA8J-5_-T9IhuikaxVi4X2daMjyf2G8TKlOY/Qk01jp2B0vLH2gDQSGmaJlc4dyw4voapb_W9ZtjIG9o'), ('filename', '1631520501071.jpg'), ('size', 72487), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/BeG2hKpZezfpHSYSYNQAOg/eeMH3WXxYsLiKAMqr05WUjc6X5yJUB9uklMI2tQSbiVMbs3loijDC3Cul7RggqwmqyTm5HZb-2sxbgwPHdbmrg/mZykLiAD9NWYmmEp2aPEwwgK592e8eEQP09KM8R0bZI'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Fc4-kL1sakVOVRKNlCPZRw/N0lOVHC7oA9ahbJnwD8hoQC0UYnSY5cZ7e76T66dla5X_3Gmom430LMGDSou5diz5AxUrVzM5kSrbJAcDmpo0w/7JOpQWTjah9XUv5YkeDwFhn-l5eJN8af7LOO-wMhSx4'), ('width', 708), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/hwhuQHqWr97fb9YwHI_rPA/oBVGAwK_BEMwk7FnnFrD65tsx5EdQDd8MBs3-Bgb-nuE-WkiZnqZ-Lf077V8HYzc0xePiL7TYsh9nL72G56j4A/oPRKoE6SWD2ozHjVj8AssbJdZKtWpTvw0ebFtK0dHxs'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca/shop/data-acquisition.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/NationalInstruments/DAQ.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.NationalInstruments.html,,,,,"""""""Qcodes drivers for National Instrument mutlifunction I/O devices (DAQs).

Requires nidaqmx package: https://nidaqmx-python.readthedocs.io/en/latest/

This was written for/tested with National Instruments USB-6363 DAQ,
but the nidaqmx API is pretty general, so I expect it will work with other devices
with minimal changes.

For an example of synchronously writing data to multiple analog outputs and
acquiring data on multiple analog inputs, see
https://scanning-squid.readthedocs.io/en/latest/_modules/microscope/susceptometer.html#SusceptometerMicroscope.scan_surface
""""""

from typing import Dict, Optional, Sequence, Any, Union
import numpy as np

import nidaqmx
from nidaqmx.constants import AcquisitionType, TaskMode
from qcodes.instrument.base import Instrument
from qcodes.instrument.parameter import Parameter, ArrayParameter, ParameterWithSetpoints
from qcodes.utils.helpers import create_on_off_val_mapping
from nidaqmx.constants import LineGrouping

class DAQAnalogInputVoltages(ArrayParameter):
    """"""Acquires data from one or several DAQ analog inputs.

    Args:
        name: Name of parameter (usually 'voltage').
        task: nidaqmx.Task with appropriate analog inputs channels.
        samples_to_read: Number of samples to read. Will be averaged based on shape.
        shape: Desired shape of averaged array, i.e. (nchannels, target_points).
        timeout: Acquisition timeout in seconds.
        kwargs: Keyword arguments to be passed to ArrayParameter constructor.
    """"""
    def __init__(self, name: str, task: Any, samples_to_read: int,
                 shape: Sequence[int], timeout: Union[float, int], **kwargs) -> None:
        super().__init__(name, shape, **kwargs)
        self.task = task
        self.nchannels, self.target_points = shape
        self.samples_to_read = samples_to_read
        self.timeout = timeout
        
    def get_raw(self):
        """"""Averages data to get `self.target_points` points per channel.
        If `self.target_points` == `self.samples_to_read`, no averaging is done.
        """"""
        data_raw = np.array(self.task.read(number_of_samples_per_channel=self.samples_to_read, timeout=self.timeout))
        return np.mean(np.reshape(data_raw, (self.nchannels, self.target_points, -1)), 2)
    
class DAQAnalogInputs(Instrument):
    """"""Instrument to acquire DAQ analog input data in a qcodes Loop or measurement.

    Args:
        name: Name of instrument (usually 'daq_ai').
        dev_name: NI DAQ device name (e.g. 'Dev1').
        rate: Desired DAQ sampling rate per channel in Hz.
        channels: Dict of analog input channel configuration.
        task: fresh nidaqmx.Task to be populated with ai_channels.
        min_val: minimum of input voltage range (-0.1, -0.2, -0.5, -1, -2, -5 [default], or -10)
        max_val: maximum of input voltage range (0.1, 0.2, 0.5, 1, 2, 5 [default], or 10)
        clock_src: Sample clock source for analog inputs. Default: None
        samples_to_read: Number of samples to acquire from the DAQ
            per channel per measurement/loop iteration.
            Default: 2 (minimum number of samples DAQ will acquire in this timing mode).
        target_points: Number of points per channel we want in our final array.
            samples_to_read will be averaged down to target_points.
        timeout: Acquisition timeout in seconds. Default: 60.
        kwargs: Keyword arguments to be passed to Instrument constructor.
    """"""
    def __init__(self, name: str, dev_name: str, rate: Union[int, float], channels: Dict[str, int],
                 task: Any, min_val: Optional[float]=-5, max_val: Optional[float]=5,
                 clock_src: Optional[str]=None, samples_to_read: Optional[int]=2,
                 target_points: Optional[int]=None, timeout: Optional[Union[float, int]]=60, **kwargs) -> None:
        super().__init__(name, **kwargs)
        if target_points is None:
            if samples_to_read == 2: # minimum number of samples DAQ will read in this timing mode
                target_points = 1
            else:
                target_points = samples_to_read
        self.rate = rate
        nchannels = len(channels)
        self.samples_to_read = samples_to_read
        self.task = task
        self.metadata.update({
            'dev_name': dev_name,
            'rate': f'{rate} Hz',
            'channels': channels})
        for ch, idx in channels.items():
            channel = f'{dev_name}/ai{idx}'
            self.task.ai_channels.add_ai_voltage_chan(channel, ch, min_val=min_val, max_val=max_val)
        if clock_src is None:
            # Use default sample clock timing: ai/SampleClockTimebase
            self.task.timing.cfg_samp_clk_timing(
                rate,
                sample_mode=AcquisitionType.FINITE,
                samps_per_chan=samples_to_read)
        else:
            # Clock the inputs on some other clock signal, e.g. ao/SampleClock for synchronous acquisition
            self.task.timing.cfg_samp_clk_timing(
                    rate,
                    source=clock_src,
                    sample_mode=AcquisitionType.FINITE,
                    samps_per_chan=samples_to_read
            )
        # We need a parameter in order to acquire voltage in a qcodes Loop or Measurement
        self.add_parameter(
            name='voltage',
            parameter_class=DAQAnalogInputVoltages,
            task=self.task,
            samples_to_read=samples_to_read,
            shape=(nchannels, target_points),
            timeout=timeout,
            label='Voltage',
            unit='V'
        ) 

class DAQAnalogOutputVoltage(Parameter):
    """"""Writes data to one or several DAQ analog outputs. This only writes one channel at a time,
    since Qcodes ArrayParameters are not settable.

    Args:
        name: Name of parameter (usually 'voltage').
        dev_name: DAQ device name (e.g. 'Dev1').
        idx: AO channel index.
        kwargs: Keyword arguments to be passed to ArrayParameter constructor.
    """"""
    def __init__(self, name: str, dev_name: str, idx: int, **kwargs) -> None:
        super().__init__(name, **kwargs)
        self.dev_name = dev_name
        self.idx = idx
        self._voltage = np.nan
     
    def set_raw(self, voltage: Union[int, float]) -> None:
        with nidaqmx.Task('daq_ao_task') as ao_task:
            channel = f'{self.dev_name}/ao{self.idx}'
            ao_task.ao_channels.add_ao_voltage_chan(channel, self.name)
            ao_task.write(voltage, auto_start=True)
        self._voltage = voltage

    def get_raw(self):
        """"""Returns last voltage array written to outputs.
        """"""
        return self._voltage

class DAQAnalogOutputs(Instrument):
    """"""Instrument to write DAQ analog output data in a qcodes Loop or measurement.

    Args:
        name: Name of instrument (usually 'daq_ao').
        dev_name: NI DAQ device name (e.g. 'Dev1').
        channels: Dict of analog output channel configuration.
        **kwargs: Keyword arguments to be passed to Instrument constructor.
    """"""
    def __init__(self, name: str, dev_name: str, channels: Dict[str, int], **kwargs) -> None:
        super().__init__(name, **kwargs)
        self.metadata.update({
            'dev_name': dev_name,
            'channels': channels})
        # We need parameters in order to write voltages in a qcodes Loop or Measurement
        for ch, idx in channels.items():
            self.add_parameter(
                name=f'voltage_{ch.lower()}',
                dev_name=dev_name,
                idx=idx,
                parameter_class=DAQAnalogOutputVoltage,
                label='Voltage',
                unit='V'
            )
            
class DAQDigitalOutputState(Parameter):
    """"""Writes data to one or several DAQ digital outputs.

    Args:
        name: Name of parameter (usually 'voltage').
        dev_name: DAQ device name (e.g. 'Dev1').
        lines: DO lines.
        kwargs: Keyword arguments to be passed to ParameterWithSetpoints constructor.
    """"""
    def __init__(self, name: str, dev_name: str, lines: Union[list, str], **kwargs) -> None:
        super().__init__(name, get_cmd=None, **kwargs)
        self.dev_name = dev_name

        if type(lines) is str:
            lineString = dev_name + '/' + lines
        else:
            comma = [', ']*len(lines)
            dev = [dev_name+'/']*len(lines)
            lineString = ''
            lineString = lineString.join([val for set in zip(dev, lines, comma) for val in set][0:-1])

        self.lines = lineString

    def set_raw(self, state: Union[list, bool]) -> None:
        with nidaqmx.Task('daq_do_task') as do_task:
            do_task.do_channels.add_do_chan(self.lines,
                                            line_grouping=LineGrouping.CHAN_PER_LINE)
            do_task.write(state, auto_start=True)


class DAQDigitalOutputs(Instrument):
    """"""Instrument to write DAQ digital output data in a qcodes Loop or measurement.

    Args:
        name: Name of instrument (usually 'daq_do').
        dev_name: NI DAQ device name (e.g. 'PXI1Slot2').
        lines: DO lines.
        **kwargs: Keyword arguments to be passed to Instrument constructor.
    """"""
    def __init__(self, name: str, dev_name: str, lines: Union[list, str], **kwargs) -> None:
        super().__init__(name, **kwargs)

        self.metadata.update({
            'dev_name': dev_name,
            'lines': lines})
        
        self.lines = lines
        
        self.add_parameter(
                name='state',
                dev_name=dev_name,
                lines=lines,
                parameter_class=DAQDigitalOutputState,
                label='DO state'
        )
"
202,5.0,USA,"The LDA-908V-8 Digital Attenuator is a highly accurate, bidirectional, 50 Ohm step attenuator. The LDA-908V-8 provides calibrated attenuation from 1 to 8000 MHz with an amazing step size of 0.1 dB and typical accuracy <0.25 dB over 90 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-908V-8 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-908V-8,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attBMWDZd2KeFE3R4'), ('width', 623), ('height', 768), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/5R7h65C-Td-m0Cmy2wkc5Q/zkVsyvecp5H6jdbDH-n1uiXqqLgrTKc3i1w19v3_WxnoAq5o3dcI6yl-SOSdyPsmHyXTZ2p703Acg1OSGB1DU_-goS2V7g2nwJi9JhGUXHz6odVVAFkQEXNwF7YJwVXU/B-km2KMo2m-l-mQN26aPxgDvFvreSlZus9aLPfvKD_w'), ('filename', 'vx-new-product-lda906v-8-(1).png'), ('size', 418145), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W2D6XpoGUNyqYZtxF9w67g/FYkWamTnKPNc-VwLcC0lgxYe3TTRN9fhI1ugmNeVhtres_JsirwmRyi5d6mDfy-JzP1bpHqC9c1FlGh5wcFy1Q/wKpZoUI_hnflb4c0sos7caEv1gy36kd_2g1gtzTgwUg'), ('width', 29), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/a8MRxuSr45zNQOxnYk4Vyw/mQxIjWzXCyTkkkv_xLzVG4vCQCENf7jCg_8YvvX6PQXWS91TtJX9p44DlsoswNPAKmy28YkWwvrD4C8cd-VbKw/Z7sgfyihqPPkzL-Phge6rv_vchWhB_5xtpbqD0Ezqxc'), ('width', 512), ('height', 631)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tiIxROKTAdWPeyTnRaugjA/brha3pL11zOPQLSFy9-L_esYOJI7-JA0q22YDFJqQOXBz8dqnGwndfbljugm_Of2UPNk-x-smKiz77sym5nSxg/bR5cv5_EdDPO07qV53D1uctYFKaY_lR8c3GwoxR7Fvg'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-908v-8-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,3499.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
205,5.0,USA,"The LDA-403 offers both USB and Ethernet interfaces. The USB port uses a native HID interface to avoid the difficulties inherent in using older serial or IEEE-488 interfaces implemented over USB. As a result, Lab Brick users can get to work faster without having to install kernel level drivers, and Lab Brick devices can be easily used on any system that supports USB HID devices, including low-cost embedded computers using Linux or similar operating systems. The Ethernet interface is configurable for Static IP or DHCP with the ability to assign the HTTP port for extra security.


The LDA-403 Digital Attenuator is a bidirectional, 50 Ohm step attenuator. The LDA-403 provides attenuation control from 0.1 to 40 GHz with a step size of 0.5 dB.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-403 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-403,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'att6VaAHLw9x5bwHe'), ('width', 749), ('height', 597), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qR8qEd-jmNSwH866W5wNxA/72qf85xoUEyhFulPZc36isOehRVtQFPpZ2SJq23Y6jVglRmVbVK2TMwOfl8alLesHVGp2bLWLjTwof3nzZPr6NJgyoP3JqOGCb2-wR_sUyhpYpNNHPsI3SFpn8_MO4rC/mpS1wbAJuaLd4QDYzCTJsOA1mqTEWww1iDsBINTkCr0'), ('filename', 'lda-403-product-photo.png'), ('size', 432745), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/n_FSpARdf7y44DZD74pFaQ/su1tpbXiXrsFFhV9raflXTdKh_VjKpdHIlxb2o_zIE2uqEo5__fsQd8pnN-fTAjvULo8MWaDRT1XAiwUJvO08w/SdtllBA3hANupXOusvuB_WoS01sozj78s3hMrZWh8ME'), ('width', 45), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/sSaoMk-Ecw4AWzvLhzyUXQ/d01jEwc6YGl3ZBVY7wUt_hBcT11dfbLJ2yABygVAI9Zo42VXzCCL9_5_5PWXBC5C1D2j3Vtoy4j7cB-jLM4bYw/cpAnkGeWKm_SVvYJEzY9ZXoa6ivHVxbcp_XKoufNsPw'), ('width', 642), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/vVl0r-X-oGJZDe0NUzCGUA/gW2MUJmvAg5CyG5hO3nZxCFaGqMq7iKgL9yMmFiMWyxCgbcmMWPchNeAChhHEuS8mdeWHteixomUM-dDXnrIGQ/i7OUJkozF-_0SP-Wjq_RWUCsk-lOZfr5ZlTW3bA5uFE'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-403-01-40-ghz-frequency-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,2995.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
210,5.0,USA,"The LDA-302P-2 Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +33 dBm, and offers frequency coverage of 10 to 3,000 MHz. It has an attenuation range of 90 dB and a step size of 2.0 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-302P-2 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-302P-2,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attjFawHPuZIhCIvm'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/A6hv1Z0aMapfmOu-wXeIJw/-gyFqxvqUmIRBCO6SW6l7ktt3cFrFoyrVe5xgenrLKUOa8jKv2zo3gY8tyioYSfpSxyrghMXMTdPk1xFlt43eyMvzrW4KQf-9KBqCpX8NkqhFXbyzSa_966xjZXGiesu/L_HRmjPNsm8UJDN0e7p7kZ-QZqX2jOFyFIXH6ZfZvuI'), ('filename', 'vaunix-digital-attenuator.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GUwQORyqTC0-zAwyrcgH1w/YqAnHP-5f5_zWSu2h1BU1NmyNqbld1y2V5kpukzwbVzEi4luMjFQQ4PyiGpV11HPMcEMaiNkG7r3SkK_LMrLcw/I6ozji7OafxVBdhVca1pLYRRPX1tYNMmH04xjRgAeCE'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/MEd92cWH1XXXWYf03zG-Mg/oceNNd0D9cNv1PJv_mnxGAKZAtFcalIkg4Zvsvc2YdzEzS0XE02g0GE3O57xOlm4p9TkCsSKMcEtCFda_2oYjw/HQezMLSprHgNusJZx4AfaIjodhog_BYVluGUud7lVe4'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rSu1vKq12LxNbOO0UDR27A/PtoRD0BZ1vI3OtDQ9ulMs5NfjgUaL0ETAPD-aQ2fF3cPl4bBuM8GlaTFgd72APx6Xr7KQkfX2w5nqJDHwSKqWg/npPLGD__yMf3Q9xefxlQw5fmHhOwS12R9vmDNAQwNog'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-302p-2-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,599.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
211,5.0,Lithuania,"Motorized Variable Two Wheels Attenuators 10MWA168 consists of two filter wheels. Each wheel contains eight filter mounts of ØD mm with clear aperture of Ød mm. Each mount is inclined by 4 degrees to prevent mutual reflections between filters. We supply the attenuator 10MWA168-20 with a standard, most popular, set of filters. See the table below. Alternatively, optics could be manufactured to individual orders. Or we could supply the attenuator without filters, which you can fit by yourself. 10MWA168-1 model comes WITHOUT filters. You bring a filter of each wheel into the optical path easily by hand or using automation. A single step motor drives the two wheels. A computer can operate the filter attenuator via a controller. Controllers are sold separately. For fastening, the attenuator has clearance slots for M6 and M4 screws. There are also two M6 holes, and one M4 hole (opposite to one of the M6 holes). Material: black anodized aluminium.",Standa 10 MWA 168,529.0,"Standa has it's own industrial base that includes CNC turning, milling, grinding machines. Standa's design department, while developing standard products presented in Standa's catalogue (such as motorized and manual translation and rotation stages, motion controllers, optical tables, vibration isolation systems, optical mounts and holders, optics, dpss lasers and etc.) also develops the equipment for OEM customers. Some examples of it, after the agreement with OEM customers, are shown on this website. Standa currently has several laser product development laboratories.
",Qcodes Community,Standa,"[OrderedDict([('id', 'att2pFOPlQ9KlvPIt'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Y3WfSwqSfQZoRtLQhD9cbQ/IaxiDfMtOwk6KBO1jOoZ7Cri6VU84Gbc4bR8bAUJtQkSQPQcQV9tnt6rrNhw6G7lp-Hufd1nS99GT4w1zcaeFdsfRM5fHgLihN2B-7kRT9w/lVBxh2Bps0XhpVCebkVc-azp0e7TEbCHAH_jSUBgXHU'), ('filename', '1580914811189.jpeg'), ('size', 10393), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2Dracj7Vp32qxM8st3kvLg/iiZYPqnqRetOg7KwUKnOGk6swLpmiYOKeZEPsDyJd22y9TwftsL5by9w9s7Rb37vP-OPWALCCqy0u7Bm_pg43w/80NluGZzSxntVKoEg0ZZIErq9PPl3zXp5GlHjGhPTcE'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Cfb4ktHj5Yj946MnPqg3KQ/4GTIhBXxWjda6Z_VWAB8CrOEcEfmVddZ77USXGKAIaA_d_UtUKsP_sr90fMuaSJCWVEh1zb6D-iKNFERUg-5YA/i0Mfpgyb-yD9MSKwo4pDTMEEdo5jYFpjS6qeWWJ_wjE'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LnvG2Le0A5PUDxyNM_xVeQ/ZOZLjA_IfmnEDiLGTTvD5wLjxx0vddgQzeZxA1I2pvG--nlrUkOuWuFGzXFZGscmRUdcON8kMg-r8Oan98aqDg/-HwUuhDjt3qy7HjQTVwyjXcCm-4e2cjWCW-4Q0xBFpM'), ('width', 3000), ('height', 3000)]))]))])]",https://www.standa.lt/,Write a Python script that uses Qcodes Community to connect to a Standa 10MWA168 Lockin Amplifiers,https://www.thinksrs.com/downloads/pdfs/applicationnotes/AboutLIAs.pdf,['Lockin Amplifiers'],"An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",Standa 10MWA168,,"[OrderedDict([('id', 'attNVbfKwdtG9nAid'), ('width', 305), ('height', 276), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/sxBR8EdZ9Mj5-_gqgIAoKg/sksu9OM5y8nYC7mSnUBSOg2pL4XIG_NFFSrFEbTK2g5qmPn5wojp19X9mABykOt8h_TDQij6MmrCDWiNeXYB0c-uOmCexKywOOvgUYAn8ShUn11u69EakA6EysBPPR8b/ErSVTltG8Wu-dUdMDl5s082CaJjIsODVduKMAt-g3t0'), ('filename', 'motorized_variable_wheel_attenuator.jpg'), ('size', 9727), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rXLoR896nIkb8fuq12DXMw/uekmd9dIY-Rp4bKL36tTLu16L-mYqTDIMfuCHOuQ7FvMJhe1MvmA_msxv8YM76OLYNvDdOZOrzlbSt6gMiH7xg/Dhj8Yr2lGo2tLi6RK3vUtvHkgqqYRTOiPDRAbX7FeZg'), ('width', 40), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iwuKUm87rO2I7m_H-5DeRA/t7qvAqwlAqNbWcEiKrr5WIvyy2Y7CywOL7Co2mixAEly1T-Nkj-KRQ4JT52mEvpcuFOtdU1FFqZYprNMJvrssw/PKHNpsbU_KGC6oyziycxoLTo8qHhss4lMjga26g4gOc'), ('width', 305), ('height', 276)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7anE3ZZBlucu0aF8zKRa8Q/4_mbFmnVlKPvtL6H6G1cSxlTBuD6q1KGFQein7fZ26a3OcxQ-q-7Gy0Uc-zI_Fd6togBB-MaXqisWnH-h7epBQ/IeAi2bGYpC-Ihelg4JlcExaVlbj25rrH31BGxUoPdbI'), ('width', 3000), ('height', 3000)]))]))])]",https://www.standa.lt/products/catalog/motorised_positioners?item=233,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Standa/Standa_10MWA168.py,,,,,,"from qcodes import Instrument
import ctypes
import numpy as np
import os
import time


class DeviceInformation(ctypes.Structure):
    _fields_ = [
        (""Manufacturer"", ctypes.c_char * 5),
        (""ManufacturerId"", ctypes.c_char * 3),
        (""ProductDescription"", ctypes.c_char * 9),
        (""Major"", ctypes.c_uint),
        (""Minor"", ctypes.c_uint),
        (""Release"", ctypes.c_uint),
    ]


class GetPosition(ctypes.Structure):
    _fields_ = [
        (""Position"", ctypes.c_int),
        (""uPosition"", ctypes.c_int),
        (""EncPosition"", ctypes.c_longlong),
    ]


class Status(ctypes.Structure):
    _fields_ = [
        (""MoveSts"", ctypes.c_uint),
        (""MvCmdSts"", ctypes.c_uint),
        (""PWRSts"", ctypes.c_uint),
        (""EncSts"", ctypes.c_uint),
        (""WindSts"", ctypes.c_uint),
        (""CurPosition"", ctypes.c_int),
        (""uCurPosition"", ctypes.c_int),
        (""EncPosition"", ctypes.c_longlong),
        (""CurSpeed"", ctypes.c_int),
        (""uCurSpeed"", ctypes.c_int),
        (""Ipwr"", ctypes.c_int),
        (""Upwr"", ctypes.c_int),
        (""Iusb"", ctypes.c_int),
        (""Uusb"", ctypes.c_int),
        (""CurT"", ctypes.c_int),
        (""Flags"", ctypes.c_uint),
        (""GPIOFlags"", ctypes.c_uint),
        (""CmdBufFreeSpace"", ctypes.c_uint),
    ]


class libximc:
    # TODO: use error check, implement wait for stop function from dll

    # default dll path
    _dll_path = 'C:\\Program Files\\XILab\\libximc.dll'

    # success and error codes
    _success_codes = {0: 'Ok'}
    _error_codes = {-1: 'Error', -2: 'NotImplemented', -3: 'ValueError', -4: 'NoDevice'}

    def __init__(self, dll_path=None, verbose=False):
        # save attributes
        self.verbose = verbose

        # connect to the dll
        current_path = os.getcwd()
        try:
            os.chdir(os.path.dirname(self._dll_path))
            self.dll = ctypes.windll.LoadLibrary(dll_path or self._dll_path)
        finally:
            os.chdir(current_path)

        # set resource type
        self.dll.enumerate_devices.restype = ctypes.POINTER(DeviceInformation)

    def error_check(self, code, function_name=''):
        if code in self._success_codes.keys():
            if self.verbose:
                print(""libximc: [%s]: %s"" % (function_name, self._success_codes[code]))
        elif code in self._error_codes.keys():
            print(""libximc: [%s]: %s"" % (function_name, self._error_codes[code]))
            raise Exception(self._error_codes[code])
        else:
            print(""libximc: [%s]: Unknown code: %s"" % (function_name, code))
            raise Exception()

    def command_move(self, device_id, position, u_position):
        self.dll.command_move(device_id, position, u_position)

    def enumerate_devices(self, probe_flags):
        enumeration = self.dll.enumerate_devices(probe_flags, b"""")
        return enumeration

    def get_device_name(self, device_enumeration, device_index):
        device_name = self.dll.get_device_name(device_enumeration, device_index)
        return device_name

    def get_position(self, device_id, get_position):
        self.dll.get_position(device_id, get_position)

    def get_status(self, device_id, status):
        self.dll.get_status(device_id, status)

    def open_device(self, device_name):
        device_id = self.dll.open_device(device_name)
        return device_id


class Standa_10MWA168(Instrument):

    def __init__(self, name, serial_number, dll_path=None, **kwargs):
        super().__init__(name, **kwargs)

        # link to dll
        self.libximc = libximc(dll_path=dll_path)

        # instrument constants
        self.filter_wheel_1 = [-1, 0, 1, -1, 1, 2, -1, 1, 2, 3, 3, 3, 1, 2, 4, 4, 1, 2, 5, 5, 4, 1, 2, 6, 6, 6, 2, 5, 6, 6, 6]
        self.filter_wheel_2 = [-1, 0, -1, 1, 1, 1, 2, 2, 2, -1, 1, 2, 3, 3, -1, 2, 4, 4, -1, 1, 3, 5, 5, -1, 1, 2, 6, 4, 4, 5, 6]
        self.offset_wheel_1 = 0.
        self.offset_wheel_2 = 62.
        self.revolution = 200.
        self.distance = self.revolution / 8.

        # initialization
        self.serial_number = serial_number
        device_enumeration = self.libximc.enumerate_devices(0)
        enumeration_name = self.libximc.get_device_name(device_enumeration, 0)
        self.device_id = self.libximc.open_device(enumeration_name)

        # Time to wait (in seconds) between setting up wheel 1 and 2
        self.set_transmittance_sleep_time = 10.0

        # add parameters
        self.add_parameter('transmittance',
                           set_cmd=self._set_transmittance,
                           label='Transmittance',
                           val_mapping={
                               1: 0, 0: 1, 9.0e-1: 2, 8.0e-1: 3, 7.2e-1: 4, 4.0e-1: 5, 3.0e-1: 6, 2.7e-1: 7,
                               1.5e-1: 8, 1.0e-1: 9, 8.0e-2: 10, 3.0e-2: 11, 2.7e-2: 12, 1.5e-2: 13, 1.0e-2: 14,
                               3.0e-3: 15, 2.7e-3: 16, 1.5e-3: 17, 1.0e-3: 18, 8.0e-4: 19, 3.0e-4: 20, 2.7e-4: 21,
                               1.5e-4: 22, 1.0e-4: 23, 8.0e-5: 24, 3.0e-5: 25, 1.5e-5: 26, 3.0e-6: 27, 3.0e-7: 28,
                               3.0e-8: 29, 3.0e-9: 30})

        self.add_parameter('position',
                           set_cmd=self._set_position,
                           get_cmd=self._get_position,
                           get_parser=float,
                           label='Position')

        self.add_parameter('status',
                           get_cmd=self._get_status,
                           get_parser=int,
                           label='status')

        self.connect_message()

    # get methods
    def _get_position(self):
        position = GetPosition()
        self.libximc.get_position(self.device_id, ctypes.byref(position))
        return position.Position

    def _get_status(self):
        status = Status()
        self.libximc.get_status(self.device_id, ctypes.byref(status))
        return status.MoveSts

    # set methods
    def _set_position(self, position):
        self.libximc.command_move(self.device_id, int(position), 0)

    def _set_transmittance(self, transmittance_id):
        # get filter to set
        filter_wheel_1 = self.filter_wheel_1[transmittance_id]
        filter_wheel_2 = self.filter_wheel_2[transmittance_id]

        # get current position
        current_position = self.position.get()

        # determine new positions
        position_wheel_2 = self.offset_wheel_2 + self.distance * filter_wheel_2 + \
                           np.ceil(current_position / self.revolution + 2) * self.revolution
        position_wheel_1 = self.offset_wheel_1 + self.distance * filter_wheel_1 + \
                           np.ceil(current_position / self.revolution + 2) * self.revolution

        if position_wheel_1 > position_wheel_2:
            print('new', position_wheel_1, position_wheel_2)
            position_wheel_1 -= self.revolution

        # set position of the second wheel
        self.position.set(np.floor(position_wheel_2))
        time.sleep(self.sleep_time / 10.0)  # default: 1 s
        for i in range(100):
            if self.status.get() == 0:
                break

        # wait another time
        time.sleep(self.sleep_time)  # default: 10 s

        # set position of the first wheel
        self.position.set(np.floor(position_wheel_1))
        time.sleep(self.sleep_time / 10.0)  # default: 1 s
        for i in range(100):
            if self.status.get() == 0:
                break

        time.sleep(self.sleep_time / 100.0)  # default: 0.1 s
"
219,5.0,USA,"The LDA-602E Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +30 dBm, and offers frequency coverage of 400 to 6,000 MHz. It has an attenuation range of 120 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-602E ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-602E,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attA12ZwM8fNa8gjn'), ('width', 824), ('height', 644), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/v3i5b2mxf-T4mKBvPTsugw/8JcAd3NHQ4CS_GHnIDwSzZ3IXbaK5ZHWFYW6lRm5mmfmh4taUCPQHZd8NbXEcgrkdxy2sJ9H8OILNMwKtjRpmAKVBP2XOUNZ-tvxmD_g8YaC_6DSA8EgwqQQ8MyCTqxH/6vWjXrljtL-7s1dKqSCh4KJSzc2_91u1JtLqmiCep2w'), ('filename', 'vaunix-digital-attenuator-602eh.png'), ('size', 818096), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0BZa8LAaCcwVbThGWMMzaw/CqusFi1mHFMWCSeGKIJ-W5hvERQbhZL4kmiK_YVeUyBF81cYVGLQh6-6THyTbcERGg2rqEc0mgycJzCs7JsNLA/SHt5fz6VbNRNsWGQ_LmslfeCcD47AgAqmQyeZJZBTwg'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/wrme-T9ZhDjevBBzm5fmJQ/d_9XyMBGZHXqjeJNc4_fYyNXqWCZGCu2t2hIpc4ETVXzfHx-8uvsdrpSW1MafG_GdwLhoFKAkYEHzY1xXGrOrw/YKKXeHU_5_tz_4_WQnKJB1tvu7uH9JSmJrJxm8R8qVY'), ('width', 655), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ddh0LtwNruFBVQ4xGvZs0g/0sQ14AZC18BQIJweXROBjDo2uChyY74p14m7F-ESXLSui5ciPtBvb3kyzP-7vhZDRVBhdDJb5mqdISxzza6n1Q/RSBoNZ3pQETm8LU4GrRygvFU8fYlqaMglE7eJtIf7IM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-602e-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,850.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
223,5.0,USA,"The LDA-802-8 Digital Attenuator is an 8-channel high dynamic range, bidirectional, 50 Ohm step attenuator. The LDA-802-8 provides 120 dB of attenuation control range from 200 to 8000 MHz with a step size of 0.1 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface(GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-802-8 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-802-8,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attqV64iL6RuJEnkA'), ('width', 405), ('height', 420), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tIjy2C3oTC4BVCQldqwkVw/Rpo8R6Q58OXfp3eHIIpHoY1Us5qMjMHCrfHB3ycYyHLADP6aklDlzeO7MNeEG3u_NDRYUN4hbCLN5rq3PlCejwl5iAOi9MEvj_ManMemDX8/NrTNyI_p9h5k4elRJ6lRk53thdikdELPXLo-RlWB1mc'), ('filename', 'vaunix-lda802-8.png'), ('size', 168290), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/cDwn9l-uijlh32proe6Y2g/l9WXe6ix-lFTBP8Kks_IFhXZKRJo5HbPMqAk6UPFFGuLCZgG1HSRsA5vBe4S-KMCwDM161SiotQLQgmLf3TWzg/057SI4tITl5yEYtyXWeWpIFIumj7qXoeWo-ZedMhB2Y'), ('width', 35), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0em2qBVAB4VLndPnXj9SPA/rEGbVoC9rI2cC2LEcGCLwc9QmQBoSlU0jhwaKDDf7CJM0YbydyttAzBRp6KWOjtL2vbu38i4EB0e-kpZTilv_Q/INIR8fUgcVba-0pEsSSSbBrempWrSee4284hTJH2_zQ'), ('width', 405), ('height', 420)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iQoFV6rULyCEo7z7mkWZTA/OcxgvN9uCDxpkiGYjbn5SWVBoURw2ZOilfn8dnu6zVVKziXwNdKYB8ZZX4wPx6dAmId6BuMhJDx-KymMWE1Q6g/9tbWdeez3yO2Or4_L5XxdNXygwGJZir03n98fMF6nsY'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-802-8-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,3999.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
232,367.3,"Abingdon, United Kingdom",ILM200 is a family of intelligent Cryogen Level Meters with general application in systems containing liquid helium or liquid nitrogen.,ILM 200,402.0,"Oxford Instruments plc is a United Kingdom manufacturing and research company that designs and manufactures tools and systems for industry and research. The company is headquartered in Abingdon, Oxfordshire, England, with sites in the United Kingdom, United States, Europe, and Asia.[2] It is listed on the London Stock Exchange and is a constituent of the FTSE 250 Index.[3]
",Qcodes Community,Oxford Instruments,"[OrderedDict([('id', 'attlP8b4ZXQRqQBKm'), ('width', 119), ('height', 41), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/L40kknza-cq9NhsYZ_dxRA/X7-tAyMECMdzvktYW1Kl9_wKs3wsykQuO0IZcUkIUzd1B_SdZpcWdwl9ire2dJ4mn_NIUCi-fXkE9trZOQYGNZcnMFjuTh1vvVGqKQD84dU/VrmXwTzIYFMM9z1rDroBhvlRqvT8XcH2PaS_F3-DBVs'), ('filename', 'download (5).png'), ('size', 1521), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_iwpStMuWtl-rSHbrkzUAQ/EgBTs4xZ7Dzht1W2XWHZwA1IGIJgHbD9WzrjaY4JDkCpRuPRMJlEgH9kAtbBEv3RD3HgMi1bApV67Fl2XLSdRA/eqNmVJzdrw5n0i3TmwADh2OeVb_TzPLbJdyK-fKB4Js'), ('width', 104), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2KWjy__chX3lYbHxvvzC7A/oCguq8sGx6ptCIX60qNDU4zX3wcA7m3tHoFRlXkYelctl7EqLrPQoNCeIqY22MErR36kQ4F_3tKFWxOX6I_cew/mOJ13fJh8O9VXyMA8OvTyOiIwyNW4KVH-IsgIVcfDb0'), ('width', 119), ('height', 41)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DvsxvVsG2-FCGVv7Wp2EOQ/iepJ_ZVF6MEjfwH-AhuZOXTSsXAle_ZKdHBsg8p6sS1bjnYOipyCEkWYxvdPihG5eqYM44AUH9GOoLigHgnrew/5THJTVgjyS9Y6CAHL_n4U7QQVgBcQOwU25PKU6DxVzQ'), ('width', 3000), ('height', 3000)]))]))])]",https://www.oxinst.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Meters,"https://blog.wika.us/applications/liquid-level-gauge-cryogenic-gas/?doing_wp_cron=1688070411.6589620113372802734375#:~:text=Liquid%20Gas%20Tanks-,Cryo%20Gauge%2C%20the%20All%2Din%2DOne%20Device%20for%20Measuring,liquid%20level%20and%20working%20pressure.",['Power Meters'],"Cryo Gauge, the All-in-One Device for Measuring Fluid Level and Working Pressure in Liquid Gas Tanks.",,http://lmu.web.psi.ch/docu/manuals/bulk_manuals/OxfordInstruments/ILM200.pdf,,http://lmu.web.psi.ch/docu/manuals/bulk_manuals/OxfordInstruments/ILM200.pdf,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Oxford/ILM200.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.Oxford.html#module-qcodes_contrib_drivers.drivers.Oxford.ILM200,,,,,"# OxfordInstruments_ILM200.py class, to perform the communication between the Wrapper and the device
# Copyright (c) 2017 QuTech (Delft)
# Code is available under the available under the `MIT open-source license <https://opensource.org/licenses/MIT>`__
#
# Pieter Eendebak <pieter.eendebak@tno.nl>, 2017
# Takafumi Fujita <t.fujita@tudelft.nl>, 2016
# Guenevere Prawiroatmodjo <guen@vvtp.tudelft.nl>, 2009
# Pieter de Groot <pieterdegroot@gmail.com>, 2009


from time import sleep
import pyvisa
import logging
from qcodes import VisaInstrument


class OxfordInstruments_ILM200(VisaInstrument):
    """"""
    This is the qcodes driver for the Oxford Instruments ILM 200 Helium Level Meter.

    Usage:
    Initialize with
    <name> = instruments.create('name', 'OxfordInstruments_ILM200', address='<Instrument address>')
    <Instrument address> = ASRL4::INSTR

    Note: Since the ISOBUS allows for several instruments to be managed in parallel, the command
    which is sent to the device starts with '@n', where n is the ISOBUS instrument number.

    """"""

    def __init__(self, name, address, number=1, **kwargs):
        """"""
        Initializes the Oxford Instruments ILM 200 Helium Level Meter.

        Args:
            name (str): name of the instrument
            address (str): instrument address
            number (int): ISOBUS instrument number (number=1 is specific to the ILM in F008)

        Returns:
            None
        """"""
        logging.debug(__name__ + ' : Initializing instrument')
        super().__init__(name, address, **kwargs)

        self.visa_handle.set_visa_attribute(pyvisa.constants.VI_ATTR_ASRL_STOP_BITS,
                                            pyvisa.constants.VI_ASRL_STOP_TWO)
        self._address = address
        self._number = number
        self._values = {}

        self.add_parameter('level',
                           label='level',
                           get_cmd=self._do_get_level,
                           unit='%')
        self.add_parameter('status',
                           get_cmd=self._do_get_status)
        self.add_parameter('rate',
                           get_cmd=self._do_get_rate,
                           set_cmd=self._do_set_rate)

        # a dummy command to avoid the initial error
        try:
            self.get_idn()
            sleep(70e-3)  # wait for the device to be able to respond
            self._read()  # to flush the buffer
        except Exception as ex:
            logging.debug(ex)

    def _execute(self, message):
        """"""
        Write a command to the device and read answer. This function writes to
        the buffer by adding the device number at the front, instead of 'ask'.

        Args:
            message (str) : write command for the device

        Returns:
            None
        """"""
        logging.info(
            __name__ + ' : Send the following command to the device: %s' % message)
        self.visa_handle.write('@%s%s' % (self._number, message))
        sleep(70e-3)  # wait for the device to be able to respond
        result = self._read()
        if result.find('?') >= 0:
            print(""Error: Command %s not recognized"" % message)
        else:
            return result

    def _read(self):
        """"""
        Reads the total bytes in the buffer and outputs as a string.

        Args:
            None

        Returns:
            message (str)
        """"""
        # because protocol has no termination chars the read reads the number
        # of bytes in the buffer
        bytes_in_buffer = self.visa_handle.bytes_in_buffer
        # a workaround for a timeout error in the pyvsia read_raw() function
        with(self.visa_handle.ignore_warning(pyvisa.constants.VI_SUCCESS_MAX_CNT)):
            mes = self.visa_handle.visalib.read(
                self.visa_handle.session, bytes_in_buffer)
        # cannot be done on same line for some reason
        mes = str(mes[0].decode())
        return mes

    def get_idn(self):
        """"""
        Overrides the function of Instrument since ILM does not support `*IDN?`

        This string is supposed to be a
        comma-separated list of vendor, model, serial, and firmware, but
        semicolon and colon are also common separators so we accept them here
        as well.

        Returns:
            A dict containing vendor, model, serial, and firmware.
        """"""
        try:
            idstr = ''  # in case self.ask fails
            idstr = self._get_version().split()
            # form is supposed to be comma-separated, but we've seen
            # other separators occasionally
            idparts = [idstr[3] + ' ' + idstr[4], idstr[0], idstr[5],
                       idstr[1] + ' ' + idstr[2]]
            # in case parts at the end are missing, fill in None
            if len(idparts) < 4:
                idparts += [None] * (4 - len(idparts))
        except Exception as ex:
            logging.warn('Error getting or interpreting *IDN?: ' + repr(idstr))
            logging.debug(ex)
            idparts = [None, None, None, None]

        return dict(zip(('vendor', 'model', 'serial', 'firmware'), idparts))

    def get_all(self):
        """"""
        Reads all implemented parameters from the instrument,
        and updates the wrapper.
        """"""
        logging.info(__name__ + ' : reading all settings from instrument')
        self.level.get()
        self.status.get()
        self.rate.get()

    def close(self):
        """"""
        Safely close connection
        """"""
        logging.info(__name__ + ' : Closing ILM200 connection')
        self.local()
        super().close()

    # Functions: Monitor commands
    def _get_version(self):
        """"""
        Identify the device

        Args:
            None

        Returns:
            identification (str): should be 'ILM200 Version 1.08 (c) OXFORD 1994\r'
        """"""
        logging.info(__name__ + ' : Identify the device')
        return self._execute('V')

    def _do_get_level(self):
        """"""
        Get Helium level of channel 1.

        Args:
            None

        Returns:
            result (float) : Helium level
        """"""
        logging.info(__name__ + ' : Read level of channel 1')
        result = self._execute('R1')
        return float(result.replace(""R"", """")) / 10

    def _do_get_status(self):
        """"""
        Get status of the device.
        """"""
        logging.info(__name__ + ' : Get status of the device.')
        result = self._execute('X')
        usage = {
            0: ""Channel not in use"",
            1: ""Channel used for Nitrogen level"",
            2: ""Channel used for Helium Level (Normal pulsed operation)"",
            3: ""Channel used for Helium Level (Continuous measurement)"",
            9: ""Error on channel (Usually means probe unplugged)""
        }
        # current_flowing = {
        # 0 : ""Curent not flowing in Helium Probe Wire"",
        # 1 : ""Curent not flowing in Helium Probe Wire""
        # }
        # auto_fill_status = {
        # 00 : ""End Fill (Level > FULL)"",
        # 01 : ""Not Filling (Level < FULL, Level > FILL)"",
        # 10 : ""Filling (Level < FULL, Level > FILL)"",
        # 11 : ""Start Filling (Level < FILL)""
        # }
        return usage.get(int(result[1]), ""Unknown"")

    def _do_get_rate(self):
        """"""
        Get helium meter channel 1 probe rate

        Input:
            None

        Output:
            rate(int) :
            0 : ""SLOW""
            1 : ""FAST""
        """"""
        rate = {
            1: ""1 : Helium Probe in FAST rate"",
            0: ""0 : Helium Probe in SLOW rate""
        }
        result = self._execute('X')
        return rate.get(int(format(int(result[5:7]), '08b')[6]), ""Unknown"")

    def remote(self):
        """"""
        Set control to remote & locked
        """"""
        logging.info(__name__ + ' : Set control to remote & locked')
        self.set_remote_status(1)

    def local(self):
        """"""
        Set control to local & locked
        """"""
        logging.info(__name__ + ' : Set control to local & locked')
        self.set_remote_status(0)

    def set_remote_status(self, mode):
        """"""
        Set remote control status.

        Args:
            mode(int) :
            0 : ""Local and locked"",
            1 : ""Remote and locked"",
            2 : ""Local and unlocked"",
            3 : ""Remote and unlocked"",

        Returns:
            None
        """"""
        status = {
            0: ""Local and locked"",
            1: ""Remote and locked"",
            2: ""Local and unlocked"",
            3: ""Remote and unlocked"",
        }
        logging.info(__name__ + ' : Setting remote control status to %s' %
                     status.get(mode, ""Unknown""))
        self._execute('C%s' % mode)

    # Functions: Control commands (only recognised when in REMOTE control)
    def set_to_slow(self):
        """"""
        Set helium meter channel 1 to slow mode.
        """"""
        self.set_remote_status(1)
        logging.info(__name__ + ' : Setting Helium Probe in SLOW rate')
        self._execute('S1')
        self.set_remote_status(3)

    def set_to_fast(self):
        """"""
        Set helium meter channel 1 to fast mode.
        """"""
        self.set_remote_status(1)
        logging.info(__name__ + ' : Setting Helium Probe in FAST rate')
        self._execute('T1')
        self.set_remote_status(3)

    def _do_set_rate(self, rate):
        """"""
        Set helium meter channel 1 probe rate

        Args:
            rate(int) :
            0 : ""SLOW""
            1 : ""FAST""
        """"""
        self.set_remote_status(1)
        if rate == 0:
            self.set_to_slow()
        elif rate == 1:
            self.set_to_fast()
        self.set_remote_status(3)
        logging.info(self._do_get_rate())
"
236,5.0,USA,"The LDA906V-8 Digital Attenuator is a highly accurate, bidirectional, 8-channel step attenuator. It provides calibrated attenuation from 200 to 6000 MHz with an amazing step size of 0.1 dB and typical accuracy <0.25 dB over 90 dB of control range. This Digital Attenuator is an easily portable USB powered device and is sized to fit into a single rack unit for ATE applications. It can be used with WiMAX, 3G, 4G, 5G, LTE, DVB and microwave radio fading simulators as well as in engineering and production test labs.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-906V-8 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-906V-8,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attBMWDZd2KeFE3R4'), ('width', 623), ('height', 768), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/5R7h65C-Td-m0Cmy2wkc5Q/zkVsyvecp5H6jdbDH-n1uiXqqLgrTKc3i1w19v3_WxnoAq5o3dcI6yl-SOSdyPsmHyXTZ2p703Acg1OSGB1DU_-goS2V7g2nwJi9JhGUXHz6odVVAFkQEXNwF7YJwVXU/B-km2KMo2m-l-mQN26aPxgDvFvreSlZus9aLPfvKD_w'), ('filename', 'vx-new-product-lda906v-8-(1).png'), ('size', 418145), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W2D6XpoGUNyqYZtxF9w67g/FYkWamTnKPNc-VwLcC0lgxYe3TTRN9fhI1ugmNeVhtres_JsirwmRyi5d6mDfy-JzP1bpHqC9c1FlGh5wcFy1Q/wKpZoUI_hnflb4c0sos7caEv1gy36kd_2g1gtzTgwUg'), ('width', 29), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/a8MRxuSr45zNQOxnYk4Vyw/mQxIjWzXCyTkkkv_xLzVG4vCQCENf7jCg_8YvvX6PQXWS91TtJX9p44DlsoswNPAKmy28YkWwvrD4C8cd-VbKw/Z7sgfyihqPPkzL-Phge6rv_vchWhB_5xtpbqD0Ezqxc'), ('width', 512), ('height', 631)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tiIxROKTAdWPeyTnRaugjA/brha3pL11zOPQLSFy9-L_esYOJI7-JA0q22YDFJqQOXBz8dqnGwndfbljugm_Of2UPNk-x-smKiz77sym5nSxg/bR5cv5_EdDPO07qV53D1uctYFKaY_lR8c3GwoxR7Fvg'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-906v-8-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,3499.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
237,5420.0,USA,"The E8267D PSG Vector Signal Generator is the highest performance, fully-integrated microwave vector signal generator from 100 kHz to 44 GHz, allowing you to create realistic wideband radar, electronic warfare (EW), and satellite communications (SATCOM) waveforms.
",Keysight E 8267 D,307.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software
",Qcodes Community,Keysight,"[OrderedDict([('id', 'attSixem5KGYQVz77'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CpwBp96kY5dUnguQiqYpww/J9lJkFD16xSDAPvmgv_d56vj9Lqq6ItNUW_5UoMyN-S0Shnh0JOEO8csLebz7Xu4Z8gE07FUhS-nDKuUnQrjlgGl9TDwvdw0ri8xFYWoqJI/u6-p03gBGsvJDX5pDkq8g03E4crw0PcqBr7jJQHqkOI'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OHgE-tcyvCBxuFqu2T7t_A/az7HG7f0QS1vnZ52VcX5uXPXMyaXWm0aU0XpvVcbL-iaXMyXmXzrSR-B4rc2L0dd-f6o9qeZB5ZLJwyXF5Ddw0s88QIR6eB5yl5YgvaK938/HNFmDeic35zFTM_Qz4ZdgLI6Ram83KauYXm5s4osP2w'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EXCh0xCs_7MHSTx5Zz4CPA/Vm4LQikWqhLq7BQ4diBo6XQAAS5CLk1cfq9-S4yaTSMKcSuykUmlSiBgLAQSc73c_ggpGgo-k66P49Sg6IvYNQsS9xuXJrGvmuhM7B3ygEQ/9HyBiUmvRW0XEd9GhYUpcS4ZSI2K8DRyjI70MXa9kr4'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RQAo4UuLDVUF9_USADgP3w/dB55bQeyNGnlF3qRJsUAPWsAKtJnjKtA7XkA6scBhm0AkS5S6u_fVInQqEF-cIPNvke9dKGD1bz6c74uEryk4Ez3lO2dlivDqcW_KnVzMQM/vqKwTVltxdBX1CwxjuFTUNpzJ5R2NnBqC3e7aQx3xzA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT E8267D PSG RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",KEYSIGHT E8267D PSG,https://keysight.com/us/en/assets/7018-01210/data-sheets/5989-0697.pdf,"[OrderedDict([('id', 'atthXG7KbstnBFyH7'), ('width', 1600), ('height', 900), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/903LPfkWquXM8oPlHxuybQ/1IoqEVrcDgzbqpwsVIhMex51OlgdUAJM5vSbUdXgj9UxxZOuD-MLogHpYW5OP1gtRdLV8yvqWJtXV9bY-ltO5tsjPi_6UEo6bjuZZ8y9-TY/spqKbMflKfsIjcHkwSkZvKdsWXtXgJqeOIHHTU9J2sE'), ('filename', 'E8267D_3_1600x900.png'), ('size', 1699895), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bcdo_-3F9MB6e7JGuQyu_A/oRNkq8XnqfzCBNs47Vy-Cp3jvWBIl2XP30239778tM2lMYTImCTghHaY5HOOoSX7WI4Wci-QmKsKRbPlIV1zIg/NwYP-E0Wr_krfUFeoYw9DZuj22vKj1tBw15LroBAljM'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iE6X5smIdN6cbnUgLq9DDA/qdSbHkn_dMVQV2PptU0NgpLCfBnFou0AFpNR5MTae5ogQoV-2bAM8DnpIMMVNEK6C0SCV7YSetQhowT1YXIIQg/E9PTG0FSng-9T79Mi03vi1mb0I_tkrN9jJk5_SZ6XHA'), ('width', 910), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ocAVYBwJDZk37Ih0DK3Lww/P2uBHBDP-WCMOW9gJ-gsWsdJAjzHlCbjkONwDIAjoBAPxjqiFZ445GsQejcWH5qdGbeWxID0CWoA6nAxfoxSww/VFznfFi48ZHtrTAy6W9lTbOCewl-lvx6rMZBmzLt2kw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/product/E8267D/psg-vector-signal-generator-100-khz-44-ghz.html,https://github.com/QCoDeS/Qcodes/blob/bf68490b3dd0b2dd9d3a5a1da90cdb157c6a9b89/qcodes/instrument_drivers/agilent/Agilent_E8267C.py,,,,,,"from typing import Any, Union

import numpy as np

from qcodes.instrument import VisaInstrument
from qcodes.validators import Enum, Numbers


class AgilentE8267C(VisaInstrument):
    """"""
    This is the QCoDeS driver for the Agilent E8267C signal generator.
    """"""

    def __init__(self, name: str, address: str, **kwargs: Any) -> None:
        super().__init__(name, address, terminator=""\n"", **kwargs)
        # general commands
        self.add_parameter(
            name=""frequency"",
            label=""Frequency"",
            unit=""Hz"",
            get_cmd=""FREQ?"",
            set_cmd=""FREQ {}"",
            get_parser=float,
            vals=Numbers(min_value=100e3, max_value=40e9),
        )
        self.add_parameter(
            name=""freq_offset"",
            label=""Frequency offset"",
            unit=""Hz"",
            get_cmd=""FREQ:OFFS?"",
            set_cmd=""FREQ:OFFS {}"",
            get_parser=float,
            vals=Numbers(min_value=-200e9, max_value=200e9),
        )
        self.add_parameter(
            ""freq_mode"",
            label=""Frequency mode"",
            set_cmd=""FREQ:MODE {}"",
            get_cmd=""FREQ:MODE?"",
            vals=Enum(""FIX"", ""CW"", ""SWE"", ""LIST""),
        )
        self.add_parameter(
            ""pulse_width"",
            label=""Pulse width"",
            unit=""ns"",
            set_cmd=""PULM:INT:PWID {}"",
            get_cmd=""PULM:INT:PWID?"",
            vals=Numbers(min_value=10e-9, max_value=20e-9),
        )
        self.add_parameter(
            name=""phase"",
            label=""Phase"",
            unit=""deg"",
            get_cmd=""PHAS?"",
            set_cmd=""PHAS {}"",
            get_parser=self.rad_to_deg,
            set_parser=self.deg_to_rad,
            vals=Numbers(min_value=-180, max_value=179),
        )
        self.add_parameter(
            name=""power"",
            label=""Power"",
            unit=""dBm"",
            get_cmd=""POW?"",
            set_cmd=""POW {}"",
            get_parser=float,
            vals=Numbers(min_value=-135, max_value=25),
        )
        self.add_parameter(
            name=""power_offset"",
            label=""Power offset"",
            unit=""dBm"",
            get_cmd=""POW:OFFS?"",
            set_cmd=""POW:OFFS {}"",
            get_parser=float,
            vals=Numbers(min_value=-200, max_value=200),
        )
        self.add_parameter(
            name=""output_rf"",
            get_cmd=""OUTP?"",
            set_cmd=""OUTP {}"",
            val_mapping={""OFF"": 0, ""ON"": 1},
        )
        self.add_parameter(
            name=""modulation_rf"",
            get_cmd=""OUTP:MOD?"",
            set_cmd=""OUTP:MOD {}"",
            val_mapping={""OFF"": 0, ""ON"": 1},
        )
        # reset values after each reconnect
        self.power(0)
        self.power_offset(0)
        self.connect_message()
        self.add_function(""reset"", call_cmd=""*RST"")

    # functions to convert between rad and deg
    @staticmethod
    def deg_to_rad(
        angle_deg: Union[float, str, np.floating, np.integer]
    ) -> ""np.floating[Any]"":
        return np.deg2rad(float(angle_deg))

    @staticmethod
    def rad_to_deg(
        angle_rad: Union[float, str, np.floating, np.integer]
    ) -> ""np.floating[Any]"":
        return np.rad2deg(float(angle_rad))
"
238,41.3,"CJ Delft, Netherlands",An ohmmeter is an electrical instrument that measures electrical resistance (the opposition offered by a circuit or component to the flow of electric current). Multimeters also function as ohmmeters when in resistance-measuring mode. An ohmmeter applies current to the circuit or component whose resistance is to be measured. It then measures the resulting voltage and calculates the resistance using Ohm’s law	https://en.wikipedia.org/wiki/Ohmmeter,Ivvi,438.0,"At QuTech, we work on a radically new technology with world-changing potential. Our mission: to develop scalable prototypes of a quantum computer and an inherently safe quantum internet, based on the fundamental laws of quantum mechanics.
",Qcodes Community,Qutech,"[OrderedDict([('id', 'atttaTZUsXgNNgwbC'), ('width', 1504), ('height', 747), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RKC6g3qCsb7JlOEKd8pGhg/gUoncvmvaSr7ZkO-YvuMFw_HfmvhNK_3nj44uVJrOXdCE_YpscwSK6SM2WXwR-0KYP6faNUsTfV4rq_QWleBMqhEaUMhLUC1tgdF2C22mBE/kI3WrO11fnm23PjSBDA0OIsqBO6LHqwXQ3huop_Ag2g'), ('filename', 'QuTech_Main_rgb.jpg'), ('size', 158522), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GAO-iIvbz0A8L-V2yztQGA/FCtruksdQ2Q6srrhGiwgoVVF3AeuSBQ3uNTbyiELwsOWzdExn74Qwu_PF6D6WjqI9gPjl-YCas6da4IXlMC6MQ/k4tJSzhQhfVv0d9gPSWJJ-fksIeYJRmUH68XX5I2PuQ'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KsjRTv1rhseXNm1_RtLk5A/iuV4HMfRxlUUUiLhccAd5H1WREcmLIApSygRmprmfgGs9yMXyYe3q_dZfEAfpSAfwLYQKR7GaVVHuo1UTete-w/7COlOkNModL_5MKY4ECyxVxde5O4qnKbhzkh9izju2A'), ('width', 1031), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vh5BpaV2gyhY3kOSAvq-ag/N8KfAOufo8Ghs6K4W1HIaasEWiYmkDoaiwwLHuSHP5UT7JTfSyhvbUSbBphdoBLA1BiBSDdKw5usJSo-WYhpjw/KtlR-7u5DaYUBKhRsOmxynfnGDx_p7Ip2JM7JCeQHec'), ('width', 3000), ('height', 3000)]))]))])]",https://qutech.nl/,Write a Python script that uses Qcodes Community to connect to a IVVI IV Converter,https://www.by-rutgers.nl/IV-converter.html,['IV Converter'],An I/V-convertor is intended to convert the current from a DAC (Digital Analog Convertor) into an analog voltage and to filter this signal to keep out the alias frequencies,IVVI,could not find,"[OrderedDict([('id', 'attGlLlqDetchBZyY'), ('width', 602), ('height', 180), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/yvfZ8Jn2LcdLWerwtrsN8w/zZYEk8ztTPNdO8qAOis_6lk1EJIRsi1PZEvUWXMArFAzujTaHdMyV6XlB-k1DuEmw-9OVKpF1DW-5TRg06LI6M3SsdnFMo42JTo-1prieoE/Wb9No-KnBZu9Ducvw7Ph9uci6pUUxhnxEmGWKJxGgvs'), ('filename', 'ivvidac2.jpg'), ('size', 103635), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/pKIFbsqVRUYFAGTwyJoLFA/_4Ll5iumXHnaE8J2MnSD67TF2_oYpGwIvcENnbWLz9JA0Q9FvzxCEuPHnSGrUefd1zMVX0JSo01vTu30OyLIuA/fhlsoJDUVHSCykutizwF4baY7EHoSMq6FbCCUBIkf3I'), ('width', 120), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2cuzk_552HbEbDEygxsvdQ/NWZnephB15lTJbmqUwpsQspQrYT_vITlI5kBHkKef8LOEmItIZzH2Cp0xwB5kQp4_hopLhHZ_UlwQysGDuENgQ/HmgVexQqE3nqOORBGvaMDP7ooiv_4vWgIZgJXOfHNfU'), ('width', 602), ('height', 180)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZFLX9nvjBTsIMYNiZKNHtg/-b6MeG9B9sW3fmH0GjbfomZLdYWbtGThlenTH9UbdzBiAEbFbpL8sBRDWnJjevYAdH6anLlhRP9nLqCItDthfg/BAo0l7AhHq3UvLh5NC9xT0__TkWHr-2VGJkB2VTbY-Q'), ('width', 3000), ('height', 3000)]))]))])]",https://qtwork.tudelft.nl/~mtiggelman/spi-rack/power.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QuTech/IVVI.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QuTech.html#module-qcodes_contrib_drivers.drivers.QuTech.IVVI,,,True,,"import time
import logging
import numpy as np
import pyvisa  # used for the parity constant
import traceback
import threading
import math

from qcodes import VisaInstrument, validators as vals
from qcodes.utils.validators import Bool, Numbers


class IVVI(VisaInstrument):
    '''
    Status: Alpha version, tested for basic get-set commands
        TODO:
            - Add adjustable range and rate protection per channel
            - Add error handling for the specific error messages in the
              protocol
            - Remove/fine-tune manual sleep statements

    This is the python driver for the D5 module of the IVVI-rack
    see: http://qtwork.tudelft.nl/~schouten/ivvi/doc-d5/index-d5.htm

    A descriptor for the data protocol can be found at
    http://qtwork.tudelft.nl/~schouten/ivvi/doc-d5/rs232linkformat.txt
    A copy of this file can be found at the bottom of this file.
    '''
    
    full_range = 4000.0
    half_range = full_range / 2
    resolution = 16
    dac_quata = full_range / 2**resolution

    def __init__(self, name, address, reset=False, numdacs=16, dac_step=10,
                 dac_delay=.1, safe_version=True,
                 polarity=['BIP', 'BIP', 'BIP', 'BIP'],
                 use_locks=False, **kwargs):
        '''
        Initialzes the IVVI, and communicates with the wrapper

        Args:
            name (str)        : name of the instrument
            address (str)     : ASRL address
            reset (bool)         : resets to default values, default=false
            numdacs (int)        : number of dacs, multiple of 4, default=16
            polarity (List[str]) : list of polarities of each set of 4 dacs
                                   choose from 'BIP', 'POS', 'NEG',
                                   default=['BIP', 'BIP', 'BIP', 'BIP']
            dac_step (float)         : max step size for dac parameter
            dac_delay (float)        : delay (in seconds) for dac
            safe_version (bool)    : if True then do not send version commands
                                     to the IVVI controller
            use_locks (bool) : if True then locks are used in the `ask`
                              function of the driver. The IVVI driver is not
                              thread safe, this locking mechanism makes it
                              thread safe at the cost of making the call to ask
                              blocking.
        '''
        t0 = time.time()
        super().__init__(name, address, **kwargs)
        if use_locks:
            self.lock = threading.Lock()
        else:
            self.lock = None

        self.safe_version = safe_version

        if numdacs % 4 == 0 and numdacs > 0:
            self._numdacs = int(numdacs)
        else:
            raise ValueError('numdacs must be a positive multiple of 4, '
                             'not {}'.format(numdacs))

        # values based on descriptor
        self.visa_handle.baud_rate = 115200
        self.visa_handle.parity = pyvisa.constants.Parity(1)  # odd parity
        self.visa_handle.write_termination = ''
        self.visa_handle.read_termination = ''

        self.add_parameter('version',
                           get_cmd=self._get_version)

        self.add_parameter('check_setpoints',
                           get_cmd=None, set_cmd=None,
                           initial_value=False,
                           label='Check setpoints',
                           vals=Bool(),
                           docstring=('Whether to check if the setpoint is the'
                                      ' same as the current DAC value to '
                                      'prevent an unnecessary set command.'))

        # Time to wait before sending a set DAC command to the IVVI
        self.add_parameter('dac_set_sleep',
                           get_cmd=None, set_cmd=None,
                           initial_value=0.05,
                           label='DAC set sleep',
                           unit='s',
                           vals=Numbers(0),
                           docstring=('When check_setpoints is set to True, '
                                      'this is the waiting time between the'
                                      'command that checks the current DAC '
                                      'values and the final set DAC command'))

        # Minimum time to wait before the read buffer contains data
        self.add_parameter('dac_read_buffer_sleep',
                           get_cmd=None, set_cmd=None,
                           initial_value=0.025,
                           label='DAC read buffer sleep',
                           unit='s',
                           vals=Numbers(0),
                           docstring=('While receiving bytes from the IVVI, '
                                      'sleeping is done in multiples of this '
                                      'value. Change to a lower value for '
                                      'a shorter minimum time to wait.'))

        self.add_parameter('dac_voltages',
                           label='Dac voltages',
                           get_cmd=self._get_dacs)

        self.add_function(
            'trigger',
            call_cmd=self._send_trigger
        )

        # initialize pol_num, the voltage offset due to the polarity
        self.pol_num = np.zeros(self._numdacs)

        for i in range(1, numdacs + 1):
            self.add_parameter(
                'dac{}'.format(i),
                label='Dac {}'.format(i),
                unit='mV',
                get_cmd=self._gen_ch_get_func(self._get_dac, i),
                set_cmd=self._gen_ch_set_func(self._set_dac, i),
                vals=vals.Numbers(self.pol_num[i - 1],
                                  self.pol_num[i - 1] + self.full_range),
                step=dac_step,
                inter_delay=dac_delay,
                max_val_age=10)

        for i in range(int(self._numdacs / 4)):
            self.set_pol_dacrack(polarity[i], np.arange(1 + i * 4, 1 + (i + 1) * 4),
                                 get_all=False)

        self._update_time = 5  # seconds
        self._time_last_update = 0  # ensures first call will always update

        t1 = time.time()

        # make sure we ignore termination characters
        # See http://www.ni.com/tutorial/4256/en/#toc2 on Termination Character
        # Enabled
        v = self.visa_handle
        v.set_visa_attribute(pyvisa.constants.VI_ATTR_TERMCHAR_EN, 0)
        v.set_visa_attribute(pyvisa.constants.VI_ATTR_ASRL_END_IN, 0)
        v.set_visa_attribute(pyvisa.constants.VI_ATTR_ASRL_END_OUT, 0)
        v.set_visa_attribute(pyvisa.constants.VI_ATTR_SEND_END_EN, 0)

        # basic test to confirm we are properly connected
        try:
            self.get_all()
        except Exception as ex:
            print('IVVI: get_all() failed, maybe connected to wrong port?')
            print(traceback.format_exc())

        print('Initialized IVVI-rack in %.2fs' % (t1 - t0))

    def get_idn(self):
        """"""
        Overwrites the get_idn function using constants as the hardware
        does not have a proper \*IDN function.
        """"""
        # not all IVVI racks support the version command, so return a dummy
        return -1

        idparts = ['QuTech', 'IVVI', 'None', self.version()]

        return dict(zip(('vendor', 'model', 'serial', 'firmware'), idparts))

    def _get_version(self):
        if self.safe_version:
            return -1
        else:
            # ask for the version of more recent modules
            # some of the older modules cannot handle this command
            mes = self.ask(bytes([3, 4]))
            ver = mes[2]
            return ver

    def get_all(self):
        return self.snapshot(update=True)

    def set_dacs_zero(self):
        for i in range(self._numdacs):
            self.set('dac{}'.format(i + 1), 0)

    def linspace(self, start: float, end: float, samples: int, flexible: bool = False, bip: bool = True):
        """"""
        Creates array of voltages, with correct alignment to the DAC
        quantisation, in a similar manner to numpy.linspace.
        This guarantees an even spacing and no double sampling inside
        the requested range.

        Args:
            start: the start of the voltage range, in millivolts
            end: the end of the voltage range, in millivolts
            samples: number of sample voltages
            flexible: occasionally get a different number of samples if
                they can still fit inside the range.
            bip: if the dac set to bi-polar (-2V to +2V) or
                not (-4 to -0, or 0 to +4),

        Returns:
            list of voltages in millivolts suitable for the ivvi DAC.
            Voltages are inside [start:end]
            Voltages are evenly spaced
            Voltages align with the DAC quantisation.

        Examples:
            normal usage::

                linspace(-100,100,8) -> [-99.88555733577478, .. 6 more ..
                                        , 99.64141298542764]
            
                linspace(-1000, 1000, 2000) ->
                    [-976.4858472571908, .. 1998 more .., 975.6923781185626 ]

            A flexable number of points::

                linspace(-1000, 1000, 2000, True) ->
                    [-999.9237048905165, .. 2046 more .., 999.1302357518883]

                4 bits is the optimal spacing, so this gives 2048 (= 2^11)
                points in a 2 V range

            Insufficient resolution::

                linspace(500, 502, 100) -> ValueError: Insufficient resolution
                    for 100 samples in the range 500 to 502. Maximum :16

                This prevents oversampling. Use flexable = True to adapt the number
                of points.
                                     
            Resolution limited sweep using the flexable option::

                linspace(500, 502, 100, True) -> [500.0991836423285, .. 14 more ..
                                                 , 501.9302662699321]
            
            A too narrow range::

                linspace(0, 0.01, 100, True) # -> ValueError: No DAC values exist
                                                  in the range 0 : 0.01

                Even using the flexable option can not help if there are no
                valid values in the requested range.
        """"""

        if not isinstance(samples, (int)):
            raise ValueError('samples: must be an integer')
        if not isinstance(start, (int, float)):
            raise ValueError('start: must be a number')
        if not isinstance(end, (int, float)):
            raise ValueError('end: must be a number')
        if samples < 2:
            raise ValueError('points: needs to be 2 or more')

        use_reversed = end < start
        if use_reversed:
            start,end = end,start
        half = 0.5 if bip else 0.0 # half bit difference between bip and neg,pos
        byte_start =  int(math.ceil(half + start/self.dac_quata))
        byte_end = int(math.floor(half + end/self.dac_quata))
        delta_bytes =  abs(byte_end - byte_start)-1
        spacing =  max(int(math.floor(delta_bytes / (samples-1))),2)
        l =  [(el+half)*self.dac_quata
              for el in range(byte_start, byte_end,spacing)]
        # Adjust the points until the length is correct
        if not flexible:
            if len(l) > samples:
                if (len(l) - samples)%2==1:
                    l = l[1:]
                s = int((len(l) - samples) / 2)
                if s > 0:
                    l = l[s:-s]
            if len(l) < samples:
                msg = ( 'Insufficient resolution for '+ str(samples)
                       + ' samples in the range '
                       + str(start)+' to ' + str(end) )
                msg += '. Maximum :' + str(len(l))
                raise ValueError(msg)
        if len(l) == 0:
            msg = ('No DAC values exist in the range ' +
                    str(start) + ' : ' + str(end)
                  )
            raise ValueError(msg)

        if use_reversed:
             l = list(reversed(l))
        return l

    # Conversion of data
    def _mvoltage_to_bytes(self, mvoltage):
        '''
        Converts a mvoltage on a 0mV-4000mV scale to a 16-bit integer
        equivalent

        output is a list of two bytes

        Input:
            mvoltage (float) : a mvoltage in the 0mV-4000mV range

        Output:
            (dataH, dataL) (int, int) : The high and low value byte equivalent
        '''
        bytevalue = int(round(mvoltage / self.full_range * 65535))
        return bytevalue.to_bytes(length=2, byteorder='big')

    def _bytes_to_mvoltages(self, byte_mess):
        '''
        Converts a list of bytes to a list containing
        the corresponding mvoltages
        '''
        values = list(range(self._numdacs))
        for i in range(self._numdacs):
            # takes two bytes, converts it to a 16 bit int and then divides by
            # the range and adds the offset due to the polarity
            values[i] = ((byte_mess[2 + 2 * i] * 256 + byte_mess[3 + 2 * i]) /
                         65535.0 * self.full_range) + self.pol_num[i]
        return values

    # Communication with device
    def _get_dac(self, channel):
        """"""
        Returns dac channel in mV
        channels range from 1-numdacs

        this version is a wrapper around the IVVI get function.
        it only updates
        """"""
        return self._get_dacs()[channel - 1]

    def _set_dac(self, channel, mvoltage):
        """"""
        Sets the specified dac to the specified voltage.
        A check to prevent setting the same value is performed if
        the check_setpoints flag was set.

        Input:
            mvoltage (float) : output voltage in mV
            channel (int)    : 1 based index of the dac

        Output:
            reply (string) : errormessage
        Private version of function
        """"""
        proceed = True

        if self.check_setpoints():
            cur_val = self.get('dac{}'.format(channel))
            # dac range in mV / 16 bits FIXME make range depend on polarity
            byte_res = self.full_range / 2**16
            # eps is a magic number to correct for an offset in the values
            # the IVVI returns (i.e. setting 0 returns byte_res/2 = 0.030518
            # with rounding
            eps = 0.0001

            proceed = False

            if (mvoltage > (cur_val + byte_res / 2 + eps) or
                    mvoltage < (cur_val - byte_res / 2 - eps)):
                proceed = True

            if self.dac_set_sleep() > 0.0:
                time.sleep(self.dac_set_sleep())

        # only update the value if it is different from the previous one
        # this saves time in setting values, set cmd takes ~650ms
        if proceed:
            polarity_corrected = mvoltage - self.pol_num[channel - 1]
            byte_val = self._mvoltage_to_bytes(polarity_corrected)
            message = bytes([2, 1, channel]) + byte_val

            reply = self.ask(message)
            self._time_last_update = 0  # ensures get command will update

            return reply

    def _get_dacs(self):
        '''
        Reads from device and returns all dacvoltages in a list

        Input:
            None

        Output:
            voltages (float[]) : list containing all dacvoltages (in mV)

        get dacs command takes ~450ms according to ipython timeit
        '''
        if (time.time() - self._time_last_update) > self._update_time:
            message = bytes([self._numdacs * 2 + 2, 2])
            # workaround for an error in the readout that occurs sometimes
            max_tries = 10
            for i in range(max_tries):
                try:
                    reply = self.ask(message)
                    self._mvoltages = self._bytes_to_mvoltages(reply)
                    self._time_last_update = time.time()
                    break
                except Exception as ex:
                    logging.warning('IVVI communication error trying again')
            if i + 1 == max_tries:  # +1 because range goes stops before end
                raise ex
        return self._mvoltages

    def write(self, message, raw=False):
        '''
        Protocol specifies that a write consists of
        descriptor size, error_code, message

        returns message_len
        '''
        # This is used when write is used in the ask command
        expected_answer_length = None

        if not raw:
            expected_answer_length = message[0]
            message_len = len(message) + 2

            error_code = bytes([0])
            message = bytes([message_len]) + error_code + message
        self.visa_handle.write_raw(message)

        return expected_answer_length

    def ask(self, message, raw=False):
        '''
        Send <message> to the device and read answer.
        Raises an error if one occurred
        Returns a list of bytes
        '''
        if self.lock:
            max_tries = 10
            for i in range(max_tries):
                if self.lock.acquire(timeout=.05):
                    break
                else:
                    logging.warning('IVVI: cannot acquire the lock')
            if i + 1 == max_tries:
                raise Exception('IVVI: lock is stuck')
        # Protocol knows about the expected length of the answer
        message_len = self.write(message, raw=raw)
        reply = self.read(message_len=message_len)
        if self.lock:
            self.lock.release()

        return reply

    def _read_raw_bytes_direct(self, size):
        """""" Read raw data using the visa lib """"""
        with(self.visa_handle.ignore_warning(pyvisa.constants.VI_SUCCESS_MAX_CNT)):
            data, statuscode = self.visa_handle.visalib.read(
                self.visa_handle.session, size)

        return data

    def _read_raw_bytes_multiple(self, size, maxread=512, verbose=0):
        """""" Read raw data in blocks using the visa lib
        Arguments:
            size (int) : number of bytes to read
            maxread (int) : maximum size of block to read
            verbose (int): verbosity level
        Returns:
            ret (bytes): bytes read from the device
        The pyvisa visalib.read does not always terminate at a newline, this
        is a workaround.
        Also see: https://github.com/qdev-dk/Qcodes/issues/276
                  https://github.com/hgrecco/pyvisa/issues/225
        Setting both VI_ATTR_TERMCHAR_EN and VI_ATTR_ASRL_END_IN to zero
        should allow the driver to ignore termination characters, this
        function is an additional safety mechanism.
        """"""
        ret = []
        instr = self.visa_handle
        with self.visa_handle.ignore_warning(pyvisa.constants.VI_SUCCESS_MAX_CNT):
            nread = 0
            while nread < size:
                nn = min(maxread, size - nread)
                chunk, status = instr.visalib.read(instr.session, nn)
                ret += [chunk]
                nread += len(chunk)
                if verbose:
                    print('_read_raw: %d/%d bytes' % (len(chunk), nread))
        ret = b''.join(ret)
        return ret

    def read(self, message_len=None):
        # because protocol has no termination chars the read reads the number
        # of bytes in the buffer
        bytes_in_buffer = 0
        timeout = 1
        t0 = time.time()
        t1 = t0
        bytes_in_buffer = 0
        if message_len is None:
            message_len = 1  # ensures at least 1 byte in buffer

        while bytes_in_buffer < message_len:
            t1 = time.time()

            if self.dac_read_buffer_sleep() > 0.0:
                time.sleep(self.dac_read_buffer_sleep())

            bytes_in_buffer = self.visa_handle.bytes_in_buffer
            if t1 - t0 > timeout:
                raise TimeoutError()
        # a workaround for a timeout error in the pyvsia read_raw() function
        mes = self._read_raw_bytes_multiple(bytes_in_buffer)

        # if mes[1] != 0:
        # see protocol descriptor for error codes
        #     raise Exception('IVVI rack exception ""%s""' % mes[1])
        return mes

    def set_pol_dacrack(self, flag, channels, get_all=True):
        '''
        Changes the polarity of the specified set of dacs

        Input:
            flag (str) : 'BIP', 'POS' or 'NEG'
            channel (int) : 0 based index of the rack
            get_all (bool): if True (default) perform a get_all

        Output:
            None
        '''
        flagmap = {'NEG': -self.full_range, 'BIP': -self.half_range, 'POS': 0}
        if flag.upper() not in flagmap:
            raise KeyError('Tried to set invalid dac polarity %s', flag)

        val = flagmap[flag.upper()]
        for ch in channels:
            self.pol_num[ch - 1] = val
            name = ""dac"" + str(ch)
            self.set_parameter_bounds(name, val,
                                      val + self.full_range)

        if get_all:
            self.get_all()

    def get_pol_dac(self, channel):
        '''
        Returns the polarity of the dac channel specified

        Input:
            channel (int) : 1 based index of the dac

        Output:
            polarity (str) : 'BIP', 'POS' or 'NEG'
        '''
        val = self.pol_num[channel - 1]

        if (val == -self.full_range):
            return 'NEG'
        elif (val == -self.half_range):
            return 'BIP'
        elif (val == 0):
            return 'POS'
        else:
            return 'Invalid polarity in memory'

    def set_parameter_bounds(self, name, min_value, max_value):
        parameter = self.parameters[name]
        if not isinstance(parameter.vals, Numbers):
            raise Exception('Only the Numbers validator is supported.')
        parameter.vals._min_value = min_value
        parameter.vals._max_value = max_value

    def _gen_ch_set_func(self, fun, ch):
        def set_func(val):
            return fun(ch, val)
        return set_func

    def _gen_ch_get_func(self, fun, ch):
        def get_func():
            return fun(ch)
        return get_func

    def _send_trigger(self):
        msg = bytes([2, 6])
        self.write(msg)
        self.read()  # Flush the buffer, else the command will only work the first time.

    def round_dac(self, value, dacname=None):
        """""" Round a value to the interal precision of the instrument

        Args:
            value (float): value to be rounded
            dacname (str or int or None): name or index of dac channel
        Returns:
            float: rounded value

        """"""
        if dacname is None:
            dacidx = 0  # assume all dacs have the same pol_num
        elif isinstance(dacname, str):
            dacidx = int(dacname[3:]) - 1
        else:
            dacidx = dacname

        value_pol_corr = value - self.pol_num[dacidx]
        value_bytes = self._mvoltage_to_bytes(value_pol_corr)
        value_round = (value_bytes[0] * 256 + value_bytes[1]) / \
            65535.0 * self.full_range + self.pol_num[dacidx]
        return value_round

    def adjust_parameter_validator(self, param):
        """"""Adjust the parameter validator range based on the dac resolution.

        The dac's of the IVVI have a finite resolution. If the validator range
        min and max values are not values the dac's can actually have, then it
        can occur that a set command results in the dac's going to a value just
        outside the validator range. Adjusting the validators with this
        function prevents that.

        Args:
            param (Parameter): a dac of the IVVI instrument
        """"""
        if not isinstance(param.vals, Numbers):
            raise Exception('Only the Numbers validator is supported.')
        min_val = param.vals._min_value
        max_val = param.vals._max_value

        min_val_upd = self.round_dac(min_val, param.name)
        max_val_upd = self.round_dac(max_val, param.name)

        param.vals = Numbers(min_val_upd, max_val_upd)


'''
RS232 PROTOCOL
-----------------------
BAUTRATE    115200
DATA BITS   8
PARITY      ODD
STOPBITS    1

Descriptor data PC-> MC

Byte        Name               Description                              value
--------------------------------------------------------------------------------------------------------
0        Descriptor size         Size of this descriptor                4 (action 2,4,6,7)
                                                                        5 (action 7)
                                                                        7 (action 1,3)
                                                                        11 (action 5)
1        Error                                                          0
2        Data out size           Number of bytes that has to be         2 (action 0,1,3,5,6)
                                 send by the MC after receiving         3 (action 4)
                                 descriptor                             4 (action 7)
                                                                        34 (action 2)
3        Action                                                         0= no operation
                                                                        1= set Dac value
                                                                        2= request DAC data
                                                                        3= continues send data to DAC
                                                                        4= ask for Program  ion
                                                                        5= set bits interface
                                                                        6= generate trigger output
                                                                        7= request data from specified DAC

4        Dac nr                  Nr of DAC to be updated                1 to 16
5        DataH                   High byte to DAC                       0 to $ff
6        DataL                   Low byte to DAC                        0 to $ff
7        data bit 24-31          interfaceBit24_31                      0 to $ff
8        data bit 16-23          interfaceBit16_23                      0 to $ff
9        data bit 08-15          interfaceBit08_15                      0 to $ff
10       data bit 00-07          interfaceBit00_07                      0 to $ff
--------------------------------------------------------------------------------------------------------


Descriptor data MC-> PC
--------------------------------------------------------------------------------------------------------
0        Descriptor size         Size of this descriptor                1
1        Error                   0x00 = no Error detected               1
                                 0x01 =
                                 0x02 =
                                 0x04 = Parity
                                 0x08 = Overrun
                                 0x10 = Frame Error
                                 0x20 = WatchDog reset detected (32)
                                 0x40 = DAC does not exist(64)
                                 0x80 = WrongAction (128)
2        Version                 program version                       1
2        DAC1                    Value of DAC1                         2
4        DAC2                    Value of DAC2                         2
..
32       DAC16                   Value of DAC16                        2
--------------------------------------------------------------------------------------------------------
'''
"
252,5.0,USA,"The LDA-602EH Lab Brick USB programmable 50 Ohm high resolution digital attenuator has an input power of up to +28 dBm, and offers frequency coverage of 200 to 6,000 MHz. It has an attenuation range of 120 dB and a step size of 0.1 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-602EH ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-602EH,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attA12ZwM8fNa8gjn'), ('width', 824), ('height', 644), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/v3i5b2mxf-T4mKBvPTsugw/8JcAd3NHQ4CS_GHnIDwSzZ3IXbaK5ZHWFYW6lRm5mmfmh4taUCPQHZd8NbXEcgrkdxy2sJ9H8OILNMwKtjRpmAKVBP2XOUNZ-tvxmD_g8YaC_6DSA8EgwqQQ8MyCTqxH/6vWjXrljtL-7s1dKqSCh4KJSzc2_91u1JtLqmiCep2w'), ('filename', 'vaunix-digital-attenuator-602eh.png'), ('size', 818096), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0BZa8LAaCcwVbThGWMMzaw/CqusFi1mHFMWCSeGKIJ-W5hvERQbhZL4kmiK_YVeUyBF81cYVGLQh6-6THyTbcERGg2rqEc0mgycJzCs7JsNLA/SHt5fz6VbNRNsWGQ_LmslfeCcD47AgAqmQyeZJZBTwg'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/wrme-T9ZhDjevBBzm5fmJQ/d_9XyMBGZHXqjeJNc4_fYyNXqWCZGCu2t2hIpc4ETVXzfHx-8uvsdrpSW1MafG_GdwLhoFKAkYEHzY1xXGrOrw/YKKXeHU_5_tz_4_WQnKJB1tvu7uH9JSmJrJxm8R8qVY'), ('width', 655), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ddh0LtwNruFBVQ4xGvZs0g/0sQ14AZC18BQIJweXROBjDo2uChyY74p14m7F-ESXLSui5ciPtBvb3kyzP-7vhZDRVBhdDJb5mqdISxzza6n1Q/RSBoNZ3pQETm8LU4GrRygvFU8fYlqaMglE7eJtIf7IM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-602eh-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,875.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
258,5420.0,USA,"The Keysight N3300A is a full-rack width mainframe with 6-slots that accepts combinations of N330x user-installable load modules (150 W to 600 W) for easy system configuration and future reconfiguration. The N3300A holds up to six N3302A, N3303A, N3304A, N3307A load modules, or three N3305A, N3306A double-wide modules, allowing a total up to 1,800 watts of maximum power.
",Keysight M 3300 A,304.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software
",Qcodes Community,Keysight,"[OrderedDict([('id', 'attSixem5KGYQVz77'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CpwBp96kY5dUnguQiqYpww/J9lJkFD16xSDAPvmgv_d56vj9Lqq6ItNUW_5UoMyN-S0Shnh0JOEO8csLebz7Xu4Z8gE07FUhS-nDKuUnQrjlgGl9TDwvdw0ri8xFYWoqJI/u6-p03gBGsvJDX5pDkq8g03E4crw0PcqBr7jJQHqkOI'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OHgE-tcyvCBxuFqu2T7t_A/az7HG7f0QS1vnZ52VcX5uXPXMyaXWm0aU0XpvVcbL-iaXMyXmXzrSR-B4rc2L0dd-f6o9qeZB5ZLJwyXF5Ddw0s88QIR6eB5yl5YgvaK938/HNFmDeic35zFTM_Qz4ZdgLI6Ram83KauYXm5s4osP2w'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EXCh0xCs_7MHSTx5Zz4CPA/Vm4LQikWqhLq7BQ4diBo6XQAAS5CLk1cfq9-S4yaTSMKcSuykUmlSiBgLAQSc73c_ggpGgo-k66P49Sg6IvYNQsS9xuXJrGvmuhM7B3ygEQ/9HyBiUmvRW0XEd9GhYUpcS4ZSI2K8DRyjI70MXa9kr4'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RQAo4UuLDVUF9_USADgP3w/dB55bQeyNGnlF3qRJsUAPWsAKtJnjKtA7XkA6scBhm0AkS5S6u_fVInQqEF-cIPNvke9dKGD1bz6c74uEryk4Ez3lO2dlivDqcW_KnVzMQM/vqKwTVltxdBX1CwxjuFTUNpzJ5R2NnBqC3e7aQx3xzA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT N3300A Electronic Loads,https://www.keysight.com/us/en/assets/7018-06481/white-papers/5992-3625.pdf,['Electronic Loads'],"An electronic load is a test instrument designed to sink current and absorb power out of a power source. If a power supply is used to power a device, an electronic load is used to test the power supply by emulating the device under test (DUT). Power supplies and electronic loads are complementary test equipment. The power supply tests electronic circuits under specific sourcing conditions. The electronic load tests the energy sources or energy conversion blocks under specific loading constraints. An electronic load is a programmable instrument that offers the user various modes of control such as constant voltage (CV), constant current (CC), constant power (CP) or constant resistance (CR).
",KEYSIGHT N3300A,https://www.keysight.com/us/en/assets/7018-06712/data-sheets/5980-0232.pdf,"[OrderedDict([('id', 'att6q8HhGlRlrC1ar'), ('width', 1600), ('height', 900), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/AScuvhYElN4-cb1M0V6qSQ/JX9mbuVt-ATMlWgwAidB6qVNX2ya2BX_zDiA9J8p0LfY9VqrFP6tDFoxOO8aofqyf8NhUsmN-8ww5c-hHHzfK76Ky3ho-6ivs7B0kjPKyEQ/6j4kbufuhAIVgoFqUzKqsEICBQx70ObBTMIBKb19YY4'), ('filename', 'N3300A_Front_Left.png'), ('size', 1447932), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ega4Ypo96WgJolcSlEsqtQ/SQgu5vgNFySWgAZc2wb2JYD8UkcRrDTzu0UaOZgMlxAlKW9Ex4jOtmvnJtp2hZdaZxIraNFgefVysyM1GumYKQ/49D8dy36GaZHH8G5-fV1ca-Torm9ZQJoiE9YMeOkleo'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/T5ozsuLI6rmLlXG4BFbK6w/9sPr-p7O8ylRu3AwLF6MSdhdScTWRNsxDz2c3pEvWQ-0C6OWw5MtBCBucEETamwEbevFEExncMor4jhCtiVkRw/7g1-pqFfoPQxBqaNJy1YVdH98sYTcYnY92GkAtLNUCU'), ('width', 910), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/5q5CdKnzipf4CYJTM-ulHg/jS4ht9W3UHxn94PoP7SI51oAzl14kYweTFi9YxHQZXEZCwbJvjjWYSa1m4ma_YANn2C4_31-pNY6MRDt2gC7jQ/db_7rEBq5sGWjMS4dRHhd9M1knixqAI3IgLuZ5vwp70'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/product/N3300A/1800-watt-dc-electronic-load-mainframe.html,,,3683.0,,,,
260,41.3,"CJ Delft, Netherlands","The D4 module contains 2 individual 24-bit ADCs (Analog to Digital Converters) with an input range of ±4V and a data rate ranging from 1.7 Hz to 83 kHz. As it is designed as alternative to Keithley DMMs, it offers similar or better performance in terms of noise, resolution, temperature drift, INL and 50 Hz rejection. For details, see specifications.",D4,439.0,"At QuTech, we work on a radically new technology with world-changing potential. Our mission: to develop scalable prototypes of a quantum computer and an inherently safe quantum internet, based on the fundamental laws of quantum mechanics.
",Qcodes Community,Qutech,"[OrderedDict([('id', 'atttaTZUsXgNNgwbC'), ('width', 1504), ('height', 747), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RKC6g3qCsb7JlOEKd8pGhg/gUoncvmvaSr7ZkO-YvuMFw_HfmvhNK_3nj44uVJrOXdCE_YpscwSK6SM2WXwR-0KYP6faNUsTfV4rq_QWleBMqhEaUMhLUC1tgdF2C22mBE/kI3WrO11fnm23PjSBDA0OIsqBO6LHqwXQ3huop_Ag2g'), ('filename', 'QuTech_Main_rgb.jpg'), ('size', 158522), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GAO-iIvbz0A8L-V2yztQGA/FCtruksdQ2Q6srrhGiwgoVVF3AeuSBQ3uNTbyiELwsOWzdExn74Qwu_PF6D6WjqI9gPjl-YCas6da4IXlMC6MQ/k4tJSzhQhfVv0d9gPSWJJ-fksIeYJRmUH68XX5I2PuQ'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KsjRTv1rhseXNm1_RtLk5A/iuV4HMfRxlUUUiLhccAd5H1WREcmLIApSygRmprmfgGs9yMXyYe3q_dZfEAfpSAfwLYQKR7GaVVHuo1UTete-w/7COlOkNModL_5MKY4ECyxVxde5O4qnKbhzkh9izju2A'), ('width', 1031), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vh5BpaV2gyhY3kOSAvq-ag/N8KfAOufo8Ghs6K4W1HIaasEWiYmkDoaiwwLHuSHP5UT7JTfSyhvbUSbBphdoBLA1BiBSDdKw5usJSo-WYhpjw/KtlR-7u5DaYUBKhRsOmxynfnGDx_p7Ip2JM7JCeQHec'), ('width', 3000), ('height', 3000)]))]))])]",https://qutech.nl/,Write a Python script that uses Qcodes Community to connect to a D4 Power Meters,https://en.wikipedia.org/wiki/Ohmmeter,['Power Meters'],An ohmmeter is an electrical instrument that measures electrical resistance (the opposition offered by a circuit or component to the flow of electric current). Multimeters also function as ohmmeters when in resistance-measuring mode. An ohmmeter applies current to the circuit or component whose resistance is to be measured. It then measures the resulting voltage and calculates the resistance using Ohm’s law,D4,could not find,"[OrderedDict([('id', 'attYUtLFk025sbBng'), ('width', 418), ('height', 1521), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QbttG99f49_xRBSMnBSyIw/Z7Ob0WsPzi2mmaDVMhTHbhu_J103FB42ZLk0Ax4Hj7IBaB28qa0b5B9j7TlJqWUL3N-kFRhkZDsZ21Ma0YoyZNa6cX0vVLNujHG8jpITL8A/9MnYCCIkzFCgEwwO_GQYsQ3yC_gJjc0V6JQJ5clhEME'), ('filename', 'FrontD4.png'), ('size', 20536), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zCXuk65Ygbd7_CqgiiZ4-Q/oARYiIN9RAHnKUKtP2lZ1cji_zEpL_X94bwU6DuRCFTQ2dJAZU8Gsy4bKKkuFCM8i1atLF64dciIfbRw01hk5A/GYS-hsZxoqoCuvU0Hd5ZGz5QJJY9TgSH9pWlKZwsFqk'), ('width', 10), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Hz02wRTESx_9cZcge7TtUw/26vaDzvC8Sy9jisYoVLjF5EiQutqN0x5BAuEmKeR-EpI14zS1kd4trsh_RH1dNCcxTe5TjmCe_C4uxOkWvp-Tw/S-9ZTS7UZrfGBewCpSop0TCab2APsroOiMuc5zjZBPI'), ('width', 418), ('height', 1521)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/dmzjVMFHSy0O9gN7aw_EBQ/nWoU6ITHzpVABtNkLsdHw5ow41PusTxvvADp53Jl8BMTD7zsBjM2qNAR612OmNquA25JV_-KXT5Ep-sVJx8Qrw/e32yW_NfMv-eZG9SulDzRhvCw_MdB0Ug-KbgXSGs7bE'), ('width', 3000), ('height', 3000)]))]))])]",https://qtwork.tudelft.nl/~mtiggelman/modules/v-measure/d4.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QuTech/D4.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QuTech.html#module-qcodes_contrib_drivers.drivers.QuTech.D4,,,,,"from qcodes.instrument.base import Instrument
try:
    from spirack import D4_module
except ImportError:
    raise ImportError(('The D4_module class could not be found. '
                       'Try installing it using pip install spirack'))

from functools import partial

class D4(Instrument):
    """"""
    Qcodes driver for the D4 ADC SPI-rack module. Requires installation
    of the 'spirack' package using pip.

    Args:
        name (str): name of the instrument.

        spi_rack (SPI_rack): instance of the SPI_rack class as defined in
            the spirack package. This class manages communication with the
            individual modules.

        module (int): module number as set on the hardware.
    """"""

    def __init__(self, name, spi_rack, module, **kwargs):
        super().__init__(name, **kwargs)

        self.d4 = D4_module(spi_rack, module)

        self.add_parameter('mode',
                           label='Mode',
                           get_cmd=self.get_mode)

        self.add_parameter('filter_value',
                           label='Filter value',
                           get_cmd=self.get_filter_value)

        self.add_parameter('buffers_enabled',
                           label='Buffers enabled',
                           get_cmd=self.get_buffers_enabled)

        for i in range(2):
            self.add_parameter('adc{}'.format(i + 1),
                               label='ADC {}'.format(i + 1),
                               get_cmd=partial(self.d4.singleConversion, i),
                               units='V')

    def get_mode(self):
        return self.d4.mode

    def get_filter_value(self):
        return self.d4.filter_val

    def get_buffers_enabled(self):
        return self.d4.buf_en
"
263,5.0,USA,"The LDA-908V Digital Attenuator is a highly accurate, bidirectional, 50 Ohm step attenuator. The LDA-908V provides calibrated attenuation from 200 to 8000 MHz with an amazing step size of 0.1 dB and typical accuracy <0.25 dB over 90 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-908V ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-908V,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attreAllvLxRUZp7O'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QVwaQpuwUDR66U1O_ub4tw/Kygy7g6ceuqKe7Qwds038MnxTYucgoHmLvi7fRW02wKO3GIcUwstR6p7bSVJMH0x_s53LCa1K0hLlRZsEVPWA37Fmv2F9Pb845GtqgXARAf06UaeB-ugRblfhv80-U4X/44FLyx5zskAM2AKY8R6bzU1OMAzK4faCAIiScxtoTlE'), ('filename', 'vaunix-lda-908-digital-attenuator.png'), ('size', 167485), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/x4QhDncVxBMYpuXT_f1GPw/w_2rrATkPBJG50p8o0xYkvVtS7FRds9H1PThzGLji1q95N6NpG-Y-dyedd_xStC9C1VLewKKlILIXf3H6qJOTA/w4BvOlP1kVoRrGOf5wcLOeXRNToF35zfjju9lMYaXv4'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/k5LWqdpSt_nSlUjL9nVtTQ/B8csauYRLfNXpWPez6Bmb-w7_P_bZs46sw7DgNVVsC7BHMVGUm6Aj-5xaSSgowEEa7I33o7hAqGsgFAn4uc6_Q/AQQtwSWSbMMKYuMbu_gc1XywcvYXr-i0CEFElelWJ08'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QiOiYwK_DLYjyC8djQ6VOw/UFBLbTM8CVCGLdpN0rA-Z6haWBRuRFjYPSbRUBwh6jFCzdDwy_6p97ERA7d0pz_6eyVC4Bfr6k1qjWX5F0pUGg/Sxb2GIQEC98oTE6ISPzj-YnEWAuZLfHGauVD8DDCuhM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-908v-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,599.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
266,38.0,Switzerland,The Zurich Instruments HF2LI is a digital lock-in amplifier covering the frequency range between DC and 50 MHz. It is the instrument of choice for the characterization of MEMS devices such as gyroscopes and for measurements in the area of microfluidics.,HF 2 LI,650.0,"Zurich Instruments Ltd. is a privately owned company developing and selling advanced test and measurement instruments equipped with software for dynamic signal analysis. 
",Qcodes Community,Zurich Instruments,"[OrderedDict([('id', 'attFUxuoeXBIspDuo'), ('width', 204), ('height', 228), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-aJZerh44NENOuc71uHbVA/mykVIYXi0ZNzJ6Ax23WvcMKdKEBIuq50kx6OYCOXv74UoACIkPS0rPAjd06U-37Ra1sC_1NpDuZUdNfddQyp3kywG2LzHS6Py3DtF0B6a3j7MaDLwtAUqILQ1FA4jN_V/a5DaVbBTWufeEgt6gkn-N7hGLk7kQFTztq5f8OUn8r4'), ('filename', 'Zurich_Instruments(logo).png'), ('size', 3655), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tTH3_exZDRca7ndOG1GTkg/M3jvNvXPxKcHtyOk_L9xyIbunn0LpzohY1wWW8mraDCCOZEksE_A1dDjUqq0mTBTXcU0B3ICcyESSIesw318BA/qEXexaHoGoZKSK3_R-6efbwMUT3t_p5xYx2GPiGuI4o'), ('width', 32), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9Eonia4x7RaM-shc9mMbfQ/ZaqlbP76_rirAnk1bNGXXDXGc6_-gQNEzHyuqg9Mmhf-bbJGdm_BQlXdvot6wtF9q4W3UTRun_mOyQCS8csXbA/nzrc_d9PEvSIejxBRybqARZ1iLQgxqXeUFsvBMtpIpw'), ('width', 204), ('height', 228)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-mAPS_esAWs4FWXEc9JtCw/NptxydPBHQjtgt9K4DY5XDErIfRGAM-hoZAiA76YTcWlTmv0CARtgGMCiViSdJeAEKbbeOieqV8Zu6hSRI2WSw/V7cmuByL29KqOrDTgsRiGTG7SH67rKFKdUv3TmJt0iw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.zhinst.com/americas/en,Write a Python script that uses Qcodes Community to connect to a HF2LI Lockin Amplifiers,https://en.wikipedia.org/wiki/Lock-in_amplifier,['Lockin Amplifiers'],"A lock-in amplifier is a type of amplifier that can extract a signal with a known carrier wave from an extremely noisy environment. Depending on the dynamic reserve of the instrument, signals up to a million times smaller than noise components, potentially fairly close by in frequency, can still be reliably detected. It is essentially a homodyne detector followed by low-pass filter that is often adjustable in cut-off frequency and filter order.",HF2LI,https://lasphotonics.com/wp-content/uploads/2020/12/zi_hf2li_leaflet_web.pdf,"[OrderedDict([('id', 'attP2nH7AT3gRy554'), ('width', 1183), ('height', 387), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OQ22OEbknCk2bRqRhlaCew/OUhlATQMA3vgQ594hgyCNUAnMrfz-3NQydcyv5_lEX2xJghCKV2RjLwDx_AuJ1rPtJ4f1MBv8E_z2N_oiPAGApQAzOQScg_lTpXyuFAe9VE/y_nZ6Ogrj7osEBsxQfmfQ8ENgsTBV2yHMoWOmgprtDs'), ('filename', 'hf2li_persp.png.webp'), ('size', 27462), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/HN3458_sTobpJ1UklTlatA/8TI9TDqwgxswLlqGMOMheAGv1wW5WzNxBgFXAD4nyQoJJ0Fd_KrnGp-MNRG1ehvlpuDY4PDpNYH3hkSqJ7Hoxbu0vzqiTbygh7p5MbZWK8M/0YFJuCbdzSGlnURHtPbByBqvpqB19udsAVpRsm80drE'), ('width', 110), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/BChA1d7in8BIUgyKl7t6qA/_dUFYPQVSZwLLumH1NICAUPp0Fk93qOKpGPxPFNTb-3xKY-7PM3qndZTd952fio0iRngdfyCz7Gqb8spkkK8jDAkjcf1Hg0RBj-yM86_ENI/IXRPj9i93pGIsHZEjO2w9gveXQbB2OYzG-iLacco_so'), ('width', 1183), ('height', 387)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OIcn__BQlopjTBFV8ehZvw/dSuI9qhmw5pbUaLlu6sEq1DKNfosM697mFAgwcMwgfT-0qPyWoWrXFvRCU-hoxbS4Dnvg-R6VJw8O8E1FReOxmbvuB_GANsPTuUmkcTYayw/hDn1bB7ZNz2t082PSOtW9pnCsifCwRB-B_Dj8fMJBK4'), ('width', 3000), ('height', 3000)]))]))])]",https://www.zhinst.com/americas/en/products/hf2li-lock-in-amplifier,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/ZurichInstruments/HF2LI.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/ZurichInstruments_HF2LI.ipynb,,,,,"from typing import Dict, List, Optional, Sequence, Any, Union
import numpy as np
import logging
log = logging.getLogger(__name__)

import zhinst.utils
import qcodes as qc
from qcodes.instrument.base import Instrument
import qcodes.utils.validators as vals

class HF2LI(Instrument):
    """"""Qcodes driver for Zurich Instruments HF2LI lockin amplifier.

    This driver is meant to emulate a single-channel lockin amplifier,
    so one instance has a single demodulator, a single sigout channel,
    and multiple auxout channels (for X, Y, R, Theta, or an arbitrary manual value).
    Multiple instances can be run simultaneously as independent lockin amplifiers.

    This instrument has a great deal of additional functionality that is
    not currently supported by this driver.

    Args:
        name: Name of instrument.
        device: Device name, e.g. ""dev204"", used to create zhinst API session.
        demod: Index of the demodulator to use.
        sigout: Index of the sigout channel to use as excitation source.
        auxouts: Dict of the form {output: index},
            where output is a key of HF2LI.OUTPUT_MAPPING, for example {""X"": 0, ""Y"": 3}
            to use the instrument as a lockin amplifier in X-Y mode with auxout channels 0 and 3.
        num_sigout_mixer_channels: Number of mixer channels to enable on the sigouts. Default: 1.
    """"""
    OUTPUT_MAPPING = {-1: 'manual', 0: 'X', 1: 'Y', 2: 'R', 3: 'Theta'}
    def __init__(self, name: str, device: str, demod: int, sigout: int,
        auxouts: Dict[str, int], num_sigout_mixer_channels: int=1, **kwargs) -> None:
        super().__init__(name, **kwargs)
        instr = zhinst.utils.create_api_session(device, 1, required_devtype='HF2LI')
        self.daq, self.dev_id, self.props = instr
        self.demod = demod
        self.sigout = sigout
        self.auxouts = auxouts
        log.info(f'Successfully connected to {name}.')

        for ch in self.auxouts:
            self.add_parameter(
                name=ch,
                label=f'Scaled {ch} output value',
                unit='V',
                get_cmd=lambda channel=ch: self._get_output_value(channel),
                get_parser=float,
                docstring=f'Scaled and demodulated {ch} value.'
            )
            self.add_parameter(
                name=f'gain_{ch}',
                label=f'{ch} output gain',
                unit='V/Vrms',
                get_cmd=lambda channel=ch: self._get_gain(channel),
                get_parser=float,
                set_cmd=lambda gain, channel=ch: self._set_gain(gain, channel),
                vals=vals.Numbers(),
                docstring=f'Gain factor for {ch}.'
            )
            self.add_parameter(
                name=f'offset_{ch}',
                label=f'{ch} output offset',
                unit='V',
                get_cmd=lambda channel=ch: self._get_offset(channel),
                get_parser=float,
                set_cmd=lambda offset, channel=ch: self._set_offset(offset, channel),
                vals=vals.Numbers(-2560, 2560),
                docstring=f'Manual offset for {ch}, applied after scaling.'
            )
            self.add_parameter(
                name=f'output_{ch}',
                label=f'{ch} outptut select',
                get_cmd=lambda channel=ch: self._get_output_select(channel),
                get_parser=str
            )
            # Making output select only gettable, since we are
            # explicitly mapping auxouts to X, Y, R, Theta, etc.
            self._set_output_select(ch)
            
        self.add_parameter(
            name='phase',
            label='Phase',
            unit='deg',
            get_cmd=self._get_phase,
            get_parser=float,
            set_cmd=self._set_phase,
            vals=vals.Numbers(-180,180)
        )
        self.add_parameter(
            name='time_constant',
            label='Time constant',
            unit='s',
            get_cmd=self._get_time_constant,
            get_parser=float,
            set_cmd=self._set_time_constant,
            vals=vals.Numbers()
        )  
        self.add_parameter(
            name='frequency',
            label='Frequency',
            unit='Hz',
            get_cmd=self._get_frequency,
            get_parser=float
        ) 
        self.add_parameter(
            name='sigout_range',
            label='Signal output range',
            unit='V',
            get_cmd=self._get_sigout_range,
            get_parser=float,
            set_cmd=self._set_sigout_range,
            vals=vals.Enum(0.01, 0.1, 1, 10)
        )
        self.add_parameter(
            name='sigout_offset',
            label='Signal output offset',
            unit='V',
            get_cmd=self._get_sigout_offset,
            get_parser=float,
            set_cmd=self._set_sigout_offset,
            vals=vals.Numbers(-1, 1),
            docstring='Multiply by sigout_range to get actual offset voltage.'
        )
        for i in range(num_sigout_mixer_channels):
            self.add_parameter(
                name=f'sigout_enable{i}',
                label=f'Signal output mixer {i} enable',
                get_cmd=lambda mixer_channel=i: self._get_sigout_enable(mixer_channel),
                get_parser=float,
                set_cmd=lambda amp, mixer_channel=i: self._set_sigout_enable(mixer_channel, amp),
                vals=vals.Enum(0,1,2,3),
                docstring=""""""\
                0: Channel off (unconditionally)
                1: Channel on (unconditionally)
                2: Channel off (will be turned off on next change of sign from negative to positive)
                3: Channel on (will be turned on on next change of sign from negative to positive)
                """"""
            )
            self.add_parameter(
                name=f'sigout_amplitude{i}',
                label=f'Signal output mixer {i} amplitude',
                unit='Gain',
                get_cmd=lambda mixer_channel=i: self._get_sigout_amplitude(mixer_channel),
                get_parser=float,
                set_cmd=lambda amp, mixer_channel=i: self._set_sigout_amplitude(mixer_channel, amp),
                vals=vals.Numbers(-1, 1),
                docstring='Multiply by sigout_range to get actual output voltage.'
            )

    def _get_phase(self) -> float:
        path = f'/{self.dev_id}/demods/{self.demod}/phaseshift/'
        return self.daq.getDouble(path)

    def _set_phase(self, phase: float) -> None:
        path = f'/{self.dev_id}/demods/{self.demod}/phaseshift/'
        self.daq.setDouble(path, phase)
        
    def _get_gain(self, channel: str) -> float:
        path = f'/{self.devid}/auxouts/{self.auxouts[channel]}/scale/'
        return self.daq.getDouble(path)

    def _set_gain(self, gain: float, channel: str) -> None:
        path = f'/{self.dev_id}/auxouts/{self.auxouts[channel]}/scale/'
        self.daq.setDouble(path, gain)

    def _get_offset(self, channel: str) -> float:
        path = f'/{self.dev_id}/auxouts/{self.auxouts[channel]}/offset/'
        return self.daq.getDouble(path)

    def _set_offset(self, offset: float, channel: str) -> None:
        path = f'/{self.dev_id}/auxouts/{self.auxouts[channel]}/offset/'
        self.daq.setDouble(path, offset)

    def _get_output_value(self, channel: str) -> float:
        path = f'/{self.dev_id}/auxouts/{self.auxouts[channel]}/value/'
        return self.daq.getDouble(path)

    def _get_output_select(self, channel: str) -> str:
        path = f'/{self.dev_id}/auxouts/{self.auxouts[channel]}/outputselect/'
        idx = self.daq.getInt(path)
        return self.OUTPUT_MAPPING[idx]

    def _set_output_select(self, channel: str) -> None:
        path = f'/{self.dev_id}/auxouts/{self.auxouts[channel]}/outputselect/'
        keys = list(self.OUTPUT_MAPPING.keys())
        idx = keys[list(self.OUTPUT_MAPPING.values()).index(channel)]
        self.daq.setInt(path, idx)

    def _get_time_constant(self) -> float:
        path = f'/{self.dev_id}/demods/{self.demod}/timeconstant/'
        return self.daq.getDouble(path)

    def _set_time_constant(self, tc: float) -> None:
        path = f'/{self.dev_id}/demods/{self.demod}/timeconstant/'
        self.daq.setDouble(path, tc)

    def _get_sigout_range(self) -> float:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/range/'
        return self.daq.getDouble(path)

    def _set_sigout_range(self, rng: float) -> None:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/range/'
        self.daq.setDouble(path, rng)

    def _get_sigout_offset(self) -> float:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/offset/'
        return self.daq.getDouble(path)

    def _set_sigout_offset(self, offset: float) -> None:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/offset/'
        self.daq.setDouble(path, offset)

    def _get_sigout_amplitude(self, mixer_channel: int) -> float:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/amplitudes/{mixer_channel}/'
        return self.daq.getDouble(path)

    def _set_sigout_amplitude(self, mixer_channel: int, amp: float) -> None:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/amplitudes/{mixer_channel}/'
        self.daq.setDouble(path, amp)

    def _get_sigout_enable(self, mixer_channel: int) -> int:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/enables/{mixer_channel}/'
        return self.daq.getInt(path)

    def _set_sigout_enable(self, mixer_channel: int, val: int) -> None:
        path = f'/{self.dev_id}/sigouts/{self.sigout}/enables/{mixer_channel}/'
        self.daq.setInt(path, val)

    def _get_frequency(self) -> float:
        path = f'/{self.dev_id}/demods/{self.demod}/freq/'
        return self.daq.getDouble(path)

    def sample(self) -> dict:
        path = f'/{self.dev_id}/demods/{self.demod}/sample/'
        return self.daq.getSample(path)
        
"
268,5.0,USA,"The LDA-608V-4 Digital Attenuator is a highly accurate, bidirectional, 50 Ohm step attenuator with 4 independently controlled attenuator paths. The LDA-608V-4 provides calibrated attenuation from 200 to 8000 MHz with an amazing step size of 0.1 dB and typical accuracy <0.25 dB over 60 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-608V-4 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-608V-4,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attsdQ8UwcgOTb7gn'), ('width', 961), ('height', 1109), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Dvdy6bQkl-t2kJ5cjVglWA/KCGlGJfzjjPR8hQcQYrFSlc0yvwP0iqNlaLzgjcmHrrDnR1-4V9KMh2Baz-eEwwMrJbeNJPLULBtiGFMfPt1iRk8fLNZiWh8NwJwW_Gat2oRCqwWSN5s8CXKMtMuF8ck/QDWLvj4C2ian4VbEErlzpF9KUE677ZrCPDziiAYS-9g'), ('filename', 'lda-608v-4-product-photo.jpg'), ('size', 79951), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bWfOHHrKbW0Nu7LAgr5HSQ/QlOGxDe_NPu0fG0sPasv27UGuCcxWd2jEURwJaV0uXvXiesT7whKkVqC1K_htXMIss2-T96FZxXclkUffQ_yJw/V3W8tUp3DAzQOF0EE9c1-DZakwCmVtQzQVJug1naCok'), ('width', 31), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/klLiVXdWFUlUA1kAx6H-Ow/wXO1LxUZPFzgsxyUWSWJXoNe7jrIMzZYFLHiEwDSOoEEOiTHAxVfKMlgeSK4Q5MMsiIsiNze7fEfbW7QOpUadQ/kqtnpjWvZxZO6r7a1pu1suYC0lYY_u2ECnFMoZgK_tg'), ('width', 512), ('height', 591)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/yiqMwEm3gZfm9kRsCGuiIA/ZI8IDwtvMqYesC1QBwWUZHbVBxXH_FQ7Y0RFffEAvfGBfQ9TE4AAjkC-BALzRci7fGHCE4goy-Ks_wNYQZokzw/Mr-5DJe_MebBGEQdvKIAgesX0lyq72qwXyxoImBDOtI'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-608v-4-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,1400.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
273,5.0,USA,"The LDA-203B Digital Attenuator is a bidirectional, 50 Ohm step attenuator. The LDA-203B provides 63 dB of attenuation control over the frequency range of 1 to 20 GHz with a step size of 0.5 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-203B ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-203B,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attreAllvLxRUZp7O'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QVwaQpuwUDR66U1O_ub4tw/Kygy7g6ceuqKe7Qwds038MnxTYucgoHmLvi7fRW02wKO3GIcUwstR6p7bSVJMH0x_s53LCa1K0hLlRZsEVPWA37Fmv2F9Pb845GtqgXARAf06UaeB-ugRblfhv80-U4X/44FLyx5zskAM2AKY8R6bzU1OMAzK4faCAIiScxtoTlE'), ('filename', 'vaunix-lda-908-digital-attenuator.png'), ('size', 167485), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/x4QhDncVxBMYpuXT_f1GPw/w_2rrATkPBJG50p8o0xYkvVtS7FRds9H1PThzGLji1q95N6NpG-Y-dyedd_xStC9C1VLewKKlILIXf3H6qJOTA/w4BvOlP1kVoRrGOf5wcLOeXRNToF35zfjju9lMYaXv4'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/k5LWqdpSt_nSlUjL9nVtTQ/B8csauYRLfNXpWPez6Bmb-w7_P_bZs46sw7DgNVVsC7BHMVGUm6Aj-5xaSSgowEEa7I33o7hAqGsgFAn4uc6_Q/AQQtwSWSbMMKYuMbu_gc1XywcvYXr-i0CEFElelWJ08'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QiOiYwK_DLYjyC8djQ6VOw/UFBLbTM8CVCGLdpN0rA-Z6haWBRuRFjYPSbRUBwh6jFCzdDwy_6p97ERA7d0pz_6eyVC4Bfr6k1qjWX5F0pUGg/Sxb2GIQEC98oTE6ISPzj-YnEWAuZLfHGauVD8DDCuhM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-203b-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,1199.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
277,5.0,USA,"The LDA-102N Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +22 dBm, and offers frequency coverage of 10 to 1,000 MHz. It has an attenuation range of 63 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-102N ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-102N,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'att3jTMa94X7WP4EY'), ('width', 408), ('height', 336), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_FCPWsUZHzmirp0akCAwwA/VOKYJFsfWlZ_bgVy9heJ0Mp5U9wGihqLmmOFf-M_P8gmuurI2W1tMEKHvyM08CwktDBv9c1lUI8ccu9OhMvwoDDdhsBi1u0Sp3t1lBwSGBTbLnHaaf9Yvf4VSzcXPkKT/0LGUNV6vVCtDVMpSc3IKH2le7q77uJuZJ7FEn1vB3QY'), ('filename', 'vaunix-digital-attenuator-n.png'), ('size', 122214), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qeNMqmwRzYGPtiHvmYokww/ESUmqRq_cxzwGrmHhcVBAolm1O0aRryZ-WUtVUwFrgICEYr-Iswf6ccWJNnV4EYr6M7nPsSRpDvRw62nos7ZJg/cbpwI6Disi3B3bQF6nyYPKqu9epBap6Ip7SZqD6uW8I'), ('width', 44), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0jNFzvCapJadmfrdNlKEew/8SN8Cb68vJpbPtlccYr6-GGNjPDlglJThuZv9el5fmQzz_ujvzehjFcW44xwfbHk1VYLRT8XhYgbUWGpWZFg_g/tcXhsjagaOUIoZyo2yCz9oeB88kwSCEqL4Deiq8BYjc'), ('width', 408), ('height', 336)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/eKR-hYYeIPjMQhyXK0ZSmg/wLT8fnsPypNLUNz_wviNlR5L6sSC6JbC2RD5JKPPk6Eoxlc1Z33pjd2I2WHpg1rGeRWGYO4tl006ESrGcdaDwg/NagOVK_zgZnn2ZA3ztTc5EaW7k6H4i-JVNRQ5TktEuM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-102n-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,415.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
280,550.0,USA,"The PRM1Z8 is a small, compact, DC servo motorized 360° rotation mount and stage that accepts Ø1"" optics and SM1-threaded components. The user can measure the angular displacement by using the Vernier dial in conjunction with the graduation marks that are marked on the rotating plate in 1° increments. This rotation stage/mount is also equipped with a home limit switch to facilitate automated rotation to the precise 0° position, allowing absolute angular positioning thereafter. The limit switch is designed to allow continuous rotation of the stage over multiple 360° cycles.",PRM 1 Z 8,618.0,"Thorlabs, Inc. is an American privately held optical equipment company headquartered in Newton, New Jersey. The company was founded in 1989 by Alex Cable, who serves as its current president and CEO. As of 2018, Thorlabs has annual sales of approximately $500 million.
",Qcodes Community,Thorlabs,"[OrderedDict([('id', 'attRmyBjaipm6atue'), ('width', 295), ('height', 50), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/B34kPd8TDySPykIqGnAQbw/aiiK819WYExx3Ptf5wMW9occy5nw036iAflUYeUKd3P4oIOtDcjE-9n_aPuC9CIL6NqW9upoWnPw1MNj_dT272K3sQl6HrzLFUheR7vbgDA/McPpt4BKHE-5dfRkgnw9sy91ZT_2J2U6zhqPJLIpSMo'), ('filename', 'Thorlabs_Logo_Red.png'), ('size', 3614), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-IvxdwJZrNBEfbQllhNmjw/R2XVDzJm1eKjim2p3oPbkO0dTIqE8mJXIfagvk20zhFxQhu6OksXnXxFX3T7Js0XghjhysXg1U4hrYSY20fgqw/ePugtvTHT0veIoRZ7driznLOXT78vezhqu8vI9Qr9tw'), ('width', 212), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7MaR2gHuTGamIUDR6lpP_Q/h_TMBraNTFAgmrgYDRJVXnE24Tce3lEenhhkhf4x6E7N8W4ioeCEy-FmPSScWXQSKR9mNqK7eHTYLngjLCjurg/xbql1i-E8yIE38xfkhyh6Ea8xj3EnIOpH7RBtQWLpFs'), ('width', 295), ('height', 50)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aM50-TKhPPqIT7mVMqCDNQ/NqK_Klj2IUd6BRR-rB9c_jzWWg3VIMr5gAf0IasH4eMUL0PkDhO0dpciWLQyN8Z40DMSviJxYrXeZh8qiz8g5Q/IrYPj2E85dh2q1sQ4SOYb_I8-A87BkF7ZS7m31_8sM0'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thorlabs.com/,Write a Python script that uses Qcodes Community to connect to a PRM1Z8 Motion,,['Motion'],,PRM1Z8,https://www.thorlabs.com/_sd.cfm?fileName=19737-D02.pdf&partNumber=PRM1Z8,"[OrderedDict([('id', 'attM9BeZyqKK8IwaA'), ('width', 780), ('height', 780), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/cOX7H_TE398OAnsw0C9pKw/tphJAFP7Cl9Vz7zR0YdPOV4vX4NYNacpCJeEywbhldY9PuZE3xGbXef3SsnG7LInePKL5u9jPwoQB9iOOOH99dNdhIUmb4Bm96gjF5W2RSI/CsV8_nBmneJetIdHONGQDAKlKI7BbEx-W9A4u55Wq_4'), ('filename', '4092_PRM1Z8_SGL.jpg'), ('size', 37807), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tqBFV9iwm6pNjbyHUNvlag/l6snGWLyF8v3g1EZAPP2nWODa9xtH3P3Py-iAy9j4FLpuqsVhxkAnvIuQSWj1CfhmYKX1Y3aaPIj-oXrC0LrDA/NTgN8fhrm_MwaR5f-iSrcFmiEOju944UxWnK2v4eagE'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UGiw2MyYmYAj0dGdnVMhUg/y7E-6-KWOukzZ6BZQZ3HA48GJc1ZxurXmP-92Y0c1VHdVoMIQ3KYChSO-lV6G2oS4UsN_4VHNw98HGfjngtKJA/Ehgk5GONEnBawxvN2gF5zWvuyhZqBfLPcoA49LVrikw'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/YLsqNF8AyGgB9jNd13azcA/KkU-UMlmDkKNp3md_bISdjyFlqCsBSPCxDqrSRA9JjEwn4PRXzfpziiyn1CZoEIQ3mjargRu-tx7_36PzHUjtg/OZlZbuIa87KapCY_peuPHw7B-0g2aibk5cDSx-U-8IE'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thorlabs.com/newgrouppage9.cfm?objectgroup_id=2875&pn=PRM1Z8,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Thorlabs/PRM1Z8.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Thorlabs_PRM1Z8.ipynb,1037.67,,,,"from qcodes import Instrument
from .APT import Thorlabs_APT, ThorlabsHWType


class Thorlabs_PRM1Z8(Instrument):
    """"""
    Instrument driver for the Thorlabs PRMZ1Z8 polarizer wheel.

    Args:
        name: Instrument name.
        device_id: ID for the desired polarizer wheel.
        apt: Thorlabs APT server.

    Attributes:
        apt: Thorlabs APT server.
        serial_number: Serial number of the polarizer wheel.
        model: Model description.
        version: Firmware version.
    """"""

    def __init__(self, name: str, device_id: int, apt: Thorlabs_APT, **kwargs):

        super().__init__(name, **kwargs)

        # save APT server link
        self.apt = apt

        # initialization
        self.serial_number: int = self.apt.get_hw_serial_num_ex(ThorlabsHWType.PRM1Z8, device_id)
        self.apt.init_hw_device(self.serial_number)
        self.model, self.version, _ = self.apt.get_hw_info(self.serial_number)

        # add parameters
        self.add_parameter('position',
                           get_cmd=self._get_position,
                           set_cmd=self._set_position,
                           unit=u""\u00b0"",
                           label='Position')

        # print connect message
        self.connect_message()

    # get methods
    def get_idn(self):
        return {'vendor': 'Thorlabs', 'model': self.model,
                'firmware': self.version, 'serial': self.serial_number}

    def _get_position(self):
        return self.apt.mot_get_position(self.serial_number)

    # set methods
    def _set_position(self, position):
        self.apt.mot_move_absolute_ex(self.serial_number, position, True)
"
282,5.0,USA,"The LDA-802-16 Digital Attenuator is a rack mounted 16-channel high dynamic range, bidirectional, 50 Ohm step attenuator. The LDA-802-16 provides 120 dB of attenuation control range from 200 to 8000 MHz with a step size of 0.1 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and user defined fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-802-16 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-802-16,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attquOEHC31yDwYV2'), ('width', 735), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LTlPtun9x52MH8LIAzzj2A/kMVJAseE7b8AxVLeocWASFEXCMTTz-cm9warzqwUtFqqRDf3bxuxiIw-qNrzN-qjsFyt4eFLSzUwIhs4fYeIgHfwaSu3LtOBR_CemEYGBCc/eBrFv31vPIXpVfqsFyG8JvGoitmrfY2FNUsyb-3OmeE'), ('filename', 'lda-802-16-product.png'), ('size', 134941), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/J13WV_YijrHES7WBuqjPow/zBEj62p7Es0qYhn5-BryB-keus3iv89HBtbRjckudEw5OYkoFuxf6uC2-0ypPJl4CPEv8ZbPyc1sLiujt3emKQ/DpXiItH9N5KBhz0YoAHBT5cKmNyOK59vqBykX57IxTw'), ('width', 53), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/QAqXOfEcNbgDGwU-z7R6Jw/HREC9EzTGAsUiEawyOjyrvbtFf0wap-wCOk7kDzkizbcz9ruivl8wOINCrtZj2Y592rpRxz9Vh3qf9gC24660w/fMWy-v-GWPHEz5oF1VjKVQWW-EpFzfwartrHKor0F7M'), ('width', 735), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Zu0-Boxk8MG-3oyEzr6jpQ/xsBl3JJnjue_fxRW8pGxFUMb2g6r41xPA4mB5EmWBMKVrWEAeXbYIjcgRnHjwWk3RkuWGrD5C9kn6DjtUTopzg/0K5gIyJMaUhYU9PmymtT8NSjOYoiv-CtktznSoO6y1g'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-802-16-high-resolution-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,9500.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
288,5.0,USA,"The LDA-133 Digital Attenuator is a bidirectional, 50 Ohm step attenuator. The LDA-133 provides fast attenuation changes from 10 to 13000 MHz with a step size of 0.5 dB and 63 dB of control range. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-133 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-133,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attEHHnQFKIW24UvA'), ('width', 394), ('height', 272), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zeeF4yiVae89Ik38o7pIBw/eLePw-86moHmyJFqsNZ_XseV1lOa3R2XNyQCo3hZhIyUEtRrI4fd7mC8Of9-vWOxSYwxESgDHNfFZv1BRz11N9Efr6ZoIU7iB8Z6ntbJxKY/UPdKRB6FPjjAntssoquMWgq_V42g2xxK0Xc51Tb0Bis'), ('filename', 'vaunix-lda-133.png'), ('size', 87729), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iX6dmu2EM7zupdfwfKZQhg/5G1nethi_2McMyJrNW73ljVlQx2kma5ncIoBbXrq5LRDGOm5XiE1fAa-XveKbwFpaKZ62wZBp8NPiOO7CR3vRA/Coq1Imb9dYZaPLKt4iT5W39wU5haweXMQYNQ9aMsIPk'), ('width', 52), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/03fVvq2aWZdscU_6Tn2BoA/p4JVXGtU0rPW6bByT6v3-MwHJVFGQb3GWiTM9Az0IVQChmAfWYs9FiGSYMwF11C0nhoL9Jl9DvTQXDpdh_gWtw/QW4hx8X4is5w7_b399-hhUrOgtTHFALWdD-Xc4xg6wo'), ('width', 394), ('height', 272)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/LV412TXXoQ1m6_Bb3mhpwQ/mfxOyy2vQ7LWlEgl5vppg7myY2Wlmrk6elUqDffGHzSwUZ2f-uffDs_qd7drGnIKWdwo984x6FOAUG9P2A_oOA/icgsaMOR6PSU1nA1c9pxnliQWsmmTRaKg2XL52X8dHQ'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-133-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,649.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
289,41.3,"CJ Delft, Netherlands",The F1d module is an IQ demodulator ranging from 40 MHz to 1.4 GHz. It was initially designed for reflectometry and to be used in conjuction with the S5i RF source and the M2j low noise amplifier.,F1D,435.0,"At QuTech, we work on a radically new technology with world-changing potential. Our mission: to develop scalable prototypes of a quantum computer and an inherently safe quantum internet, based on the fundamental laws of quantum mechanics.
",Qcodes Community,Qutech,"[OrderedDict([('id', 'atttaTZUsXgNNgwbC'), ('width', 1504), ('height', 747), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RKC6g3qCsb7JlOEKd8pGhg/gUoncvmvaSr7ZkO-YvuMFw_HfmvhNK_3nj44uVJrOXdCE_YpscwSK6SM2WXwR-0KYP6faNUsTfV4rq_QWleBMqhEaUMhLUC1tgdF2C22mBE/kI3WrO11fnm23PjSBDA0OIsqBO6LHqwXQ3huop_Ag2g'), ('filename', 'QuTech_Main_rgb.jpg'), ('size', 158522), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GAO-iIvbz0A8L-V2yztQGA/FCtruksdQ2Q6srrhGiwgoVVF3AeuSBQ3uNTbyiELwsOWzdExn74Qwu_PF6D6WjqI9gPjl-YCas6da4IXlMC6MQ/k4tJSzhQhfVv0d9gPSWJJ-fksIeYJRmUH68XX5I2PuQ'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KsjRTv1rhseXNm1_RtLk5A/iuV4HMfRxlUUUiLhccAd5H1WREcmLIApSygRmprmfgGs9yMXyYe3q_dZfEAfpSAfwLYQKR7GaVVHuo1UTete-w/7COlOkNModL_5MKY4ECyxVxde5O4qnKbhzkh9izju2A'), ('width', 1031), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vh5BpaV2gyhY3kOSAvq-ag/N8KfAOufo8Ghs6K4W1HIaasEWiYmkDoaiwwLHuSHP5UT7JTfSyhvbUSbBphdoBLA1BiBSDdKw5usJSo-WYhpjw/KtlR-7u5DaYUBKhRsOmxynfnGDx_p7Ip2JM7JCeQHec'), ('width', 3000), ('height', 3000)]))]))])]",https://qutech.nl/,Write a Python script that uses Qcodes Community to connect to a F1d	 RF Signal Generator,"https://www.analog.com/en/technical-articles/low-power-iq-modulator-for-digital-communications.html#:~:text=What's%20an%20IQ%20Modulator%3F,and%20phase%20can%20be%20selected.",['RF Signal Generator'],"An IQ modulator is a device that converts baseband information into RF signals. Internally, two double-balanced mixers are combined as shown below. By modulating with both in-phase (I) and quadrature (Q) inputs, any arbitrary output amplitude and phase can be selected.  ",F1d	,could not find,"[OrderedDict([('id', 'attfLjCw8p5KPkUum'), ('width', 250), ('height', 996), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/HzLgfYANLAx3vS9g22XyBQ/eZxdDJRSCUAMK6fC5vGC7AI9610ChLGIusQJcMkgrU7zOj_0A7_URxY26E-wVsuVq6iB0gtLtKBjfySNJfNJM_MoMCPIGCSFkBBw6BHYIBs/v7JusElh_y_YwC4aD0HIDnQcxgnAdfZgivZtFUOm5ro'), ('filename', 'FrontF1d.png'), ('size', 334389), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UipyZ6oqQO5MBJir-uNrtw/4pFtas85l429sN27elzqsyynDnL4r8anRPnj0o7X8VboUjAmxnoVpiZ9LrecxTOcKkLU7Pgu1oy4vaD5xh4Ekg/w7sPPmHSHaSY3Y5VXTaKM4FzQayyO8SVNoAlQfUBkGQ'), ('width', 9), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zRpkDR7qAf6OHireFryO6A/AVI_obuIwMzDMmy__UrVF6TzF5QI3sK_iS9MEX3UA8Eym2PAFoTJFVzO4bHerfdOcGvYulX5RGSa8p05DXpWQQ/fgKSie8M96SS61DWrPxJtlyF6uR9C_L0Ep_4m0QGFOQ'), ('width', 250), ('height', 996)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/6t7AiMJ7-lePktjj-xeizA/kPi1eHQsqasQJLNKE_GEEEg_SvNDsEy7cSIHmt4-8_pLAheccBA9lOnfk6uTob9dn5t2I2RAqv64xpLnfqUp9A/CntHAbBmZSwm9WNPVHNgS1Ced6hcdUohVHaSz68WFcM'), ('width', 3000), ('height', 3000)]))]))])]",https://qtwork.tudelft.nl/~mtiggelman/modules/rf/f1d.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QuTech/F1d.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QuTech.html#module-qcodes_contrib_drivers.drivers.QuTech.F1d,,,,,"from qcodes.instrument.base import Instrument
from qcodes.utils.validators import Enum

try:
    from spirack import F1d_module
except ImportError:
    raise ImportError(('The F1d_module class could not be found. '
                       'Try installing it using pip install spirack'))


class F1d(Instrument):
    """"""
    Qcodes driver for the F1d IQ-Mixer SPI-rack module.

    Args:
        name (str): name of the instrument.

        spi_rack (SPI_rack): instance of the SPI_rack class as defined in
            the spirack package. This class manages communication with the
            individual modules.

        module (int): module number as set on the hardware.

    The `enable_remote` parameter sets the F1d module in remote mode. When settings are changed on the
    hardware front panel, then the remote mode is deactivated

    """"""

    def __init__(self, name, spi_rack, module, **kwargs):
        super().__init__(name, **kwargs)

        self.f1d = F1d_module(spi_rack, module)

        self.add_parameter('remote_settings',
                           label='Remote settings',
                           get_cmd=self.get_remote_settings)

        self.add_parameter('IQ_filter',
                           label='IQ filter',
                           set_cmd=self.f1d.set_IQ_filter,
                           unit='MHz',
                           vals=Enum(1, 3, 10),
                           docstring='Low-pass filter after demodulation')

        self.add_parameter('I_gain',
                           label='I gain',
                           set_cmd=self.f1d.set_I_gain,
                           vals=Enum('low', 'mid', 'high'),
                           docstring='Gain of amplifier of demodulatd signal')

        self.add_parameter('Q_gain',
                           label='Q gain',
                           set_cmd=self.f1d.set_Q_gain,
                           vals=Enum('low', 'mid', 'high'),
                           docstring='Gain of amplifier of demodulatd signal')

        self.add_parameter('RF_level',
                           label='RF level',
                           get_cmd=self.f1d.get_RF_level,
                           unit='dBm')

        self.add_parameter('LO_level',
                           label='LO level',
                           get_cmd=self.f1d.get_LO_level,
                           unit='dBm')

        self.add_parameter('enable_remote',
                           label='Enable remote',
                           set_cmd=self.f1d.enable_remote, docstring='getting the remote status is not possible')
        self.add_function('clear_rf_clip',
                          call_cmd=self.f1d.clear_rf_clip)
        self.add_function('is_rf_clipped',
                          call_cmd=self.f1d.rf_clipped)

    def get_remote_settings(self):
        return self.f1d.remote_settings
"
291,,,"The model 22C is a two-input, four-control loop cryogenic
temperature controller capable of operation to <200mK.",Cryocon 22C ,114.0,"Cryogenic is Closed ..
 

",Qcodes Community,Cryocon,,,Write a Python script that uses Qcodes Community to connect to a Temperature  Temperature Controllers,"https://qd-europe.com/nl/en/products/cryogenics/cryogenic-temperature-control/#:~:text=Cryogenic%20temperature%20control%20equipment%20is,one%20Kelvin%20or%20even%20below.",['Temperature Controllers'],"Temperature control is a process in which change of temperature of a space (and objects collectively there within), or of a substance, is measured or otherwise detected, and the passage of heat energy into or out of the space or substance is adjusted to achieve a desired temperature",Temperature ,https://www.cryocon.com/ProductArchives/M22C_archive/M22Carchive.zip,,https://www.cryocon.com/ProductArchives/M22C_archive/M22Carchive.zip,https://github.com/bicarlsen/cryocon-22c-controller/blob/main/setup.py,,,,True,,"import setuptools

# get __version__
exec( open( 'cryocon_22c_controller/_version.py' ).read() )

with open(""README.md"", ""r"") as fh:
    long_description = fh.read()

project_urls = {
    'Source Code': 'https://github.com/bicarlsen/cryocon-22c-controller',
    'Bug Tracker': 'https://github.com/bicarlsen/cryocon-22c-controller/issues'
}

setuptools.setup(
    name=""cryocon-22c-controller"",
    version=__version__,
    author=""Brian Carlsen"",
    author_email=""carlsen.bri@gmail.com"",
    description=""A package for controlling CryoCon 22C Temperature Controllers"",
    long_description=long_description,
    long_description_content_type=""text/markdown"",
    keywords=['cryocon', 'cryocon 22c', 'temperature controller', 'cryostat', 'cryo'],
    url=""https://github.com/bicarlsen/cryocon-22c-controller"",
    project_urls = project_urls,
    packages=setuptools.find_packages(),
    classifiers=[
        ""Programming Language :: Python :: 3"",
        ""License :: OSI Approved :: GNU General Public License v3 (GPLv3)"",
        ""Operating System :: OS Independent"",
        ""Development Status :: 3 - Alpha""
    ],
    install_requires=[
        'easy-scpi',
        'pyvisa-py'
    ]
)"
294,2500.0,"Munich, Germany",,SMW 200 Asim,476.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} ,,,,,,,,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/SMW200Asim.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim,,,,,"# -*- coding: utf-8 -*-
""""""Simulation for the QCoDeS-Driver SMW200A.

This simulation is used to generate meanfull answers
to the comunication from the driver if the hardware
is not available.

Authors:
    Michael Wagener, ZEA-2, m.wagener@fz-juelich.de
""""""
import pyvisa
from qcodes.instrument.visa import VisaInstrument
from qcodes.utils.validators import Numbers


class MockVisa(VisaInstrument):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.add_parameter('state',
                           get_cmd='STAT?', get_parser=float,
                           set_cmd='STAT:{:.3f}',
                           vals=Numbers(-20, 20))

    def set_address(self, address):
        self.visa_handle = MockVisaHandle()


class MockVisaHandle:
    '''
    Simulate the API needed for a visa handle.
    '''
    
    # List of possible commands asked the instrument to give a realistic answer.
    cmddef = {'*IDN?': 'Rohde&Schwarz,SMW200A,1412.0000K02/105578,04.30.005.29 SP2',
              '*OPT?': 'SMW-B13T,SMW-B22,SMW-B120,SMW-K22,SMW-K23',
              
              'STAT?': '0',
              
              'SOUR1:FREQ?': '20000000000.0',
              'SOUR1:POW:POW?': '-145.0',
              'OUTP1:STAT?': '0',
              'SOUR1:FREQ:MODE?': 'CW',
              'SOUR1:FREQ:CENT?': '300000000.0',
              'SOUR1:FREQ:SPAN?': '400000000.0',
              'SOUR1:FREQ:STAR?': '100000000.0',
              'SOUR1:FREQ:STOP?': '500000000.0',
              'SOUR1:FREQ:LOSC:INP:FREQ?': '0',
              'SOUR1:FREQ:LOSC:MODE?': 'INT',
              'SOUR1:FREQ:LOSC:OUTP:FREQ?': '0',
              'SOUR1:FREQ:LOSC:OUTP:STAT?': '0',
              
              'SOUR1:SWE:POW:AMOD?': 'AUTO',
              'SOUR1:SWE:POW:DWEL?': '0.01',
              'SOUR1:SWE:POW:MODE?': 'AUTO',
              'SOUR1:SWE:POW:POIN?': '21',
              'SOUR1:SWE:POW:STEP?': '1.0',
              'SOUR1:SWE:POW:SHAP?': 'SAWT',
              'SOUR1:SWE:POW:RETR?': '0',
              'SOUR1:SWE:POW:RUNN?': '0',
              'SOUR1:SWE:DWEL?': '0.01',
              'SOUR1:SWE:MODE?': 'AUTO',
              'SOUR1:SWE:POIN?': '401',
              'SOUR1:SWE:SPAC?': 'LIN',
              'SOUR1:SWE:SHAP?': 'SAWT',
              'SOUR1:SWE:RETR?': '0',
              'SOUR1:SWE:RUNN?': '0',
              'SOUR1:SWE:STEP:LOG?': '1.0',
              'SOUR1:SWE:STEP?': '1000000.0',
              
              'SOUR:LFO1:BAND?': 'BW10',
              'SOUR:LFO1:STAT?': '0',
              'SOUR:LFO1:OFFS?': '0',
              'SOUR:LFO1:SOUR?': 'LF1',
              'SOUR:LFO1:VOLT?': '1.0',
              'SOUR:LFO1:PER?': '0.001',
              
              'SOUR1:LFO1:FREQ?': '1000.0',
              'SOUR1:LFO:FREQ:MAN?': '1000.0',
              'SOUR1:LFO:FREQ:STAR?': '1000.0',
              'SOUR1:LFO:FREQ:STOP?': '50000.0',
              'SOUR1:LFO:FREQ:MODE?': 'CW',
              
              'SOUR:LFO2:BAND?': 'BW10',
              'SOUR:LFO2:STAT?': '0',
              'SOUR:LFO2:OFFS?': '0',
              'SOUR:LFO2:SOUR?': 'EXT1',
              'SOUR:LFO2:VOLT?': '1.0',
              
              'SOUR1:LFO:SWE:DWEL?': '0.01',
              'SOUR1:LFO:SWE:MODE?': 'AUTO',
              'SOUR1:LFO:SWE:POIN?': '50',
              'SOUR1:LFO:SWE:SHAP?': 'SAWT',
              'SOUR1:LFO:SWE:RETR?': '0',
              'SOUR1:LFO:SWE:RUNN?': '0',
              'SOUR1:LFO:SWE:SPAC?': 'LIN',
              'SOUR1:LFO:SWE:STEP:LOG?': '1.0',
              'SOUR1:LFO:SWE:STEP?': '1000.0',
              
              'SOUR1:AM1:STAT?': '0',
              'SOUR1:AM1:SOUR?': 'LF1',
              'SOUR1:AM1:DEPT?': '50.0',
              'SOUR1:AM:RAT?': '50.0', # Ratio Path2 to Path1
              'SOUR1:AM:SENS?': '50.0', # Sensitivity for EXT
              
              'SOUR1:AM2:STAT?': '0',
              'SOUR1:AM2:SOUR?': 'LF1',
              'SOUR1:AM2:DEPT?': '50.0',        
              
              'SOUR1:FM1:STAT?': '0',
              'SOUR1:FM1:DEV?': '1000.0',
              'SOUR1:FM1:SOUR?': 'LF1',
              'SOUR1:FM:RAT?': '100.0',
              'SOUR1:FM:MODE?': 'NORM',
              'SOUR1:FM:SENS?': '1000.0',
              
              'SOUR1:FM2:STAT?': '0',
              'SOUR1:FM2:DEV?': '1000.0',
              'SOUR1:FM2:SOUR?': 'EXT1',
              
              'SOUR1:PM1:STAT?': '0',
              'SOUR:PM1:DEV?': '1',
              'SOUR1:PM1:SOUR?': 'LF1',
              'SOUR1:PM:MODE?': 'HBAN',
              'SOUR1:PM:RAT?': '100',
              'SOUR1:PM:SENS?': '1',
              
              'SOUR1:PM2:STAT?': '0',
              'SOUR:PM2:DEV?': '1',
              'SOUR1:PM2:SOUR?': 'EXT1',
              'SOUR1:PM:MODE?': 'HBAN',
              
              'SOUR1:PULM:MODE?': '0',
              'SOUR1:PULM:DOUB:DEL?': '0',
              'SOUR1:PULM:DOUB:WID?': '0',
              'SOUR1:PULM:TRIG:MODE?': '0',
              'SOUR1:PULM:PER?': '2.0',
              'SOUR1:PULM:WIDT?': '0',
              'SOUR1:PULM:DEL?': '0',
              'SOUR1:PULM:STAT?': '0',
              'SOUR1:PULM:SOUR?': 'EXT',
              'SOUR1:PULM:TTYP?': 'FAST',
              'SOUR1:PULM:OUTP:VID:POL?': 'NORM',
              'SOUR1:PULM:POL?': 'NORM',
              'SOUR1:PULM:IMP?': 'G1K',
              'SOUR1:PULM:TRIG:EXT:IMP?': 'G50',
              
              'SOUR1:PGEN:OUTP:POL?': 'NORM',
              'SOUR1:PGEN:OUTP:STAT': 'OFF',
              'SOUR1:PGEN:STAT': 'OFF',
              
              'SOUR1:IQ:SOUR?': 'BAS',
              'SOUR1:IQ:STAT?': '0',
              'SOUR1:IQ:GAIN?': 'DB4',
              'SOUR1:IQ:CRES?': '0.0',
              'SOUR1:IQ:SWAP:STAT?': '0',
              'SOUR1:IQ:WBST?': '0',
              
              'SOUR1:IQ:OUTP:ANAL:STAT?': '0',
              'SOUR1:IQ:OUTP:ANAL:TYPE?': 'SING',
              'SOUR1:IQ:OUTP:ANAL:MODE?': 'FIX',
              'SOUR1:IQ:OUTP:LEV?': '1.0',
              'SOUR1:IQ:OUTP:ANAL:BIAS:COUP:STAT?': '0',
              'SOUR1:IQ:OUTP:ANAL:BIAS:I?': '0',
              'SOUR1:IQ:OUTP:ANAL:BIAS:Q?': '0',
              'SOUR1:IQ:OUTP:ANAL:OFFS:I?': '0',
              'SOUR1:IQ:OUTP:ANAL:OFFS:Q?': '0',

              'SOUR2:IQ:OUTP:ANAL:STAT?': '0',
              'SOUR2:IQ:OUTP:ANAL:TYPE?': 'SING',
              'SOUR2:IQ:OUTP:ANAL:MODE?': 'FIX',
              'SOUR2:IQ:OUTP:LEV?': '1.0',
              'SOUR2:IQ:OUTP:ANAL:BIAS:COUP:STAT?': '0',
              'SOUR2:IQ:OUTP:ANAL:BIAS:I?': '0',
              'SOUR2:IQ:OUTP:ANAL:BIAS:Q?': '0',
              'SOUR2:IQ:OUTP:ANAL:OFFS:I?': '0',
              'SOUR2:IQ:OUTP:ANAL:OFFS:Q?': '0'
              }
    
    def __init__(self):
        self.state = 0
        self.closed = False

    def clear(self):
        self.state = 0

    def close(self):
        # make it an error to ask or write after close
        self.closed = True

    def write(self, cmd):
        if self.closed:
            raise RuntimeError(""Trying to write to a closed instrument"")
        try:
            num = float(cmd.split(':')[-1])
        except:
            num = 1
        self.state = num

        if num < 0:
            raise ValueError('be more positive!')

        if num == 0:
            ret_code = pyvisa.constants.VI_ERROR_TMO
        else:
            ret_code = 0

        return len(cmd), ret_code

    def ask(self, cmd):
        if self.closed:
            raise RuntimeError(""Trying to ask a closed instrument"")
        if self.state > 10:
            raise ValueError(""I'm out of fingers"")
        return self.state

    def query(self, cmd):
        if cmd in self.cmddef:
            return self.cmddef[cmd]
        if self.state > 10:
            raise ValueError(""I'm out of fingers"")
        return self.state
"
296,5800.0,USA,"Unmatched performance, versatility, intuitive operation, and affordability make the AFG3000 Series of Function, Arbitrary Waveform, and Pulse Generators the most useful instruments in the industry.

Users can choose from 12 different standard waveforms. Arbitrary waveforms can be generated up to 128 K in length at high sampling rates. On pulse waveforms, leading and trailing edge time can be set independently. External signals can be connected and added to the output signal. Dual-channel models can generate two identical or completely different signals. All instruments feature a highly stable time base with only ±1 ppm drift per year.

A large screen shows all relevant waveform parameters and graphical wave shape at a single glance. This gives full confidence in the signal settings and lets you focus on the task at hand. Shortcut keys provide direct access to frequently used functions and parameters. Others can be selected conveniently through clearly structured menus. This reduces the time needed for learning and relearning how to use the instrument. Look and feel are identical to the world's most popular TDS3000 Oscilloscopes.",AFG 3000,581.0,"Tektronix, Inc., historically widely known as Tek, is an American company best known for manufacturing test and measurement devices such as [oscilloscopes](https://en.wikipedia.org/wiki/Oscilloscope), [logic analyzers](https://en.wikipedia.org/wiki/Logic_analyzer), and video and mobile test protocol equipment.
",Qcodes Community,Tektronix,"[OrderedDict([('id', 'attzfMoJltngjLsme'), ('width', 2700), ('height', 487), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Yk4fEYS3Xg6iwQd4rYZnTw/7Zkla4HnvscO18VYF5kzAoEARNa8vsmJ4FgDw0s3WFz3XC3uiSo4Y-tNO4a7Lx3Q8T-u01JdeaNcHAgj_-uthw/GGWzcoJGXu4lukgV27iMaGFDO1ZgnMIO_CUGN7O7rJk'), ('filename', 'tek.jfif'), ('size', 88833), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/h2qL_vjOhZaWUJioVUwfTg/yPEjUaHraXCNuyRFhfVmkUF7uYlChxENVTNI3BPd6LecpsmxmwYkair9LwGP4Bt9AoPnMWLJ1cyq6DHBFozQJg/epibu-T1Te-uMYfpIVGa6Ffj9OhMYrhgGsY6iukjioM'), ('width', 200), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aaQhd1e3804Uwh6S8RvZRQ/l0HPovgnMh9YIQIbwIQf5yfJP5hH70TcJEbi-H_573m_d2tBL45xhI35idMX3ynREnZmtNCV4A8duWfqRIKJaQ/t74DbaTyCi0Q-gIyx_DIKFemz6pS8VLtp2fX2zYbo4U'), ('width', 2700), ('height', 487)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/1qbO_LRtT23qEeaQkpiUyQ/FlzQjfMYno5DLhp3eGZzg5pVuL81DX3ypxZ-DrxvpoWwsEoYXWjjBAsvhRY23xXCOnuoQZSsdXjoDtmW5DnuCg/zpmOx-ced12Bk2CsL2EUFpbLLlIotLiDK-7N2KfqbMA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en,Write a Python script that uses Qcodes Community to connect to a AFG3000 Function Generators,https://en.wikipedia.org/wiki/Function_generator,['Function Generators'],"a function generator is usually a piece of electronic test equipment or software used to generate different types of electrical waveforms over a wide range of frequencies. Some of the most common waveforms produced by the function generator are the sine wave, square wave, triangular wave and sawtooth shapes. These waveforms can be either repetitive or single-shot (which requires an internal or external trigger source).[1] Another feature included on many function generators is the ability to add a DC offset. Integrated circuits used to generate waveforms may also be described as function generator ICs.",AFG3000,https://download.tek.com/datasheet/AFG3000_Series_Arbitrary-Function_Generators_Datasheet_76W-18656-5.pdf,"[OrderedDict([('id', 'attBOBaWZ7JnXO5HZ'), ('width', 600), ('height', 436), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/c2GGCC-OZO4b5IoN-1NyJA/VpyhOMJ5Br-W9K4civrOziF6LQlUl9dExENH48ha5zsYym4xiCkp9LPZt77j0qpXkJePxUZ5TYHc0t3zCCwuJlc4CvFkxiQbzcJh3lDIEmA/nedre9-N6VmR1sgm5B2sSmXEy3MTQIqplLoZeQTGoXY'), ('filename', '129031630.webp'), ('size', 21366), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/AR1304rkj-sXuUOlXNDL6g/vqXr7ECJlYri9GDKJwBbHb38Ww2DfEfOL6DoprvOnPO4emUB8LPdnI1fwAxaSUirgeQnlDwD7bkkUn-dJMsLCDfAcVKoPfOeFSzxFCqdfkc/weMVdjKzgBOVrtORiWpBUGQ8mBaJ3sQyJ03I-uJ4Z2g'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/kcH-3-lx1d3IOMcAP_jl0Q/drML8Ia_Yf2G0Dx0XFZ5hgFmOc_jK6vD0p4WNyO2JnVjbxUQTxck76D_mzU3fZa3XzztqVT70NIE74nPWzBTValQsMFuqCWRT-TmaUHbMtk/tjJf_yzw95Rw0thigqAN1Ybg5ie0qfCSEKjOjdXqndE'), ('width', 600), ('height', 436)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/HuUjnJt3b9KnoLQh4kyFCg/ZLQ4pD3dDx1xF49sy-CRpRpcCEAWjJyBxILmUG9q-oSNhvoO5C0fOctlEbcg0mtiCTcYLo3ILqWdRwrzeJ_jjMUs-ByTf7spMYypAhCoXqQ/Dd7OkBjvIfXnZV7Ez4hTtTjUZa4OPb9CgKi4xo2iVkM'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en/datasheet/afg3000-series,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Tektronix/AFG3000.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Tektronix_AFG3000_series.ipynb,,,True,,"from typing import Any, Tuple, Sequence, cast

import numpy as np
from qcodes import VisaInstrument
import qcodes.utils.validators as vals
from qcodes.utils.helpers import create_on_off_val_mapping



MIN_WAVEFORM_LENGTH = 2
MAX_WAVEFORM_LENGTH = 131072


class AFG3000(VisaInstrument):
    """"""Qcodes driver for Tektronix AFG3000 series arbitrary function generator.

    Not all instrument functionality is included here.
    """"""

    def __init__(self, name: str, address: str, **kwargs: Any):
        super().__init__(name, address, terminator='\n', timeout=20, **kwargs)

        self.add_parameter(
            name='trigger_mode',
            label='Trigger mode',
            get_cmd='OUTPut:TRIGger:MODE?',
            get_parser=str,
            set_cmd='OUTPut:TRIGger:MODE {}',
            vals=vals.Enum('TRIGger', 'TRIG', 'SYNC')
        )

        on_off_map = create_on_off_val_mapping(on_val=1, off_val=0)

        # Source/output parameters, 2 channels
        for src in [1, 2]:

            # Outputs
            self.add_parameter(
                name=f'impedance_output{src}',
                label=f'Output {src} impedance',
                unit='Ohm',
                get_cmd=f'OUTPut{src}:IMPedance?',
                get_parser=float,
                set_cmd=f'OUTPut{src}:IMPedance {{}}OHM',
                vals=vals.Numbers(1,10000)
            )
            self.add_parameter(
                name=f'polarity_output{src}',
                label=f'Output {src} polarity',
                get_cmd=f'OUTPut{src}:POLarity?',
                get_parser=str,
                set_cmd=f'OUTPut{src}:POLarity {{}}',
                vals=vals.Enum('NORMal', 'NORM', 'INVerted', 'INV')
            )
            self.add_parameter(
                name=f'state_output{src}',
                label=f'Output {src} state',
                get_cmd=f'OUTPut{src}:STATe?',
                set_cmd=f'OUTPut{src}:STATe {{}}',
                val_mapping=on_off_map
            )

            # Amplitude modulation
            self.add_parameter(
                name=f'am_depth{src}',
                label=f'Source {src} AM depth',
                unit='%',
                get_cmd=f'SOURce{src}:AM:DEPTh?',
                get_parser=float,
                set_cmd=f'SOURce{src}:AM:DEPTh {{}}PCT',
                vals=vals.MultiType(vals.Numbers(min_value=0, max_value=120),
                                    vals.PermissiveMultiples(divisor=0.1),
                                    combiner='AND')
            )

            # Frequency modulation
            self.add_parameter(
                name=f'fm_deviation{src}',
                label=f'Source {src} FM deviation',
                unit='Hz',
                get_cmd=f'SOURce{src}:FM:DEViation?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FM:DEViation {{}}Hz',
                vals=vals.Numbers()
            )

            # Phase modulation
            self.add_parameter(
                name=f'pm_deviation{src}',
                label=f'Source {src} PM deviation',
                unit='degrees',
                get_cmd=f'SOURce{src}:PM:DEViation?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PM:DEViation {{}}DEG',
                vals=vals.Ints(0, 180)
            )

            # Pulse-width modulation
            self.add_parameter(
                name=f'pwm_duty_deviation{src}',
                label=f'Source {src} PWM duty cycle deviation',
                unit='%',
                get_cmd=f'SOURce{src}:PWM:DEViation:DCYCle?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PWM:DEViation:DCYCle {{}}PCT',
                vals=vals.Numbers(0, 100)
            )

            # Amplitude, frequency, phase, and pulse-width modulation
            for mod_type in ['AM', 'FM', 'PM', 'PWM']:
                self.add_parameter(
                    name=f'{mod_type.lower()}_internal_freq{src}',
                    label=f'Source {src} {mod_type} interal frequency',
                    unit='Hz',
                    get_cmd=f'SOURce{src}:{mod_type}:INTernal:FREQuency?',
                    get_parser=float,
                    set_cmd=f'SOURce{src}:{mod_type}:INTernal:FREQuency {{}}Hz',
                    vals=vals.MultiType(vals.Numbers(min_value=2e-3, max_value=5e4),
                                        vals.PermissiveMultiples(divisor=1e-3),
                                        combiner='AND')
                )
                self.add_parameter(
                    name=f'{mod_type.lower()}_internal_function{src}',
                    label=f'Source {src} {mod_type} interal function',
                    get_cmd=f'SOURce{src}:{mod_type}:INTernal:FUNCtion?',
                    get_parser=str,
                    set_cmd=f'SOURce{src}:{mod_type}:INTernal:FUNCtion {{}}',
                    vals=vals.Enum(
                    'SINusoid', 'SIN',
                    'SQUare',  'SQU',
                    'TRIangle', 'TRI',
                    'RAMP',
                    'NRAMp', 'NRAM',
                    'PRNoise', 'PRN',
                    'USER', 'USER1', 'USER2', 'USER3', 'USER4',
                    'EMEMory', 'EMEM',
                    'EFILe', 'EFIL')
                )
                self.add_parameter(
                    name=f'{mod_type.lower()}_internal_efile{src}',
                    label=f'Source {src} {mod_type} interal EFile',
                    get_cmd=f'SOURce{src}:{mod_type}:INTernal:FUNCtion:EFILe?',
                    get_parser=str,
                    set_cmd=f'SOURce{src}:{mod_type}:INTernal:FUNCtion:EFILe {{}}',
                    vals=vals.Strings()
                )
                self.add_parameter(
                    name=f'{mod_type.lower()}_internal_source{src}',
                    label=f'Source {src} {mod_type} source',
                    get_cmd=f'SOURce{src}:{mod_type}:SOURce?',
                    get_parser=str,
                    set_cmd=f'SOURce{src}:{mod_type}:SOURce? {{}}',
                    vals=vals.Enum('INTernal', 'INT', 'EXTernal', 'EXT')
                )
                self.add_parameter(
                    name=f'{mod_type.lower()}_state{src}',
                    label=f'Source {src} {mod_type} interal state',
                    get_cmd=f'SOURce{src}:{mod_type}:STATe?',
                    set_cmd=f'SOURce{src}:{mod_type}:STATe {{}}',
                    val_mapping=on_off_map
                )

            # Burst mode
            self.add_parameter(
                name=f'burst_mode{src}',
                label=f'Source {src} burst mode',
                get_cmd=f'SOURce{src}:BURSt:MODE?',
                get_parser=str,
                set_cmd=f'SOURce{src}:BURSt:MODE {{}}',
                vals=vals.Enum('TRIGgered', 'TRIG', 'GATed', 'GAT')
            )
            self.add_parameter(
                name=f'burst_ncycles{src}',
                label=f'Source {src} burst N cycles',
                get_cmd=f'SOURce{src}:BURSt:NCYCles?',
                get_parser=float,
                set_cmd=f'SOURce{src}:BURSt:NCYCles {{}}',
                vals=vals.MultiType(
                    vals.Ints(min_value=1, max_value=1000000),
                    vals.Enum('INFinity', 'INF', 'MAXimum', 'MAX', 'MINimum', 'MIN'))
            )
            self.add_parameter(
                name=f'burst_state{src}',
                label=f'Source {src} burst state',
                get_cmd=f'SOURce{src}:BURSt:STATe?',
                set_cmd=f'SOURce{src}:BURSt:STATe {{}}',
                val_mapping=on_off_map
            )
            self.add_parameter(
                name=f'burst_tdelay{src}',
                label=f'Source {src} burst time delay',
                unit='s',
                get_cmd=f'SOURce{src}:BURSt:TDELay?',
                get_parser=float,
                set_cmd=f'SOURce{src}:BURSt:TDELay {{}}s',
                vals=vals.Numbers(0, 85)
            )

            if src == 1:
                combine_enum: Tuple[str, ...] = (
                    ""NOISe"",
                    ""NOIS"",
                    ""EXTernal"",
                    ""EXT"",
                    ""BOTH"",
                    """",
                )
            else:
                combine_enum = ('NOISe', 'NOIS', '')
            self.add_parameter(
                name=f'combine{src}',
                label=f'Source {src} combine signals',
                get_cmd=f'SOURce{src}:COMBine:FEED?',
                get_parser=str,
                set_cmd=f'SOURce{src}:COMBine:FEED {{}}',
                vals=vals.Enum(combine_enum)
            )

            # Frequency controls
            self.add_parameter(
                name=f'center_freq{src}',
                label=f'Source {src} center frequency',
                unit='Hz',
                get_cmd=f'SOURce{src}:FREQuency:CENTer?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FREQuency:CENTer {{}}Hz',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'freq_concurrent{src}',
                label=f'Source {src} concurrent frequency',
                get_cmd=f'SOURce{src}:FREQuency:CONCurrent?',
                set_cmd=f'SOURce{src}:FREQuency:CONCurrent {{}}',
                val_mapping=on_off_map
            )
            self.add_parameter(
                name=f'freq_cw{src}',
                label=f'Source {src} continuous frequency',
                unit='Hz',
                get_cmd=f'SOURce{src}:FREQuency:CW?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FREQuency:CW {{}}Hz',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'freq_mode{src}',
                label=f'Source {src} frequency mode',
                get_cmd=f'SOURce{src}:FREQuency:MODE?',
                get_parser=str,
                set_cmd=f'SOURce{src}:FREQuency:MODE {{}}',
                vals=vals.Enum('CW', 'FIXed', 'FIX', 'SWEep', 'SWE')
            )
            self.add_parameter(
                name=f'freq_span{src}',
                label=f'Source {src} frequency span',
                unit='Hz',
                get_cmd=f'SOURce{src}:FREQuency:SPAN?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FREQuency:SPAN {{}}Hz',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'freq_start{src}',
                label=f'Source {src} frequency start',
                unit='Hz',
                get_cmd=f'SOURce{src}:FREQuency:STARt?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FREQuency:STARt {{}}Hz',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'freq_stop{src}',
                label=f'Source {src} frequency stop',
                unit='Hz',
                get_cmd=f'SOURce{src}:FREQuency:STOP?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FREQuency:STOP {{}}Hz',
                vals=vals.Numbers()
            )

            # FSK modulation
            self.add_parameter(
                name=f'fsk_freq{src}',
                label=f'Source {src} FSK frequency',
                unit='Hz',
                get_cmd=f'SOURce{src}:FSKey:FREQuency?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FSKey:FREQuency {{}}Hz',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'fsk_internal_rate{src}',
                label=f'Source {src} FSK internal rate',
                unit='Hz',
                get_cmd=f'SOURce{src}:FSKey:INTernal:RATE?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FSKey:INTernal:RATE {{}}Hz',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'fsk_source{src}',
                label=f'Source {src} FSK source',
                get_cmd=f'SOURce{src}:FSKey:SOURce?',
                get_parser=str,
                set_cmd=f'SOURce{src}:FSKey:SOURce {{}}',
                vals=vals.Enum('INTernal', 'INT', 'EXTernal', 'EXT')
            )
            self.add_parameter(
                name=f'fsk_state{src}',
                label=f'Source {src} FSK state',
                get_cmd=f'SOURce{src}:FSKey:STATe?',
                set_cmd=f'SOURce{src}:FSKey:STATe {{}}',
                val_mapping=on_off_map
            )

            # Function parameters
            self.add_parameter(
                name=f'function_efile{src}',
                label=f'Source {src} function efile',
                get_cmd=f'SOURce{src}:FUNCtion:EFILe?',
                get_parser=str,
                set_cmd=f'SOURce{src}:FUNCtion:EFILe {{}}',
                vals=vals.Strings()
            )
            self.add_parameter(
                name=f'function_ramp_symmetry{src}',
                label=f'Source {src} function ramp symmetry',
                unit='%',
                get_cmd=f'SOURce{src}:FUNCtion:RAMP:SYMMetry?',
                get_parser=float,
                set_cmd=f'SOURce{src}:FUNCtion:RAMP:SYMMetry {{}}PCT',
                vals=vals.Numbers(0, 100)
            )
            self.add_parameter(
                name=f'function_shape{src}',
                label=f'Source {src} function shape',
                get_cmd=f'SOURce{src}:FUNCtion:SHAPe?',
                get_parser=str,
                set_cmd=f'SOURce{src}:FUNCtion:SHAPe {{}}',
                vals=vals.Enum(
                'SINusoid', 'SIN',
                'SQUare',  'SQU',
                'TRIangle', 'TRI',
                'RAMP',
                'NRAMp', 'NRAM',
                'PRNoise', 'PRN',
                'USER', 'USER1', 'USER2', 'USER3', 'USER4',
                'EMEMory', 'EMEM',
                'EFILe', 'EFIL',
                'USER', 'USER1',
                'USER2', 'USER3', 'USER4',
                'EMEMory', 'EMEM',
                'EFILe', 'EFIL')
            )

            # Phase parameters
            self.add_parameter(
                name=f'phase{src}',
                label=f'Source {src} phase',
                unit='degrees',
                get_cmd=f'SOURce{src}:PHASe:ADJust?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PHASe:ADJust {{}}DEG',
                vals=vals.Numbers(-180, 180)
            )

            # Pulse parameters
            self.add_parameter(
                name=f'pulse_duty_cycle{src}',
                label=f'Source {src} pulse duty cycle',
                unit='%',
                get_cmd=f'SOURce{src}:PULSe:DCYCle?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PULSe:DCYCle {{}}PCT',
                vals=vals.Numbers(1e-3, 99.999)
            )
            self.add_parameter(
                name=f'pulse_delay{src}',
                label=f'Source {src} pulse delay',
                unit='s',
                get_cmd=f'SOURce{src}:PULSe:DELay?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PULSe:DELay {{}}s',
                vals=vals.Numbers(min_value=0)
            )
            self.add_parameter(
                name=f'pulse_hold{src}',
                label=f'Source {src} pulse hold',
                get_cmd=f'SOURce{src}:PULSe:HOLD?',
                get_parser=str,
                set_cmd=f'SOURce{src}:PULSe:HOLD {{}}',
                vals=vals.Enum('WIDTh', 'WIDT', 'DUTY')
            )
            self.add_parameter(
                name=f'pulse_period{src}',
                label=f'Source {src} pulse period',
                unit='s',
                get_cmd=f'SOURce{src}:PULSe:PERiod?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PULSe:PERiod {{}}s',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'pulse_trans_lead{src}',
                label=f'Source {src} pulse leading edge time',
                unit='s',
                get_cmd=f'SOURce{src}:PULSe:TRANsition:LEADing?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PULSe:TRANsition:LEADing {{}}s',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'pulse_trans_trail{src}',
                label=f'Source {src} pulse trailing edge time',
                unit='s',
                get_cmd=f'SOURce{src}:PULSe:TRANsition:TRAiling?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PULSe:TRANsition:TRAiling {{}}s',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'pulse_width{src}',
                label=f'Source {src} pulse width',
                unit='s',
                get_cmd=f'SOURce{src}:PULSe:WIDTh?',
                get_parser=float,
                set_cmd=f'SOURce{src}:PULSe:WIDTh {{}}s',
                vals=vals.Numbers()
            )

            # Sweep parameters
            self.add_parameter(
                name=f'sweep_hold_time{src}',
                label=f'Source {src} sweep hold time',
                unit='s',
                get_cmd=f'SOURce{src}:SWEep:HTIMe?',
                get_parser=float,
                set_cmd=f'SOURce{src}:SWEep:HTIMe {{}}s',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'sweep_mode{src}',
                label=f'Source {src} sweep mode',
                get_cmd=f'SOURce{src}:SWEep:MODE?',
                get_parser=str,
                set_cmd=f'SOURce{src}:SWEep:MODE {{}}',
                vals=vals.Enum('AUTO', 'MANual', 'MAN')
            )
            self.add_parameter(
                name=f'sweep_return_time{src}',
                label=f'Source {src} sweep return time',
                unit='s',
                get_cmd=f'SOURce{src}:SWEep:RTIMe?',
                get_parser=float,
                set_cmd=f'SOURce{src}:SWEep:RTIMe {{}}s',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'sweep_spacing{src}',
                label=f'Source {src} sweep spacing',
                get_cmd=f'SOURce{src}:SWEep:SPACing?',
                get_parser=str,
                set_cmd=f'SOURce{src}:SWEep:SPACing {{}}',
                vals=vals.Enum('LINear', 'LIN', 'LOGarithmic', 'LOG')
            )
            self.add_parameter(
                name=f'sweep_time{src}',
                label=f'Source {src} sweep time',
                unit='s',
                get_cmd=f'SOURce{src}:SWEep:TIME?',
                get_parser=float,
                set_cmd=f'SOURce{src}:SWEep:TIME {{}}s',
                vals=vals.Numbers(1e-3, 300)
            )

            # Voltage parameters
            self.add_parameter(
                name=f'voltage_concurrent{src}',
                label=f'Source {src} concurrent voltage',
                get_cmd=f'SOURce{src}:VOLTage:CONCurrent:STATe?',
                set_cmd=f'SOURce{src}:VOLTage:CONCurrent:STATe {{}}',
                val_mapping=on_off_map
            )
            self.add_parameter(
                name=f'voltage_high{src}',
                label=f'Source {src} high voltage level',
                unit='V',
                get_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:HIGH?',
                get_parser=float,
                set_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:HIGH {{}}V',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'voltage_low{src}',
                label=f'Source {src} low voltage level',
                unit='V',
                get_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:LOW?',
                get_parser=float,
                set_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:LOW {{}}V',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'voltage_offset{src}',
                label=f'Source {src} voltage offset',
                unit='V',
                get_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:OFFSet?',
                get_parser=float,
                set_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:OFFSet {{}}V',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'voltage_unit{src}',
                label=f'Source {src} voltage unit',
                get_cmd=f'SOURce{src}:VOLTage:UNIT?',
                get_parser=str,
                set_cmd=f'SOURce{src}:VOLTage:UNIT {{}}',
                vals=vals.Enum('VPP', 'VRMS', 'DBM')
            )
            self.add_parameter(
                name=f'voltage_amplitude{src}',
                label=f'Source {src} voltage amplitude',
                get_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:AMPLitude?',
                get_parser=float,
                set_cmd=f'SOURce{src}:VOLTage:LEVel:IMMediate:AMPLitude {{}}V',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'voltage_limit_high{src}',
                label=f'Source {src} voltage limit high',
                unit='V',
                get_cmd=f'SOURce{src}:VOLTage:LIMit:HIGH?',
                get_parser=float,
                set_cmd=f'SOURce{src}:VOLTage:LIMit:HIGH {{}}V',
                vals=vals.Numbers()
            )
            self.add_parameter(
                name=f'voltage_limit_low{src}',
                label=f'Source {src} voltage limit low',
                unit='V',
                get_cmd=f'SOURce{src}:VOLTage:LIMit:LOW?',
                get_parser=float,
                set_cmd=f'SOURce{src}:VOLTage:LIMit:LOW {{}}V',
                vals=vals.Numbers()
            )

        # Noise parameters
        for src in [3, 4]:
            self.add_parameter(
                name=f'noise_level{src}',
                label=f'Source {src} relative noise level',
                unit='%',
                get_cmd=f'SOURce{src}:POWer:LEVel:IMMediate:AMPLitude?',
                get_parser=float,
                set_cmd=f'SOURce{src}:POWer:LEVel:IMMediate:AMPLitude {{}}PCT',
                vals=vals.Numbers(0, 50),
                docstring='Noise level applied to output, as a percentage of current amplitude.'
            )

        self.add_parameter(
            name='ref_osc_source',
            label='Reference clock source',
            get_cmd='SOURce:ROSCillator:SOURce?',
            get_parser=str,
            set_cmd='SOURce:ROSCillator:SOURce {}',
            vals=vals.Enum('INTernal', 'INT', 'EXTernal', 'EXT')
        )

        # Trigger parameters
        self.add_parameter(
            name='trigger_slope',
            label='Trigger slope',
            get_cmd='TRIGger:SEQuence:SLOPe?',
            get_parser=str,
            set_cmd='TRIGger:SEQuence:SLOPe {}',
            vals=vals.Enum('POSitive', 'POS', 'NEGative', 'NEG')
        )
        self.add_parameter(
            name='trigger_source',
            label='Trigger source',
            get_cmd='TRIGger:SEQuence:SOURce?',
            get_parser=str,
            set_cmd='TRIGger:SEQuence:SOURce {}',
            vals=vals.Enum('TIMer', 'TIM', 'EXTernal', 'EXT')
        )
        self.add_parameter(
            name='trigger_timer',
            label='Trigger timer period',
            unit='s',
            get_cmd='TRIGger:SEQuence:TIMer?',
            get_parser=float,
            set_cmd='TRIGger:SEQuence:TIMer {}s',
            vals=vals.Numbers(1e-6, 500)
        )

        self.snapshot(update=True)
        self.connect_message()

    def self_calibrate(self) -> None:
        self.write('CALibration:ALL')
        self.wait()

    def self_test(self) -> None:
        self.write('DIAGnostic:ALL')
        self.wait()

    def abort(self) -> None:
        self.write('ABORt')
        self.wait()

    def reset(self) -> None:
        self.log.info(f'Resetting {self.name}.')
        self.write('*RST')
        self.wait()

    def wait(self) -> None:
        self.write('*WAI')

    def save(self, location: int) -> None:
        if location not in [0, 1, 2, 3, 4]:
            raise ValueError(f'Location must be in {[0, 1, 2, 3, 4]}.')
        self.log.info(f'Instrument settings saved to location {location}.')
        self.write(f'*SAVE {location}')

    def recall(self, location: int) -> None:
        if location not in [0, 1, 2, 3, 4]:
            raise ValueError(f'Location must be in {[0, 1, 2, 3, 4]}.')
        self.log.info(f'Recalling instrument settings from location {location}.')
        self.write(f'*RCL {location}')

    def synchronize_phase(self, src: int) -> None:
        self.log.info('Synchronizing CH1 and CH2 phase.')
        self.write(f'SOURce{src}:PHASe:INITiate')

    def reset_edit_memory(self, points: int = 1000):
        """"""
        Reset the contents of the edit memory (EMEM), and set its size to
        `points`.

        Each point will be initialized with the value 8191, which corresponds
        to the voltage half-way between `voltage_low` and `voltage_high`.
        """"""
        if (points < MIN_WAVEFORM_LENGTH or
            points > MAX_WAVEFORM_LENGTH):
            raise ValueError(f""Trying to reset edit memory with invalid length: {points}"")

        self.write(f""DATA:DEFINE EMEM,{points}"")

    def upload_waveform(self, waveform: Sequence[float], memory: int):
        """"""
        Upload a waveform to the editable memory (EMEM), and then copy it to the
        USER1, USER2, USER3 or USER4 memory.

        The waveform data should contain values in the range 0..1. Note that
        the actual voltage values that are output will depend on the values of
        the `voltage_low1/2` and `voltage_high1/2` parameters; 0 will be
        mapped to `voltage_low` and 1 to `voltage_high`.

        Args:
            waveform: sequence of points containing the waveform data,
                containing values from 0 to 1.
            memory: The USER# memory where to to store the waveform, from 1 to 4.
        """"""
        if (len(waveform) < MIN_WAVEFORM_LENGTH or
            len(waveform) > MAX_WAVEFORM_LENGTH):
            raise ValueError(f""Invalid waveform length: {len(waveform)}"")

        if memory not in [1, 2, 3, 4]:
            raise ValueError(f""Invalid value for memory: '{memory}'"")

        # convert to numpy array and raise ValueError if data contains inf or nan
        wf_array = np.asarray_chkfinite(waveform)

        if np.any(wf_array > 1.0):
            raise ValueError(""Waveform contains data above 1.0"")
        if np.any(wf_array < 0.0):
            raise ValueError(""Waveform contains data below 0.0"")

        self.reset_edit_memory(len(waveform))

        # convert waveform to two-byte integer values in the range 0..16382 (= 2**14-2)
        wf_codes = (wf_array * (2**14-2)).astype(np.uint16)

        # write data to the editable memory
        self.visa_handle.write_binary_values(
            f""DATA:DATA EMEM,"",
            cast(Sequence[float], wf_codes), # cast to make types correct
            datatype=""H"", # unsigned short (16 bits)
            is_big_endian=True, # the AFG expects data in big endian order
            header_fmt=""ieee"",
        )

        # copy data from editable memory to USER.
        self.write(f""DATA:COPY USER{memory},EMEM"")


class AFG3252(AFG3000):
    pass

"
297,25.0,USA,"The SIM928 Isolated Voltage Source is ideal for applications where ultra-clean DC voltage is required. Voltage can be set between ±20 VDC with millivolt resolution, and the source can drive up to ±10 mA. The output circuit is optically isolated from all earth-referenced charging circuitry, providing maximum flexibility and noise immunity. The system can float to ±40 V, and the output is short-circuit protected.",SIM 928,538.0,"Stanford Research Systems is a maker of general test and measurement instruments. The company was founded in 1980, is privately held, and is not affiliated with Stanford University.
",Qcodes Community,Stanford Research,"[OrderedDict([('id', 'att1qiEpAFySo3642'), ('width', 200), ('height', 133), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iqW0Fh4ByY2Me90hbivB1w/t9fQxPzzwRirPM2Vld6yS7INdesehYFajDDSz2Kud9kYRhJfh1iBy_p1I_0kkb9ecw8nREIXJM9P1TILybVjA8FBP8eN-SVIzFIItEFgOZa-xlvukiP32_j7VuY_tQ8t/zvRl7KPE8sTKfrO7oQk2gQyeN0ILZCnGxc9IxCNdJAE'), ('filename', 'ImageForSupplier_4969.webp'), ('size', 3136), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/iKzY_usE6iQv7g9N9f7pRQ/aV_SlGzJC5vboHoKCu9elrn7cs4_VFU5DiOz7miSm7l9Qcjma-1mh7ipxOQpWogLm20mzMHxAF8wblRnRHIW6H2Uk4y7Z4OB14Jet9pUIQ8/mMZJDheCe5DEJkRey_b5phM7bOquC7dgEDgZrrBO-As'), ('width', 54), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/SHyg1EzK-gh4xaugRAHi4g/Yo-gr9gdZ9wbcNpRiCwk-cK4H4diV_8AHS3DWb7BhBDUR8kufeweO860vjNTOhMoKDRNtKNHNyb5Cuv7Rmi6H53F7XhkJue4XB0857emhpE/sIZzgO12dnQeRMmXcwqXL5Vtbsgl36cVH8gHi_JUnME'), ('width', 200), ('height', 133)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/E3_s-labqA9rNFHc1pP3VA/FXqsZztqDD_O0fhT_a-obUp-wXRNMPOMW_KMxlfsSM3iAy2I6lk2I9q6myNIf9o4TX-Q85X-Uhd_ymODe9DiCqnAJoQRFemVRSCRSqIBxTc/pvF3e2nZJPMQlxSdjDTlQGJNtp9u7ddL_tRPxv_oWCo'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thinksrs.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Voltage_source,['Power Supplies'],"A voltage source is a two-terminal device which can maintain a fixed voltage.[1] An ideal voltage source can maintain the fixed voltage independent of the load resistance or the output current. However, a real-world voltage source cannot supply unlimited current.

A voltage source is the dual of a current source. Real-world sources of electrical energy, such as batteries and generators, can be modeled for analysis purposes as a combination of an ideal voltage source and additional combinations of impedance elements.",,https://www.thinksrs.com/downloads/pdfs/catalog/SIM928c.pdf,"[OrderedDict([('id', 'attTD8m3kQGLIOYHV'), ('width', 1004), ('height', 1556), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DX6vyOQAGWXINolc6TbSlQ/fd1dvd52-C0FWA-NDazPtsEONL5NvWplKIBtCQhj4SCdtRtcvxj4PdA8S4soe2OUDRBvbj7k_SgUtQCm8MSVAAphklq9OpH4T2cwF2D_OUk/BJX2k_niXvWrQqprP0eAiWjMptF1nMZZbzcqw6TX5i8'), ('filename', 'SIM928 MainPic.jpg'), ('size', 1109678), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aDt8bhwvnipiX5KPin9g1w/Vs7yYiJpzcxDc6gEfOvLRLpUdEA7LShpz9Ivi0Zud1ewocYHZDw0LsYUHJZJXyMQMuWz-4KwhkXp4F1XBJ1AHg/zqXgSiKb_r-3wRLd3LZeGxbhOwTcTIKhzX0BHYKW_AE'), ('width', 23), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/VBXjlTJ1Sk43E8mnFaX2nQ/TZJKDmkQHWMXX6OMGH3miNQbgHp1RZainH5yPKZxrVwQ7pZC4Sw6VetDxnKPZYje0YgkJWWRU_EYQkhMG2VJXg/ZREP8V7zFwOuK_scUYFgvoy6pbCmu-fUSUkJb5BkPHM'), ('width', 512), ('height', 793)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZKhMGAaxT9FP0vx6Xh3NMA/WQAqPJHcYB0RKnlLXsSvN35UFftMxEihP0iMZV0CtpM8Qfto5HSXy-Bzq17Is-XQJ41e3T57HkuaxMtM1HxZkg/x_kJTQoB80UD9chfwnNS8sYXfdR6gakuyUbzQn5xecM'), ('width', 3000), ('height', 3000)]))]))])]",https://www.thinksrs.com/products/sim928.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/StanfordResearchSystems/SIM928.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems.html#module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928,1695.0,,,,"from functools import partial
import logging
import numpy as np
import time

from qcodes.instrument.visa import VisaInstrument
from qcodes.utils import validators as vals

log = logging.getLogger(__name__)

class SIM928(VisaInstrument):
    """"""
    A driver for Stanford Research Systems SIM 928 DC source modules installed
    in a SIM900 mainframe.

    Args:
        name (str): An identifier for this instrument, particularly for
            attaching it to a ``Station``.
        address (str): The visa resource name to use to connect.
        slot_names (Dict[int]): An dictionary that optionally maps slot numbers
            to user-defined module names. Default ``{}``.
        timeout (int, float): Seconds to allow for responses. Default ``5``.
        metadata (Optional[Dict]): Additional static metadata to add to this
            instrument's JSON snapshot.
    """"""

    def __init__(self, name, address, slot_names=None, **kw):
        super().__init__(name, address=address, terminator='\n', **kw)

        if slot_names is None:
            self.slot_names = {}
        else:
            self.slot_names = slot_names
        self.module_nr = {}
        for i in self.slot_names:
            if self.slot_names[i] in self.module_nr:
                raise ValueError('Duplicate names in slot_names')
            self.module_nr[self.slot_names[i]] = i

        self.write('*DCL')  # device clear
        self.write('FLSH')  # flush port buffers
        self.write('SRST')  # SIM reset (causes 100 ms delay)
        time.sleep(0.5)

        self.modules = self.find_modules()
        for i in self.modules:
            self.write_module(i, 'TERM LF')
            module_name = self.slot_names.get(i, i)
            self.add_parameter('IDN_{}'.format(module_name),
                               label=""IDN of module {}"".format(module_name),
                               get_cmd=partial(self.get_module_idn, i))
            self.add_parameter('volt_{}'.format(module_name), unit='V',
                               label=""Output voltage of module ""
                                     ""{}"".format(module_name),
                               vals=vals.Numbers(-20, 20),
                               get_cmd=partial(self.get_voltage, i),
                               set_cmd=partial(self._set_voltage, i))
            self.add_parameter('volt_{}_step'.format(module_name), unit='V',
                               label=""Step size when changing the voltage ""
                                     ""smoothly on module ""
                                     ""{}"".format(module_name),
                               get_cmd=None, set_cmd=None,
                               vals=vals.Numbers(0, 20), initial_value=0.005)
        self.add_parameter('smooth_timestep', unit='s',
                           label=""Delay between sending the write commands""
                                 ""when changing the voltage smoothly"",
                           get_cmd=None, set_cmd=None,
                           vals=vals.Numbers(0, 1), initial_value=0.05)

        super().connect_message()

    def get_module_idn(self, i):
        """"""
        Get the vendor, model, serial number and firmware version of a module.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module whose id is returned.

        Returns:
            A dict containing vendor, model, serial, and firmware.
        """"""
        if not isinstance(i, int):
            i = self.module_nr[i]
        idstr = self.ask_module(i, '*IDN?')
        idparts = [p.strip() for p in idstr.split(',', 3)]
        if len(idparts) < 4:
            idparts += [None] * (4 - len(idparts))
        return dict(zip(('vendor', 'model', 'serial', 'firmware'), idparts))

    def find_modules(self):
        """"""
        Query the SIM900 mainframe for which slots have a SIM928 module present.

        Returns:
             A list of slot numbers where a SIM928 module is present (starting
                 from 1)
        """"""
        CTCR = self.ask('CTCR?')
        CTCR = int(CTCR) >> 1
        modules = []
        for i in range(1, 10):
            if CTCR & 1 != 0 and self.get_module_idn(i)['model'] == 'SIM928':
                modules.append(i)
            CTCR >>= 1
        return modules

    def ask_module(self, i, cmd):
        """"""
        Write a command string to a module and return a response.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module to ask from.
            cmd (str): The VISA query string.

        Returns:
            The response string from the module.
        """"""
        if not isinstance(i, int):
            i = self.module_nr[i]
        msg = 'SNDT {},""{}""'.format(i, cmd)
        self.write(msg)
        time.sleep(100e-3)
        msg = 'GETN? {},128'.format(i)
        msg = self.ask(msg)
        # first read consumes the terminator of the message from the submodule,
        # so we have a terminator from the message to us still in the input
        # buffer.
        self.visa_handle.read()

        if msg[:2] != '#3':
            raise RuntimeError('Unexpected format of answer: {}'.format(msg))
        return msg[5:]

    def write_module(self, i, cmd):
        """"""
        Write a command string to a module with NO response expected.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module to write to.
            cmd (str): The VISA command string.
        """"""
        if not isinstance(i, int):
            i = self.module_nr[i]
        self.write('SNDT {},""{}""'.format(i, cmd))

    def set_voltage(self, i, voltage):
        """"""
        Set the output voltage of a module.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module to set the voltage of.
            voltage (float): The value to set the voltage to.
        """"""
        if not isinstance(i, int):
            name = i
            i = self.module_nr[i]
        else:
            name = self.slot_names.get(i, i)
        self.parameters['volt_{}'.format(name)].set(voltage)

    def _set_voltage(self, i, voltage):
        """"""
        Set the output voltage of a module.

        Args:
            i (int): Slot number of the module to set the voltage of.
            voltage (float): The value to set the voltage to.
        """"""
        self.write_module(i, 'VOLT {:.3f}'.format(voltage))

    def get_voltage(self, i):
        """"""
        Get the output voltage of a module.

        Args:
           i (int, str): Slot number or module name (as in ``slot_names``)
               of the module to get the voltage of.

        Returns:
            The current voltage of module ``i`` as a ``float``.
        """"""
        if not isinstance(i, int):
            i = self.module_nr[i]
        return float(self.ask_module(i, 'VOLT?'))

    def set_smooth(self, voltagedict, equitime=False):
        """"""
        Set the voltages as specified in ``voltagedict` smoothly,
        by changing the output on each module at a rate
        ``volt_#_step/smooth_timestep``.

        Args:
            voltagedict (Dict[float]): A dictionary where keys are module slot
                numbers or names and values are the desired output voltages.
            equitime (bool): If ``True``, uses smaller step sizes for some of
                the modules so that all modules reach the desired value at the
                same time.
        """"""

        # convert voltagedict to contain module names only and validate inputs
        vdict = {}
        for i in voltagedict:
            if not isinstance(i, int):
                if self.module_nr[i] not in self.modules:
                    raise KeyError('There is no module named {}'.format(i))
                name = i
            else:
                if i not in self.modules:
                    raise KeyError('There is no module in slot {}'.format(i))
                name = self.slot_names.get(i, i)
            vdict[name] = voltagedict[i]
            self.parameters['volt_{}'.format(name)].validate(vdict[name])

        intermediate = []
        if equitime:
            maxsteps = 0
            deltav = {}
            for i in vdict:
                deltav[i] = vdict[i]-self.get('volt_{}'.format(i))
                stepsize = self.get('volt_{}_step'.format(i))
                steps = abs(int(np.ceil(deltav[i]/stepsize)))
                if steps > maxsteps:
                    maxsteps = steps
            for s in range(maxsteps):
                intermediate.append({})
                for i in vdict:
                    intermediate[-1][i] = vdict[i] - \
                                          deltav[i]*(maxsteps-s-1)/maxsteps
        else:
            done = []
            prevvals = {}
            for i in vdict:
                prevvals[i] = self.get('volt_{}'.format(i))
            while len(done) != len(vdict):
                intermediate.append({})
                for i in vdict:
                    if i in done:
                        continue
                    stepsize = self.get('volt_{}_step'.format(i))
                    deltav = vdict[i]-prevvals[i]
                    if abs(deltav) <= stepsize:
                        intermediate[-1][i] = vdict[i]
                        done.append(i)
                    elif deltav > 0:
                        intermediate[-1][i] = prevvals[i] + stepsize
                    else:
                        intermediate[-1][i] = prevvals[i] - stepsize
                    prevvals[i] = intermediate[-1][i]

        for voltages in intermediate:
            for i in voltages:
                self.set_voltage(i, voltages[i])
            time.sleep(self.smooth_timestep())

    def get_module_status(self, i):
        """"""
        Gets and clears the status bytes corresponding to the registers ESR,
        CESR and OVSR of module ``i``.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module to get the status of.

        Returns:
            int, int, int: The bytes corresponding to standard event,
            communication error and overload statuses of module ``i``
        """"""
        stdevent = self.ask_module(i, '*ESR?')
        commerr = self.ask_module(i, 'CESR?')
        overload = self.ask_module(i, 'OVSR?')
        return stdevent, commerr, overload

    def reset_module(self, i):
        """"""
        Sends the SIM Reset signal to module i.

        Causes a break signal (MARK level) to be asserted for 100 milliseconds
        to module i. Upon receiving the break signal the modul will flush its
        internal input buffer, reset its command parser, and default to 9600
        baud communications.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module to reset.
        """"""
        if not isinstance(i, int):
            i = self.module_nr[i]
        self.write('SRST {}'.format(i))


    def check_module_errors(self, i, raiseexc=True):
        """"""
        Check if any errors have occurred on module ``i`` and clear the status
        registers.

        Args:
            i (int, str): Slot number or module name (as in ``slot_names``)
                of the module to check the error of.
            raiseexc (bool): If true, raises an exception if any errors have
                occurred. Default ``True``.

        Returns:
            list[str]: A list of strings with the error messages that have
            occurred.
        """"""
        stdevent, commerr, overload = self.get_module_status(i)
        OPC, INP, QYE, DDE, EXE, CME, URQ, PON \
            = self.byte_to_bits(int(stdevent))
        PARITY, FRAME, NOISE, HWOVRN, OVR, RTSH, CTSH, DCAS \
            = self.byte_to_bits(int(commerr))
        Overload, Overvoltage, BatSwitch, BatFault, _, _, _, _ \
            = self.byte_to_bits(int(overload))

        errors = []
        warnings = []
        if INP:
            errors.append('Input Buffer Error.')
        if QYE:
            errors.append('Query Error.')
        if DDE:
            code = self.ask_module(i, 'LDDE?')
            errors.append('Device Dependant Error: {}.'.format(code))
        if EXE:
            code = self.ask_module(i, 'LEXE?')
            msg = {0: 'No error',
                   1: 'Illegal value',
                   2: 'Wrong token',
                   3: 'Invalid bit'}.get(int(code), 'Unknown')
            if int(code) > 3 or int(code) == 0:
                warnings.append('Execution Error: {} ({}).'.format(msg, code))
            else:
                errors.append('Execution Error: {} ({}).'.format(msg, code))
        if CME:
            code = self.ask_module(i, 'LCME?')
            msg = {0: 'No error',
                   1: 'Illegal command',
                   2: 'Undefined command',
                   3: 'Illegal query',
                   4: 'Illegal set',
                   5: 'Missing parameter(s)',
                   6: 'Extra parameter(s)',
                   7: 'Null parameter(s)',
                   8: 'Parameter buffer overflow',
                   9: 'Bad floating-point',
                   10: 'Bad integer',
                   11: 'Bad integer token',
                   12: 'Bad token value',
                   13: 'Bad hex block',
                   14: 'Unknown token'}.get(int(code), 'Unknown')
            if int(code) > 14 or int(code) == 0:
                warnings.append('Command Error: {} ({}).'.format(msg, code))
            else:
                errors.append('Command Error: {} ({}).'.format(msg, code))
        if PARITY:
            errors.append('Parity Error.')
        if FRAME:
            errors.append('Framing Error.')
        if NOISE:
            errors.append('Noise Error.')
        if HWOVRN:
            errors.append('Hardware Overrun.')
        if OVR:
            errors.append('Input Buffer Overrun.')
        if RTSH:
            errors.append('Undefined Error (RTSH).')
        if CTSH:
            errors.append('Undefined Error (CTSH).')
        if Overload:
            errors.append('Current Overload.')
        if Overvoltage:
            errors.append('Voltage Overload.')
        if BatFault:
            errors.append('Battery Fault.')

        if raiseexc:
            if len(errors) != 0:
                raise Exception(' '.join(errors + warnings))
        return errors + warnings

    @staticmethod
    def byte_to_bits(x):
        """"""
        Convert an integer to a list of bits

        Args:
            x (int): The number to convert.

        Returns:
            list[bool]: A list of the lowest 8 bits of ``x`` where ``True``
            represents 1 and ``False`` 0.
        """"""
        bits = []
        for _ in range(8):
            if x & 1 != 0:
                bits.append(True)
            else:
                bits.append(False)
            x >>= 1
        return bits
"
307,14.0,Germany,multi-functional piezo controller for closed loop positioners,"ANC 350
",101.0,"**Attocube** is a leading pioneer for nanotechnology solutions in precision motion and nanopositioning applications, cryogenic microscopy,

",Qcodes Community,Attocube,"[OrderedDict([('id', 'attWQX0ELCTRZLEuX'), ('width', 363), ('height', 138), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2IQf7r5gYANmFJ8AfssvAA/QVVSntlWkxKnnyd__En6qU7jWf7JREB-qlzevTPbcXu-DETlqwfYp1LmzFdXcw5OFaA4O09XEBaWEz_AVYvdBPXmDtxvx1KgKHNU9a_-Ra4/kezYeKwDKhQk0dR_0RYQCglMLnlEUcXwE_iYbjLOmnw'), ('filename', 'images.png'), ('size', 4389), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OLaUzQd7LPUXk4xvtoDdtw/1lEbIvgxm2iQnHJXxzt3ootOgOydLtpX72g3P_3HfcD138h3bxtAEBUSPpiYzjYmwpLq2i5_iQXHRCPXicMHNw/KiM7Ep0U4TvwE86RgAfpkdUURhGNMyYXT3nt_YHh75U'), ('width', 95), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aGe0KdCVR6vES1GKodpWig/bDZzMGbUN9hPpi9UyQ9a0tz362FJN9Vnw6i-28Z337grR-b3cRosWu40WQ62sxbflUZ3xtC5OpRktdRd9oGvYw/iCWqtUjBDjmnhiEr2uiFAZhTi-y1U-9h6OdvhciQiYI'), ('width', 363), ('height', 138)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CJ0pEAcAQZlVU6mX2wPahg/Vl-sWR6DLTxyaYOLJkTTmLmNGiWFV0VD9s3RCkCqm6-B3UT5Hw72dnzWDJO3wNpAI73peAnegwmVVn109eFEfw/qsn6CsbXE8fGmQB3-Cv5p9DIgn9_JnjaNBfungfuKIA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.attocube.com/en,Write a Python script that uses Qcodes Community to connect to a ANC 350 PIEZO Controller Positional Controller,"https://www.pi-usa.us/en/products/piezo-drivers-controllers-power-supplies-high-voltage-amplifiers#:~:text=A%20piezo%20controller%20or%20driver,or%20even%20piezo%20power%20supply.",['Positional Controller'],A piezo controller or driver is used to control the motion of a piezo positioning device.,ANC 350 PIEZO Controller,https://www.attocube.com/downloads/anc350-piezo-motion-und-readout-controller.pdf,"[OrderedDict([('id', 'attMnS7OGE1ekFDIP'), ('width', 407), ('height', 124), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/XErnIVAeAraYBAPIlJ1_vA/nu6OW5e8dp5TfWbkzsRX03uhPI77TSkTqP15e6rSVnNICQVvzFrAEpq5Xpjn1BNsXnJbvQhlmMoB7bst1tyajCUy3u-81PG9FrXFGHyboHo/WLTUSWS5l5nuiE0J62eAIGlH7xsPIc-ohaZ4Sz37iTo'), ('filename', 'téléchargement.jpeg'), ('size', 7609), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-qoUrWzILALA05tqJMd2Fw/wKD2GCjdz6HzZ8U79AyTyLDziMyLQTX0dsBuIdT9BnI9ia4Iob09D31j0MIztOckm6P6-k5wXUBMKAzzHTLvBw/yFRrVqdvDW1EcNuLVZZH5SRueNsW4i7avaX7F6UqsZE'), ('width', 118), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/gQlH06ceV7hMNh1KfnyInA/XhNjiuEFWeuizN-4TU3mLC7hBfCq7gnoOmB6wS4l3QLsGNL2KNRrApUzyaMdFzZT2NeMAvHwWXrJA-1gaQ5JCA/gn5H0h1hvP7L48IySdzMxqBBKZgNfMjvIYZJiVltX4g'), ('width', 407), ('height', 124)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/HOzVU69wR9p8yXrjbhLFkw/FT1YL-GZvfC7ixY_ZIjXeSs7c5Kc3lHcnKFEZkrIPKM06RDxmzwtYYfqvoqVFOsP9IUcXqroC4WNetTGqnaLvw/P50FMg2wScsZs-XcVVv9BMZ2GQY7-2_I5csuC5_WIq8'), ('width', 3000), ('height', 3000)]))]))])]",https://www.attocube.com/downloads/anc350-piezo-motion-und-readout-controller.pdf,https://github.com/Laukei/pyanc350,https://pypi.org/project/pyanc350/,,,,,
325,14.0,Germany,The ANC300 is a modular positioner control unit providing suitable drive signals to actuate attocube's open loop positioners or scanners manually or under computer control.,"ANC 300 
",94.0,"**Attocube** is a leading pioneer for nanotechnology solutions in precision motion and nanopositioning applications, cryogenic microscopy,

",Qcodes Community,Attocube,"[OrderedDict([('id', 'attWQX0ELCTRZLEuX'), ('width', 363), ('height', 138), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2IQf7r5gYANmFJ8AfssvAA/QVVSntlWkxKnnyd__En6qU7jWf7JREB-qlzevTPbcXu-DETlqwfYp1LmzFdXcw5OFaA4O09XEBaWEz_AVYvdBPXmDtxvx1KgKHNU9a_-Ra4/kezYeKwDKhQk0dR_0RYQCglMLnlEUcXwE_iYbjLOmnw'), ('filename', 'images.png'), ('size', 4389), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OLaUzQd7LPUXk4xvtoDdtw/1lEbIvgxm2iQnHJXxzt3ootOgOydLtpX72g3P_3HfcD138h3bxtAEBUSPpiYzjYmwpLq2i5_iQXHRCPXicMHNw/KiM7Ep0U4TvwE86RgAfpkdUURhGNMyYXT3nt_YHh75U'), ('width', 95), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aGe0KdCVR6vES1GKodpWig/bDZzMGbUN9hPpi9UyQ9a0tz362FJN9Vnw6i-28Z337grR-b3cRosWu40WQ62sxbflUZ3xtC5OpRktdRd9oGvYw/iCWqtUjBDjmnhiEr2uiFAZhTi-y1U-9h6OdvhciQiYI'), ('width', 363), ('height', 138)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CJ0pEAcAQZlVU6mX2wPahg/Vl-sWR6DLTxyaYOLJkTTmLmNGiWFV0VD9s3RCkCqm6-B3UT5Hw72dnzWDJO3wNpAI73peAnegwmVVn109eFEfw/qsn6CsbXE8fGmQB3-Cv5p9DIgn9_JnjaNBfungfuKIA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.attocube.com/en,Write a Python script that uses Qcodes Community to connect to a ANC300 Positional Controller,"https://www.pi-usa.us/en/products/piezo-drivers-controllers-power-supplies-high-voltage-amplifiers#:~:text=A%20piezo%20controller%20or%20driver,or%20even%20piezo%20power%20supply.",['Positional Controller'],A piezo controller or driver is used to control the motion of a piezo positioning device.,ANC300,https://www.attocube.com/downloads/anc300.pdf,"[OrderedDict([('id', 'attgPaevs1VijaVeP'), ('width', 840), ('height', 550), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/vOac1pxJtL9uPOKTV5-wLw/EToYlcgUgcx5nlgciKBVHHTW0uFRAoD8vACzjlWvQe7clcrpCqISuqFjnxajm4wzeNZByMHafKQ5N7PO00SSMYCFVbIzH_0G0FuaB42DBIg/nnzOqJfQyslZQmSfhJvRbaNLRrppGD3klu5JH_38Ep8'), ('filename', 'ANC300.jpg'), ('size', 196981), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fRmMsn31rIQ-XVD5Mst2qQ/WjL7UhuM3-hPFgwVqlJz5M_7u_VO_PGTaY38n398cyWnZO5F7KuFG0T_mxOouUzSL6Y8N_w6GezjwPrx_iTgqg/sVGMbOLb0fBKlFMp54LLlP9wr78cWkPIofYkboBaZ-M'), ('width', 55), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/5INcUKWaQurhDJh4_ZXQpw/3P8jgpuAwDDASeteEiG5solofw4ncpNmB25uF_oS8qQpVmoSNzuq67Eppea-4CU23kcp1_q2GLLVxEETSez4RA/meK13Ei_LO4XlbaygOYm32YuUm-m4FE3BVBZqS3K0oE'), ('width', 782), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/SxznApkXc9pCQWQv1PIXrA/FfnUlOdMiFxZ6r-0FCYokgGmrg8y0qDnYHmSpiqmTIdKsNgG6NLg1CycZKBU119ucCUnbYwGvCyUnSBcfDgNFg/IPx9b778bOhbrzQldo8n2Y5D1sbMkTNnEMxctBXBmIs'), ('width', 3000), ('height', 3000)]))]))])]",https://www.attocube.com/en/products/nanopositioners/motion-controllers-overview/anc300,https://github.com/jithinbp/Python-gpib-PCAR/blob/master/anc300.py,https://pymeasure.readthedocs.io/en/latest/api/instruments/attocube/anc300.html,,,True,,"#Commands for dealing with the ANC300 controller

import telnetlib, time, socket

class ANC300:
	def __init__(self):
		self.host    = '192.168.10.3'	#IP address for ANC300
		self.port	= 7230			#standard telnet console port.  LUA console is at 7231
		self.timeout = 30
		self.password='123456'
		self.status=''
		self.identity=''
		self.connected=False

	def connect(self):
		start_time=time.time()
		try:
			self.session = telnetlib.Telnet(self.host, self.port, self.timeout)
			print time.time()-start_time
			self.identity = self.session.read_until('code: ', 2 ).split('Authorization')[0]
			print time.time()-start_time
			self.session.write(self.password+'\r\n')		#send default password
			print time.time()-start_time
			print self.session.read_lazy()
			self.status	=	'connected'
			self.connected = True
		except socket.timeout:
			self.status = ""socket timeout""
			self.identity = 'none'
			self.connected = False
			
		return self.identity
		
	def go(self,command):
		self.session.write(command+'\r\n')
		if(command[:3]=='get'):
			received = self.session.read_until('OK', 2 )
		else:
			received = 'Done'
		return received.split('OK')[0]
"
326,5.0,USA,"The LDA-302P-1 Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +33 dBm, and offers frequency coverage of 10 to 3,000 MHz. It has an attenuation range of 63 dB and a step size of 1.0 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-302P-1 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-302P-1,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'att5AGenWWmWko8L9'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2mhTZihZQ419FaGtlcanzA/lmPR-sZD_gWxo_3hSPFk3bi8QS2H9iZHKSfrgfP4kZHtkgwStPLCMjiiPpx1SYJpmdglswkYNVF79KRsHU_GF1SjuOMqnEZSR0laa6jkzn8PYg806JD1ZTOZoPX3BiIl/ZO3DxFj_BqV_woHCmz2aLcNW1o__8dmRj0WEl6Y_W-I'), ('filename', 'vaunix-digital-attenuator.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/99mnPNBBezVRkeAppvqqyQ/NNMv5PRLl3t6xLrSucYSYbH0rX-Gja55Wz0WT4cYclu_CPuEbm7upiE4B-8-oN1yDsj4M83q2QhtSzdHxR0Tow/HuVr4iLyB_E-VXtLEJhS-iP8pX-FDCeVJNqxuPTBXVQ'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zOfmMroi5oxTmzCxpg3X7g/zW3HHQwJ7m75OC738EAQXUziWVkdj9Vno3arLqbgmjOaYdEF6BVFudXNyUFT7DR-yP4E0pFaPNNgQRmX4gmP1g/0_6EHBB8KFlfKh01jhtzIQ6DTSB9m8FbqHceEhThj7I'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W7HfkYYDCPikghxq6YFi6A/6B3XZO2prFzZO8Za7WyRkFrS0J9W2yfw0OtcWnG7lnGRZpt32ugS_r6EbXypnN7_qiYGAPpis0UHLGn_FlL0Xg/B8K2-a7nUyu3HkgW6grqDGRdRpJH5ud3fDnvzCHprFQ'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-302p-1-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,575.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
337,5.0,USA,"The LDA-302P-H Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +33 dBm, and offers frequency coverage of 10 to 3,000 MHz. It has an attenuation range of 31.5 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-302P-H ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-302P-H,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attAXR8c8ki57a3nQ'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aeU8msYTt6OQ1Gp6SY5dYg/2pXCcWCvEWq-1wBqaeqHyWXMn7GFQ-8Ku0ixYp9Wj4-ZCZQ241oAd__eZrAr1mBvj9BWTxxCh7ZIgmWtQCtbFzo02dJ3YpYYG88NGIu5uOyenZSbmaaGYjllPaEgRqi1/KbVbNB8CPXoAC0AV-pNVKPmet8VvwqjA7PqcyqRY_3A'), ('filename', 'vaunix-digital-attenuator-102.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bTBzH9bpw34imsgJSEf1zQ/bKiX2AV_OBhDHNtqQFZLpTtYADEwBJ8oLJbmABG0YWj57tQJazjR7ZUmN1mSEkJkxAHYW6mXWDcHN56tsSHWkw/pMnUKmpNGnn-KuPxmAUlfhptwrrYHuLtbz4dHqaOZ-4'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uIQvzqlmS-Ia9OfVo0njFQ/TPmsw2CP-1_eUgWfC9X-Em4diEVV08yttGzuaEY1sNjAeXCFarRN29ByEzk42C4F4xG6PD-BhY7EWEgi31RZ4w/6EPpqibF0Kv9Rd7U-c_9Owxc_TxWqWwW6kUTmpzzWxw'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/TRM9nXcWPR6s8YnpMQmtcw/W9hNcF_E2g7BIiwcFYJrJltZc4gj1UhFlXgHS10Hzpy988te6xCBt4zVHmlvTa2yLPyUrhw1V3rcMv1XQSOotA/mBN-oAZlgLNPp6rous_MCeYSDbnYi-sLk7q41k-1Gxo'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-302p-h-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,575.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
345,5420.0,USA,"The triple output, 160 W, E36313A provides small, compact size for bench use; low output ripple and noise; built-in measurements and basic programmable features with USB and LAN, and optional GPIB interfaces.","Keysight E36313A
",308.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software
",Qcodes Community,Keysight,"[OrderedDict([('id', 'attSixem5KGYQVz77'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CpwBp96kY5dUnguQiqYpww/J9lJkFD16xSDAPvmgv_d56vj9Lqq6ItNUW_5UoMyN-S0Shnh0JOEO8csLebz7Xu4Z8gE07FUhS-nDKuUnQrjlgGl9TDwvdw0ri8xFYWoqJI/u6-p03gBGsvJDX5pDkq8g03E4crw0PcqBr7jJQHqkOI'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OHgE-tcyvCBxuFqu2T7t_A/az7HG7f0QS1vnZ52VcX5uXPXMyaXWm0aU0XpvVcbL-iaXMyXmXzrSR-B4rc2L0dd-f6o9qeZB5ZLJwyXF5Ddw0s88QIR6eB5yl5YgvaK938/HNFmDeic35zFTM_Qz4ZdgLI6Ram83KauYXm5s4osP2w'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EXCh0xCs_7MHSTx5Zz4CPA/Vm4LQikWqhLq7BQ4diBo6XQAAS5CLk1cfq9-S4yaTSMKcSuykUmlSiBgLAQSc73c_ggpGgo-k66P49Sg6IvYNQsS9xuXJrGvmuhM7B3ygEQ/9HyBiUmvRW0XEd9GhYUpcS4ZSI2K8DRyjI70MXa9kr4'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RQAo4UuLDVUF9_USADgP3w/dB55bQeyNGnlF3qRJsUAPWsAKtJnjKtA7XkA6scBhm0AkS5S6u_fVInQqEF-cIPNvke9dKGD1bz6c74uEryk4Ez3lO2dlivDqcW_KnVzMQM/vqKwTVltxdBX1CwxjuFTUNpzJ5R2NnBqC3e7aQx3xzA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT E36313A Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",KEYSIGHT E36313A,https://www.keysight.com/us/en/assets/7018-05629/data-sheets/5992-2124.pdf,"[OrderedDict([('id', 'attfXBGjHDEkyg09M'), ('width', 1351), ('height', 899), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vf28_ILJ5_1OeLn3lUWMyw/Gi27J1K1c6pZyIqGedmycGUMVN823JEWoITW-6jwASTPjPwKvwYTNG2y-xcYUl0BVVjZ2e3_zRVsKqkJoPfZE7vjRPKSwY-gPWAJ-Cw0AKKhFNuq7nC00RtOM-pjIuPw/4UfmWcEm1vf-wPIvxM9dVjG5aMgP8FDUs7uKe40Urk8'), ('filename', 'e36313a-front-1503x1000-White-min.jpeg'), ('size', 366543), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KWUO4OvKA8r2WG83KtnN2Q/OfB7q95BQ01bDf4LO1Gj5q4QdaH8kFTpl5e403O2AvOVjhpeUEgy_COiZboRlrGDcOEvCe_n1l3WAA72Gx0zog/Ui1XHHw3BviI2248Z6LgaQsgYHI-fbMQoyylS5JzMY4'), ('width', 54), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0d-t4LSue57LcmbuYDAtlQ/19igXXUY4Syy7ZNZ-tM5WtVJ1NO7RJSzBSDHXpeUcVTxjoYi7PewIGlo7Yb2s95_xVNdFesMu23ueokr9Q4-Xw/q_smkfl8I9J8twAOK434MSSzJVCJFLH5cK9gr3ipceQ'), ('width', 769), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/4yVbkMYzxyewfiCOp9_gLg/WVdLI0vwjDfbxgzhG4dIv3SWgCGgSBiVPAR7Smy30Z4f3TYWDY-Xl0W__YWLaSkyOThBijdLjI6r2fckjSFuTg/CPys-vcjb2srY690yrksxqUP-gcD9xjRQN43IKxfDhI'), ('width', 3000), ('height', 3000)]))]))])]","https://www.altoo.dk/Keysight+E36313A+160W+Triple+Output+Power+Supply-+6V-+10A+-+2X+25V-+2A.htm#:~:text=The%20triple%20output%2C%20160%20W,LAN%2C%20and%20optional%20GPIB%20interfaces.",https://github.com/psmd-iberutaru/Keysight-E3631A-Python,,3130.28,,,,
350,41.3,"CJ Delft, Netherlands","The S5i module is a RF source ranging from 40 MHz to 4 GHz, initially designed for reflectometry. The output power of the fundamental frequency ranges from -20 dBm to 14 dBm and can be controlled by both the front panel and via software. The RF output can be muted by an external source, which gives an on/off ratio of larger than 60 dB.

",S5I,437.0,"At QuTech, we work on a radically new technology with world-changing potential. Our mission: to develop scalable prototypes of a quantum computer and an inherently safe quantum internet, based on the fundamental laws of quantum mechanics.
",Qcodes Community,Qutech,"[OrderedDict([('id', 'atttaTZUsXgNNgwbC'), ('width', 1504), ('height', 747), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RKC6g3qCsb7JlOEKd8pGhg/gUoncvmvaSr7ZkO-YvuMFw_HfmvhNK_3nj44uVJrOXdCE_YpscwSK6SM2WXwR-0KYP6faNUsTfV4rq_QWleBMqhEaUMhLUC1tgdF2C22mBE/kI3WrO11fnm23PjSBDA0OIsqBO6LHqwXQ3huop_Ag2g'), ('filename', 'QuTech_Main_rgb.jpg'), ('size', 158522), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GAO-iIvbz0A8L-V2yztQGA/FCtruksdQ2Q6srrhGiwgoVVF3AeuSBQ3uNTbyiELwsOWzdExn74Qwu_PF6D6WjqI9gPjl-YCas6da4IXlMC6MQ/k4tJSzhQhfVv0d9gPSWJJ-fksIeYJRmUH68XX5I2PuQ'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KsjRTv1rhseXNm1_RtLk5A/iuV4HMfRxlUUUiLhccAd5H1WREcmLIApSygRmprmfgGs9yMXyYe3q_dZfEAfpSAfwLYQKR7GaVVHuo1UTete-w/7COlOkNModL_5MKY4ECyxVxde5O4qnKbhzkh9izju2A'), ('width', 1031), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Vh5BpaV2gyhY3kOSAvq-ag/N8KfAOufo8Ghs6K4W1HIaasEWiYmkDoaiwwLHuSHP5UT7JTfSyhvbUSbBphdoBLA1BiBSDdKw5usJSo-WYhpjw/KtlR-7u5DaYUBKhRsOmxynfnGDx_p7Ip2JM7JCeQHec'), ('width', 3000), ('height', 3000)]))]))])]",https://qutech.nl/,Write a Python script that uses Qcodes Community to connect to a S5i RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",S5i,could not find,"[OrderedDict([('id', 'atttQsl2GO2NVZvPL'), ('width', 250), ('height', 981), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Q3x45tJF5n_yM_QTUaDKCA/-MSrXV-WZFNxaPgzhHtSuXL9OjQnz8WuX6VJdV-mRf7EsJzJ1a-CJDnSwvfSHUgYhqOxlikRIZjZtzj9TJvA36_yGIRgATpIqYf0RYYqJB0/Ss05fV13im3M70MxQQ7c4aA9kZAz3MqQWo6YdSOtihE'), ('filename', 'FrontS5i.png'), ('size', 350973), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/VX4PyW-2dgR8SdOLGDkyDA/PfTZXmhqKIgMoyFCYRNPn60PelOoFx-2UVmEg1t7v43zCtoVy7fyCiSw9IzQOTIA2t0QtCgNvZYeZR7OZBIeNw/lcEUca5_NVwGNgv5NH7Xi5FLsrzlz7MpgGjeP1yGaWs'), ('width', 9), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/4sJS-OTt40F45vB8rzRjfQ/91hwFFDB5Bi9PlnTlWfaho8TK2BInF4RXdp0zQsLeQ85TPbr2AdMQttmGbalwLge80dAIh92udHMCPCOn05-uw/maYfEh40UwmS3GMI-_k-zqw3entFtvzaoMAiJy80gWU'), ('width', 250), ('height', 981)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/rQgGqJfdGzM13EuL135FVQ/PrIxpUzUMka4M5WxtmPiHyouuhlaY2emWLYb_gPQGRJvP9ztMMLEi7S9pnl4yygiy6EfQc7SMUeaUO0zhuRdsA/HQxmsVRHg-5jcdOdm4xtpHxAu5-zay8b2ARDSWATnEU'), ('width', 3000), ('height', 3000)]))]))])]",https://qtwork.tudelft.nl/~mtiggelman/modules/rf/s5i.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/QuTech/S5i.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.QuTech.html#module-qcodes_contrib_drivers.drivers.QuTech.S5i,,,,,"from qcodes.instrument.base import Instrument
from qcodes.utils.validators import Bool, Numbers

try:
    from spirack import S5i_module
except ImportError:
    raise ImportError(('The S5i_module class could not be found. '
                       'Try installing it using pip install spirack'))


class S5i(Instrument):
    """"""
    Qcodes driver for the S5i RF generator SPI-rack module.

    Args:
        name (str): name of the instrument.
        spi_rack (SPI_rack): instance of the SPI_rack class as defined in
            the spirack package. This class manages communication with the
            individual modules.
        module (int): module number as set on the hardware.
        frequency (float): RF frequency at startup, default is 41 MHz.
        enable_output (bool): Switch device output on or off, default is True.
        output_level (int): RF output level in dBm, default is 0 dBm.
    """"""

    def __init__(self, name, spi_rack, module, frequency=41e6,
                 enable_output=True, output_level=0, **kwargs):
        super().__init__(name, **kwargs)

        self.s5i = S5i_module(spi_rack, module, frequency=frequency,
                              enable_output=enable_output,
                              output_level=output_level)

        self.add_parameter('output_enabled',
                           label='RF output enabled',
                           initial_value=enable_output,
                           set_cmd=self.s5i.enable_output_soft,
                           vals=Bool(),
                           docstring='Switches output on/off')

        self.add_parameter('frequency_stepsize',
                           label='Frequency stepsize',
                           get_cmd=self._get_stepsize,
                           set_cmd=self.s5i.set_stepsize,
                           unit='Hz',
                           vals=Numbers(),
                           docstring='Set the optimal frequency stepsize for '
                                     'a minimal phase noise')

        self.add_parameter('frequency',
                           label='Frequency',
                           initial_value=frequency,
                           get_cmd=self._get_rf_frequency,
                           set_cmd=self.s5i.set_frequency,
                           unit='Hz',
                           vals=Numbers(40e6, 4e9),
                           docstring='Set RF frequency')

        self.add_parameter('power',
                           label='Output Power',
                           initial_value=output_level,
                           set_cmd=self.s5i.set_output_power,
                           unit='dBm',
                           vals=Numbers(-14, 20),
                           docstring='Set output power')

    def optimize_for_frequency(self):
        """"""
        This method finds the optimum stepsize for the set frequency.

        The stepsize affects the phase noise of the instrument. The smaller the
        stepsize, the greater is the phase noise. So this method sets the
        stepsize as large as possible for the current reference frequency.

        """"""
        stepsize = self.s5i.get_optimal_stepsize(self.s5i.rf_frequency)
        self.s5i.set_stepsize(stepsize)

    def _get_stepsize(self):
        return self.s5i.stepsize

    def _get_rf_frequency(self):
        return self.s5i.rf_frequency
"
354,230.0,UK,"The Scientific Grade, 1024 x 127 deep depletion spectroscopy CCD camera is ideally suited to rapid analysis, multi-channel and low-light applications including fluorescence and Raman spectroscopy.",DU 401,80.0,"Leaders In The Development & Manufacture of Cameras, Microscopy and Spectroscopy Systems.
",Qcodes Community,Andor,"[OrderedDict([('id', 'att2wclSxDYBZ5XdP'), ('width', 400), ('height', 300), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W-Bkxhigu7k_aJjKjIYK-g/J8_OPLsu7y28nkzDpOEPW32LWOUcg9_QanVKntH3oPdwnmq4HROYITx8x1du0utNzRW4lIZMy5nlGrc80tm5bg/6GWyfPhlB50c6sZ4pOf8wSwD-9XqaCEwRUzB8dHFr8w'), ('filename', '3672.jpg'), ('size', 29221), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W_LUYypurv0P1EIGvsMMOg/mj_MvTWhxuS6kztywCJVQ0ArFyTJa-LeKkpNgH8kyHQgN5Orw0rxK4suECX0Aa3zxb8ZEqwUmC0qI76RSooyfA/DiEO32ihLRfyIH0_ttwOdlh0oRljyXmZ9_UNEWkGW0k'), ('width', 48), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/94wxu4ixCf5B3zFTw2szqA/WW_EjhgF3Lf8kMiLI_hegsiumOGVVzUQYNRx9bGOisQWLj1NMCi5rNOU-qhRFhFWkJEZ5naC4VO49QHAgvZTyA/IU-30VoUWpyJ50H7a3RJ2knjr1H865R2RsSwcwFT6-k'), ('width', 400), ('height', 300)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Smhksd0ebSkbPEWD3d0lag/GhXcKFryJcxVVugFiFY_b4elNKXrYwBkNH5Ft0arUYpHMtsp-lBGP67JsIqhoVSssuqwD2J7QTE40ndiY820Vw/MlESOkiMZR728vvpvb8M9qA-FbLvdoNomfbfjPClRUU'), ('width', 3000), ('height', 3000)]))]))])]",https://andor.oxinst.com/,Write a Python script that uses Qcodes Community to connect to a IDUS 401 CCD Spectrometers,"https://www.horiba.com/int/scientific/technologies/detectors/what-is-a-ccd-detector/#:~:text=A%20CCD%20or%20Charge%20Coupled,visible%20and%20near%2Dinfra%20light.",['Spectrometers'],A CCD or Charge Coupled Device is a highly sensitive photon detector.,IDUS 401 CCD,https://andor.oxinst.com/assets/uploads/products/andor/documents/andor-idus-401-specifications.pdf,"[OrderedDict([('id', 'att2wAStG9m5mVbNZ'), ('width', 1000), ('height', 866), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/3Nx-IXkXInaS_h8RX94CDg/NpLfGt42RPVWe4U0kI5Ij0Oaeig5sghITf0Yp9zHfl94OfZwcGqBTwbip50Dnjlz1vyGoBuxBjJWDR0n1ZpFXIHT7t5ZU9b---s7P4Pn-WE/EAWiPRQAAZwFWX9EmTbrgvG6uX1L4iNVtZ3MiQ311rI'), ('filename', 'idus-401-product.png'), ('size', 645710), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/O-s3MjkqO8EpvHVPOYSlxw/TBzcPy0OLMSSoVYGtRAPUBe60DgIAvdzfc5perfX_mLgAWPdeOLSSBza51qa0VFCfB1AVaJX_7aM_aqcvoQuew/nO3ZO3WVgu5Yl8ivi7PejRDmZayTkaHbl2z8JYnCzeI'), ('width', 42), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/JazD0qqG0gKe4MC_pxdjMw/8mSsVqxh1UFOkk2YaOpqKqVoVV_ATIYl-gVCDkMFLHGPrcuWucuBHqOXlrYyJ7rpmsZoFvKvjQrdFGYquDraEg/-xrQtN_AZNs_gNsFsrxHE2qFXlhmxj_s2dFngNG0Tl0'), ('width', 591), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/TNS1REoktWAECmTR_Hi5Mw/lYgqN5ZzfYLP0TPb5F319YxpkU5L_0PTWiMKuGAbD5ZidV_ifih5_YWAbAykYFrS2fijjTgL2BQ3OmeWr2_eLg/tSm7w-t31rAUcOGXpJaiHzLDBFe7E8l-YC-d2-XXeeY'), ('width', 3000), ('height', 3000)]))]))])]",https://andor.oxinst.com/products/idus-spectroscopy-cameras/idus-401,https://gitlab.physik.uni-muenchen.de/cs/psf_measurement_scripts/-/blob/master/andor.py,https://gitlab.physik.uni-muenchen.de/cs/psf_measurement_scripts/-/blob/master/andor.py,,,,,
355,2500.0,"Munich, Germany","2 or 3 channels with max. 188 W total output power.
Maximum output voltage of 32 V per channel.
Maximum output power per channel: 80 W.
Maximum output current per channel: 5 A.
Intuitive, price-transparent online product configurator.",HMP 2030,488.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,,"[OrderedDict([('id', 'attPXdbudcTsNYYUG'), ('width', 300), ('height', 300), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/vbdIfG9Haex-Ii85jTeDqA/sCk5RXJ2Nx2xDXiKQnsFWJVtce__f3ACSdx7p_ZfnIz5tkV-GVeFRRj2z1JxjTMJG3o9EDmDk608Sb3LIhF1ugj4m8nWHXpWfcAXsf5mOjc/ALtJuYjAdT7OSI-g80CX07SjRHa_VBowWVCYL5dCmxQ'), ('filename', 'HMP2030_04-875-.jpg'), ('size', 16316), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tJ3QlIfmpVaDym12_r46dg/XjZMh0kkTpzXD3Re8KAVpyesn69pwXo_gaUpIj89pCHfhlbz9q0WRXuEspos3ma188pctqGTEfhJTFjU2yiWBg/LD2fuTG0XYJanFS--1Z4-aMG0Lnv0iQ4byYiRXQ_GjU'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2fsun7ee0VvhJ7UOWN74PA/zIMQ4_oS8oVh9F_o_7ZyrkBigEAsD0_ZVvDJ5EMgwkOyEDfiiY7juw7Ku8p8rWjKeDaD8GxOo0GUs90BN6wtmw/OUIWN-elysL78s7vfCyg3B7VBsojR40DJgFRQtX-BM0'), ('width', 300), ('height', 300)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KmFRo2Zm4yVNSX-XkiYREg/lx4yp-0GirTJP__yrLAzYter9htA68yJFELoyRYnjrPxloom9qssxoCfz09w7EN-gS3TRo8GTob6J9awuPmLhQ/xBhIMtwImneNjlqZ20hK6WcUKyTjty8JaUMRecmK43k'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/products/test-and-measurement/dc-power-supplies/rs-hmp2000-power-supply-series_63493-43468.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMP2030.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030,1796.43,,,,"from .private.HMP import _RohdeSchwarzHMP


class RohdeSchwarzHMP4040(_RohdeSchwarzHMP):
    """"""
    This is the qcodes driver for the Rohde & Schwarz HMP2030 Power Supply
    """"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, model_no=2030, **kwargs)"
362,5.0,Taiwan,"IP9258 is a web controller which can be easily used in the industry field
",IP Power 9258 S,102.0,"**Aviosys** IP POWER is a remote power management device that allows you to control power on/off and monitor power status of connected devices
",Qcodes Community,Aviosys,"[OrderedDict([('id', 'att3z1eq8Rv7vZ3tM'), ('width', 300), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Oy-zrKollLbT6dziER0pEg/QMWjHWuWdGG0HQy8ZI0vcBjiqCFpFHkA14tMm0H0PkxUUPxaRm78SZ6joyYcq7GiecAsIE2_4N9vRhSeT6D8ICIX9Td21uzY9qA0jo8bMvI/tb96flXTAHGly0HgAj7FcP4XwsIxjSzAXotDMGAlynI'), ('filename', 'aviosys_2.png'), ('size', 7294), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Tx3uUirEHWfxsZStirz_6g/imMDVRZGAI6sthCQzLY6mm-hZ9_uXUEHn2u33b-wn5db47SVWNgBGS_AFMhZXKPLAMv_fmlSr-4Re5mKpzzf8Q/YM3IYiqFDVCl65in57sdYWkovJjZ1UDkJghnfw4w-gY'), ('width', 54), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ntgrgr-YSXCEPS2nL9HWeQ/4GWdy0CnsjPOFmDEMPRaONbWHk_N9sAIRE1rAVPYI_zZulTB3DnDXLu-kFjgKOoOPxR-3Js0geqOEz7UO9O41w/z2Nand22YI2DLVlpTPEn8Pp4pn9oW9iV9vmSyaBf-Ps'), ('width', 300), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/PB4cidBo8YT4-mv-W7mrCg/cDjjNPEMmJROJNYwNImkSKtDe2MywNbvkxj8oW1MsjAJ3XzstH3hefymyN1Qhs0_IayBTdJGTSr2rm7rC2AqJA/x1sqhu217FKSlcs8Sx3s48VG6geDg1TjpFmIlAGEtqk'), ('width', 3000), ('height', 3000)]))]))])]",https://www.aviosys.com/,Write a Python script that uses Qcodes Community to connect to a IP Power 9258 S Power Supplies,https://en.wikipedia.org/wiki/Network_switch,['Power Supplies'],"Power Supply for Super conducting Application
",IP Power 9258 S,https://www.aviosys.com/products/downloads/manuals/power/9258S-T-SP-TP_manual.pdf,"[OrderedDict([('id', 'att0zclj7IIoSZuYP'), ('width', 640), ('height', 391), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/aEpsK9cTNGgbthGM6EtFeg/u_hSf5QpWIEGEAtaeT1M9Hy2qlV9XUxI2pRGtXic_mfTdl4hDor1arWStUW_SVAn2Do_0q3UsOxn9aBMfze_Ju-pdnAnkKGY8pmlggv9_ps/05oqPZ0wO0cyvAyxyHZcvpJVDaPh4vck3IyBB-s0CPo'), ('filename', '9258T-PING.png'), ('size', 282935), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Y1iKm_rpr5-TO7zagbi94g/zHiHtbCKY5rACh20NGZaTUWUNKA4WknX2TsoKCiqU3CAkkQzm0a33UUnQR9ZIjFHtHzLwEIR5QJx-0rnH3E21Q/fWB8hZhXJDT-AB91vhtSXZUPGSf1YrSgSdyVNXtMMZE'), ('width', 59), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/IDOH5U8plmvlzMX9fGG6Jw/ih69ilQv2yNIC-9XZjA4bUTPDMPRf_g9Twta-CO9JiB3WCTmRB0o50OnfPTWp9UtdijivTtNkyFF9GSjAx-TMw/42nuTY-mPnoJZEHK2dMaaSz-MGEeUWmzcn0DibjhIy8'), ('width', 640), ('height', 391)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/PUBvAlajny5Xd5NMU4DHaQ/2IscIAWYkpuButXwNmJqGHkzTv6-6ZlMNQKw2C3J_YZnES7Al3X39rwPtaEGhcGI8TtImy-ziDogLjJhEzjkiw/03gmKqsqwEdn5cuzFSLtWH1yjr9ZRT-9bLQnk2nEpEY'), ('width', 3000), ('height', 3000)]))]))])]",https://www.aviosys.com/products/9258.php,https://github.com/pejackson/ip9258,https://github.com/pejackson/ip9258/blob/master/README.md,335.0,,True,,
364,1657.0,"Austin, Texas, USA","26.5 GHz, 50 Ω, 6x1 (SP6T) Terminated PXI RF Multiplexer Switch Module—The PXI‑2597 is ideal for passing high-order harmonics from PXI RF Signal Upconverter modules or routing multiple sources to PXI RF Signal Downconverter modules. The internal termination of the PXI‑2597 helps prevent high-power reflections that arise from open channels on the module. You can use the PXI‑2597 onboard relay count tracking feature to predict relay lifetime and reduce unexpected system downtime. 

",Pxie 2597,379.0,"A producer of automated test equipment and virtual instrumentation software. Common applications include data acquisition, instrument control and machine vision. 
",Qcodes Community,National Instruments,"[OrderedDict([('id', 'attXAVi8mGWUwkEk7'), ('width', 960), ('height', 541), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/buqaMhTGWSsLDsPp_ibFaQ/De8HjydUx3EOCX_p1f2SSDo9dGCp11ixF2oTBsR7CR6yGYXYE_XR4FWNSn3MqZ20E_25rrfDoA8lE2RfAkuP7Q/mRTYDKwu5YneGKzi9In5jj7Q0Jc2rufjx4bGgEHckdg'), ('filename', '0x0.webp'), ('size', 3600), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Pv0WHzZMcUe18sDTIk-6mg/jr5uhXQ9KZen3aLRHNCAvPFX560knZg5OC3GuZHWWZUlwbT5OU_POa-kuo1PD5qEWl5eEs1dnPwCnMthpfYMxWBP2ALfrZR8zjpqzA1TrFQ/MbyuehtfHbxyhnrazXO_aVtHoiJ-YxS2aY_z_AlOlI4'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/H2ohCz7JKiucuuY1yKqARA/PC2AnJ8K6bupw239v_vXHNw2Bw02LZLYgFDZExIJ_IYgHKZF3aKphU6VgFnEXdi_JSVfBWTNow1CPi7pJroA801RTFAurSQsjnCQd46i1tI/iQUX1GjeerVvwDnChxusHAS0iRltSIlZ9OIhT6aWeyI'), ('width', 909), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FbZiry0wuZILUwoQONwY7w/TPig8INn4HxQab3cUodGEZ-LmxYwwAgZ-P2q9uDSN0Ldk6LIqGUZwq8U0ONnHe4UeVnJel-tkU0whlEnSfHvMB2WbUcP1DTtJGt-UvawHkI/mGxqe-xjeAIUQCHVOUg5_cDcuiJu0KrjzJiiqkUQRMI'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca.html,Write a Python script that uses Qcodes Community to connect to a NI PXIe-2597 Multiplexer Switch Modules,https://www.ni.com/en-ca/shop/hardware/products/pxi-multiplexer-switch-module.html,['Multiplexer Switch Modules'],"PXI Multiplexer Switch Modules are ideal for high-channel-count applications that need to connect measurement or signal generation instruments to various test points on devices or units under test (DUTs or UUTs). PXI Multiplexer Switch Modules use a variety of relay types, including electromechanical armature relays, reed relays,  field-effect transistor (FET) relays, and solid-state relays, each with their own benefits, allowing you to choose a multiplexer that fits your requirements. To program the switches, you can use the IVI-compliant NI-SWITCH driver software, complete with help documentation, example programs, and a soft front panel application for interactive control of switches. For intelligent management of complex switch systems, NI Switch Executive provides additional software tools to help you design, build, and deploy your switching system.",NI PXIe-2597,,"[OrderedDict([('id', 'attbpux2WyKJM6ROw'), ('width', 534), ('height', 600), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/HPOQky0ouNWzo8qTsrTkoA/KW10E-QWfPfjjBzhAKBUK2PX7QN7vsFxbe-GaqFiy7nOsrYGiGT326Apt48bbJvkqw2U8Hx1vmLiF2KuOpqAHF38NxA9GBNwmw3FqE_ZJas/d7UO6u_98kFUMZaI6Pqqz7-0rZYXymZoNKznhRDeGk4'), ('filename', 'NI_PXI2597_Mux_View1.jpg'), ('size', 64299), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UjuF6JUXCSHKEUKnWhHKRQ/PoYm5J1QFZHG4wfFbhx2vpPwIyH4K1qtyEyCWt3t0NhVcI335Yx-LgT5ELa9ABHBWyE_CnfGwDhpH7lAK2fY2A/xuJDHJCqDA0JmmF2oT3wjng9hD7g4wnz9yMCPeFIKHM'), ('width', 32), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/JHFlroO4odZBSB3tNZDE-w/5D1pIMU5_Rn7IPKXuKF70HUdCrgHSdyjylI1YBgr2CwsLEHexaLhihdaM2U7-BiLjq12uyAGlSj7IJr1xEpbnw/glzCbKUNAeFzMuWdyLom50GMjLsf31sUR8AqQ-6GLvo'), ('width', 512), ('height', 575)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9qV0d9NgRbm-fHc63W-3hw/xWXvB8UouMOfvCnIMgk6FbQJ8_kQFWBcrsmyAgPyaDAwY9-OG0mSJVyZMrnk06A4Viy1dNu3evdItTqYU8FPqQ/yp-ZxpuuUnV7YF9sE4mAxs7QqAz3VCHkBXfjw747fJE'), ('width', 3000), ('height', 3000)]))]))])]",https://www.ni.com/en-ca/support/model.pxi-2597.html,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/NationalInstruments/PXIe_2597.py,https://qcodes.github.io/Qcodes_contrib_drivers/examples/NationalInstruments_PXIe_2597.html,9655.0,,,https://nubilight.nubicom.co.kr/upload/datasheet/374209e.pdf,"from typing import Optional, Dict
from qcodes.utils.validators import Enum
from .Switch import NI_Switch


class NI_PXIe_2597(NI_Switch):
    r""""""
    QCoDeS driver for National Instruments RF switch PXIe-2597. The device
    connects the common ""com"" port to any of the 6 other ports, labeled
    ""ch1""...""ch6"" by default. Use the ``name_mapping`` argument to alias the
    channel names.

    Args:
        name: Qcodes name for this instrument
        resource: Network address or VISA alias for the instrument.
        name_mapping: Optional mapping from default channel names to custom
            aliases
        reset_device: whether to reset the device on initialization
    """"""
    def __init__(self, name: str, resource: str,
                 name_mapping: Optional[Dict[str, str]] = None,
                 reset_device: bool = False, **kwargs):

        if name_mapping is not None:
            # don't mutate external dict
            name_mapping = name_mapping.copy()
            name_mapping[""com""] = ""com""

        super().__init__(name, resource, name_mapping, reset_device, **kwargs)

        valid_choices = [ch.short_name for ch in self.channels]
        valid_choices.remove(""com"")

        self.add_parameter(name=""channel"",
                           get_cmd=self._get_channel,
                           set_cmd=self._set_channel,
                           vals=Enum(*tuple(valid_choices + [None])),
                           post_delay=1,
                           docstring='Name of the channel where the common '
                                     '""com"" port is connected to',
                           label=f""{self.short_name} active channel"")

    def _set_channel(self, name_to_connect: Optional[str]) -> None:
        if name_to_connect is None:
            self.channels.com.disconnect_from_all()
        else:
            ch = getattr(self.channels, name_to_connect)
            self.channels.com.connect_to(ch)

    def _get_channel(self) -> Optional[str]:
        com_list = self.channels.com.connection_list
        if len(com_list) == 0:
            return None
        elif len(com_list) == 1:
            return com_list[0].short_name
        else:
            raise RuntimeError(""this shouldn't happen."")
"
365,2313.0,Taiwan,"Peripheral Component Interconnect Express (PCIe or PCI-E) is a serial expansion bus standard for connecting a computer to one or more peripheral devices.

PCIE-1751 is a 48-bit digital I/O card for the PCI Express bus. Its 48 channels are divided into six 8-bit I/O ports and users can configure each 4-channel per port (nibble) as input or output via software. PCIE-1751 also provides three 32-bit counters.",PCIE 1751,0.0,"Advantech is a leader in providing trusted innovative embedded and automation products and solutions.
",Qcodes Community,Advantech,"[OrderedDict([('id', 'attUrNN03NsSIClyd'), ('width', 493), ('height', 102), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/r7F0OGtkXBBEUdBIXy1KPA/tAqckbWtpZfEiFfahrHmAGPBJYqLM9Y7S5Lj8EjUl1oACR0Nq-2XnYWRxvE4lXztdBCI9Z2tk-1ykjDFnuaEkiVUKp-qNJHZk1hAiLQW2kQ/Xex0v4hC1vfJSckPGyjJ2bT4pUD3eFf5YnGSQBNogA4'), ('filename', 'image.png'), ('size', 9821), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/PrloErtz3aBBMquyeeq14A/EwvnsAAvaluD_XuJikeEgUxlyEl5rb1tx5BGZxhmIU3T6udMl_eohvFrb93fHkbV3malWIxZbM_nzPLdZYzESg/S-Wu0CqrZuaA6FlRkRGIroFl5B2jftDfdhIKiS1rVSI'), ('width', 174), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tCNyu57uUiH9S97oLq8SXg/4EqU6XDN_KixJu3OloAZN5s8mmDuJyrGdYLEvBFrNVEmmnT05ow_C907FLexhP9vHzFepnEV8AqQMExjHpLpgA/VMy08DyW9T5ttLOm43ImiNXKvDd4aSWdtBke0RkKdFI'), ('width', 493), ('height', 102)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/X-ar85IbujQ5mAxXxFryAA/aglf3aJBYjHVUf47ABbsopELJD6wJELqbyF5lOzmsVQtPL6ZNGPIY0Gp1KOdrJUcey_HLGXqO7N1okr-iMJ1GA/ZAL6KTmN6-05wKuUGboTPr5Xejk7kTxTizJLCxQ8fNE'), ('width', 3000), ('height', 3000)]))]))])]",https://www.advantech.com/en,Write a Python script that uses Qcodes Community to connect to a PCIE 1751 DAQ boards,https://en.wikipedia.org/wiki/Data_acquisition,['DAQ boards'],Data acquisition is the process of sampling signals that measure real-world physical conditions and converting the resulting samples into digital numeric values that can be manipulated by a computer.,PCIE 1751,https://www.messcomp.com/manual/42531113.pdf,"[OrderedDict([('id', 'atttn17bBvVxljItN'), ('width', 440), ('height', 440), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/l_LwDywg8JTVAtVNYUDz3g/75fH-UXBpOOahdRX_Lo2n6FwucMKzxlo5yxi4iyRXFlofgBFjc3VT94bKHecXSwyiD4ZZMZC-TokuAE5qk3_kWfF6SGu3aEVTar03GUmbxAkMukFJTL9aBeIyauSoL2E/krgUelp--BY1qzgnLobNXdn8DyXosj7iAOkw_qIKUL0'), ('filename', 'PCIE-1751_03_B20131007101209.png'), ('size', 184733), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/VlUlWAmZ5BCZBNt55NmgtQ/9SvdmlCkjve84ZwD85j55ydY4P3j3OmTqnCJhX_ekyv_PQca4dunFoGZB_A3i0oHW_lSBmPpDe0hR1VAxs8MUw/T2Q0OZmq3szuxcysZ5_skxLV-64To6z4pKXImNFO-Z8'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/p3xi42bHcQNMCFS4-dJGrw/2jZWZmyBDTOoqg0sMxyEpG2swIYV_h7sya87U06epCBplApQKT05MwoSPkbKIncpZKooSWmcl0rX-1ri5oXAgw/GiMrD9TAAAxqlgbsu5FRwvFyYKXvb0FSCCTUKY7fais'), ('width', 440), ('height', 440)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/NSZc5ANy8_4DiYYJic48FQ/1cjg2Mj1Rht0vZ9eXy1GlCMwZ3298v3i8LznDRJwGJ5qHehztyd0pLQc7HVFs_xVKtugJZ9Bjv4bggNNhVHjpQ/jSVEGpsi0YQ97jfn7GEiI83u9NHKBNxc-d9mj0W4MgM'), ('width', 3000), ('height', 3000)]))]))])]",https://www.advantech.com/en/products/1-2mlkco/pcie-1751/mod_8d9d9d1d-c24f-47ca-9d65-4b934092714d,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Advantech/PCIE_1751.py,https://qcodes.github.io/Qcodes_contrib_drivers/_modules/qcodes_contrib_drivers/drivers/Advantech/PCIE_1751.html,166.6,"To connect to a PCIE-1751 DAQ (Data Acquisition) board using the QCoDeS community library in Python, you need to install the necessary dependencies. Run the following command to install QCoDeS community:

\`\`\`shell
pip install qcodes-community
\`\`\`

Once QCoDeS community is installed, you can use it to connect to your PCIE-1751 DAQ board. Here's an example script that demonstrates how to connect to the board and read an analog input channel:

\`\`\`python
import qcodes as qc
from qcodes\_contrib\_drivers.drivers.Advantech.PCIe1751 import PCIe1751

\# Create a connection to the PCIE-1751 DAQ board
daq\_board = PCIe1751(""daq\_board"", ""PCIe1751"") # Replace with your specific DAQ board identifier

\# Set up the analog input channel
channel\_name = ""ai0"" # Replace with the desired analog input channel name
voltage\_range = ""AD\_B\_10\_V"" # Set the voltage range of the channel

daq\_board.add\_analog\_input\_channel(channel\_name, voltage\_range)

\# Read the analog input value
measurement = daq\_board.channels[channel\_name].get() # Read the value of the analog input channel
print(""Analog input value:"", measurement)

\# Close the connection to the DAQ board
daq\_board.close()
\`\`\`

In the example script, we import the necessary modules and instantiate an instance of the \`PCIe1751\` class, which represents the PCIE-1751 DAQ board. Make sure to replace \`""PCIe1751""\` with the specific identifier for your PCIE-1751 board.

Next, we set up the analog input channel using the \`add\_analog\_input\_channel()\` method. Replace \`""ai0""\` with the desired analog input channel name on your DAQ board. Adjust the \`voltage\_range\` parameter to match the voltage range supported by your specific DAQ board and the signals you expect to measure. The \`AD\_B\_10\_V\` range corresponds to a ±10V input voltage range.

We then read the value of the analog input channel using the \`get()\` method of the corresponding channel. Replace \`""ai0""\` with the channel name you specified earlier. The \`measurement\` variable will contain the value read from the channel.

Finally, we close the connection to the DAQ board.

Please note that the example script assumes you have the appropriate driver installed for your PCIE-1751 DAQ board (in this case, the \`PCIe1751\` driver from the QCoDeS community). You may need to install additional dependencies or use a different driver depending on your specific DAQ board model. Refer to the QCoDeS community documentation and the instrument driver documentation for more details on connecting to your specific DAQ board.
",,,"import cffi
import collections
from functools import partial
import logging
import os

from qcodes.instrument.base import Instrument
from qcodes.utils import validators as vals

log = logging.getLogger(__name__)


class DAQNaviException(Exception):
    """"""
    Exception raised if one of the Advantech's DAQNavi library's functions
    encounters an error.
    """"""


class DAQNaviWarning(Warning):
    """"""
    Warning raised if one of the Advantech's DAQNavi library's functions
    encounters a warning condition.
    """"""


class Advantech_PCIE_1751(Instrument):
    """"""
    Driver for DIO card from Advantech. The card has six 8255 PPI mode
    C DI/O ports, each containing 8 pins, that can be configured for either
    input or output in groups of four.

    The Advantech drivers have to be installed so that biodaq.dll can be
    accessed. This QCodes driver uses python's C foreign function interface
    cffi to call the necessary functions from the dynamically linked library.
    Automatically loads the declaration of the library from the
    _bdaqctrl.h file, that can be generated by running only the C preprocessor
    on the header included with Advantech drivers:

        gcc -D_BDAQ_C_INTERFACE -E bdaqctrl.h > _bdaqctrl.h

    Before running the above command, WIN32 and _WIN32 should be undefined at
    the start of the bdaqctrl.h and #include <stdlib.h> should be commented
    out.

    Current version of this driver implements only instant digital input and
    output. Buffered input and output, interrupts and counters are not
    implemented.

    Tested with driver version 3.1.10.0 and ddl version 3.1.12.1.
    """"""

    def __init__(self, name, device_description=""PCIE-1751,BID#0"", **kw):
        super().__init__(name, **kw)

        self.device_description = device_description

        # parse the header for function and structure declarations
        self.ffi = cffi.FFI()
        package_directory = os.path.dirname(os.path.abspath(__file__))
        header_file = os.path.join(package_directory, '_bdaqctrl.h')
        with open(header_file) as h:
            self.ffi.cdef(h.read())
        self.dll = self.ffi.dlopen(""biodaq.dll"")

        # create the digital input and output devices
        self.info = self.ffi.new(""DeviceInformation *"")
        self.info.Description = self.device_description
        self.info.DeviceNumber = -1
        self.info.DeviceMode = self.dll.ModeWriteWithReset
        self.info.ModuleIndex = 0

        self.di = self.dll.AdxInstantDiCtrlCreate()
        self.check(self.dll.InstantDiCtrl_setSelectedDevice(self.di, self.info))
        self.do = self.dll.AdxInstantDoCtrlCreate()
        self.check(self.dll.InstantDoCtrl_setSelectedDevice(self.do, self.info))

        # Create QCoDeS parameters
        for i in range(self.port_count()):
            self.add_parameter(
                'port{}_dir'.format(i),
                label='Port {} direction'.format(i),
                vals=vals.Enum(0x00, 0x0f, 0xf0, 0xff),
                get_cmd=partial(self._get_port_direction, i),
                set_cmd=partial(self._set_port_direction, i),
                docstring=""The direction (input or output) of the digital i/o ""
                          ""port nr {}. Possible values are\n""
                          ""    0x00 indicating that all pins of the port are ""
                          ""configured as inputs\n""
                          ""    0x0f indicating that pins 0 to 3 are configured ""
                          ""as outputs and pins 4 to 7 as inputs\n""
                          ""    0xf0 indicating that pins 0 to 3 are configured ""
                          ""as inputs and pins 4 to 7 as outputs\n""
                          ""    0xff indicating that all pins are configured as ""
                          ""outputs"".format(i))

        self.connect_message()

    def read_port(self, i, n=1):
        """"""
        Reads and returns the values of ports i, ..., i+n-1.
        For n=1 returns a single integer which encodes the 8 bit values,
        for n>1 returns a list of integers.
        """"""
        values = self.ffi.new('uint8[]', n)
        self.check(self.dll.InstantDiCtrl_ReadAny(self.di, i, n, values))
        if n == 1:
            return values[0]
        else:
            return list(values)

    def write_port(self, i, value):
        """"""
        Writes values to output ports. If value is an integer, writes its
        binary representation to the pins of port i. If value is a list of
        integers, writes the binary representations of their values to the pins
        of ports i, ..., i+len(value)-1 respectively.
        """"""
        if isinstance(value, collections.abc.Iterable):
            vallist = list(value)
        else:
            vallist = [value]
        data = self.ffi.new('uint8[]', vallist)
        log.debug('PCIE-1751: Write({}, {}, {})'.format(i, len(vallist),
                                                        vallist))
        self.check(self.dll.InstantDoCtrl_WriteAny(self.do, i, len(vallist),
                                                   data))

    def read_pin(self, port, pin):
        """"""
        Reads and returns the value pin pin of port port.
        """"""
        data = self.ffi.new('uint8 *')
        self.check(self.dll.InstantDiCtrl_ReadBit(self.di, port, pin, data))
        return data[0]

    def write_pin(self, port, pin, value):
        """"""
        Sets pin pin of port port to 1 if value != 0, and to 0 otherwise.
        """"""
        self.check(self.dll.InstantDoCtrl_WriteBit(self.do, port, pin, value))

    def port_count(self):
        """"""
        Returns the number of ports on the device. Each port contains 8 input
        or output pins.
        """"""
        return self.dll.InstantDoCtrl_getPortCount(self.do)

    def check(self, errorcode):
        """"""
        Checks the errorcode and raises an Exception if error occurred.
        """"""
        if errorcode == self.dll.Success:
            return
        elif errorcode < 0xE0000000:
            message = self.ERRORMSG.get(errorcode, ""Undefined error code."")
            raise DAQNaviWarning(""DAQNavi warning {:#010X}: {}"".format(
                errorcode, message))
        else:
            message = self.ERRORMSG.get(errorcode, ""Undefined error code."")
            raise DAQNaviException(""DAQNavi error {:#010X}: {}"".format(
                errorcode, message))

    def close(self):
        self.dll.InstantDoCtrl_Dispose(self.do)
        self.dll.InstantDiCtrl_Dispose(self.di)
        super().close()

    def _get_port_direction(self, i):
        """"""
        Returns the direction of port i as a 8-bit number where for each bit,
        the value 0 means that the corresponding pin is set up as an input and
        the value 1 means that it is set up as an output.
        """"""
        pcoll = self.dll.InstantDoCtrl_getPortDirection(self.do)
        port_objs = self._ICollection_to_list(pcoll, 'PortDirection *')
        return self.dll.PortDirection_getDirection(port_objs[i])

    def _set_port_direction(self, i, direction):
        """"""
        i is the number of the port to configure
        direction has to be one of the following:
            0x00 for all pins configured as inputs
            0x0f for the 4 lower pins configured as outputs and 4 higher pins
                 as inputs
            0xf0 for the 4 lower pins configured as inputs and 4 higher pins as
                 outputs
            0xff for all pins configured as outputs
        """"""
        pcoll = self.dll.InstantDoCtrl_getPortDirection(self.do)
        port_objs = self._ICollection_to_list(pcoll, 'PortDirection *')
        self.check(self.dll.PortDirection_setDirection(port_objs[i], direction))

    def _ICollection_to_list(self, collection, ctype='void *'):
        """"""
        collection is a cffi object of type 'ICollection *'
        ctype is the data type of the collection members
        """"""
        n = self.dll.ICollection_getCount(collection)
        result = [None] * n
        for i in range(n):
            voidptr_i = self.dll.ICollection_getItem(collection, i)
            result[i] = self.ffi.cast(ctype, voidptr_i)
        return result

    def get_idn(self):
        return {'vendor': 'Advantech',
                'model': self.device_description.split(',')[0],
                'serial': '',
                'firmware': ''}

    ERRORMSG = {
        0x00000000: ""The operation is completed successfully."",
        0xA0000000: ""The interrupt resource is not available."",
        0xA0000001: ""The parameter is out of the range."",
        0xA0000002: ""The property value is out of range."",
        0xA0000003: ""The property value is not supported."",
        0xA0000004: ""The property value conflicts with the current state."",
        0xA0000005: ""The value range of all channels in a group should be ""
                    ""same, such as 4~20mA of PCI-1724."",
        0xE0000000: ""The handle is NULL or its type doesn't match the required ""
                    ""operation."",
        0xE0000001: ""The parameter value is out of range."",
        0xE0000002: ""The parameter value is not supported."",
        0xE0000003: ""The parameter value format is not the expected."",
        0xE0000004: ""Not enough memory is available to complete the operation."",
        0xE0000005: ""The data buffer is null."",
        0xE0000006: ""The data buffer is too small for the operation."",
        0xE0000007: ""The data length exceeded the limitation."",
        0xE0000008: ""The required function is not supported."",
        0xE0000009: ""The required event is not supported."",
        0xE000000A: ""The required property is not supported."",
        0xE000000B: ""The required property is read-only."",
        0xE000000C: ""The specified property value conflicts with the current ""
                    ""state."",
        0xE000000D: ""The specified property value is out of range."",
        0xE000000E: ""The specified property value is not supported."",
        0xE000000F: ""The handle hasn't own the privilege of the operation the ""
                    ""user wanted."",
        0xE0000010: ""The required privilege is not available because someone ""
                    ""else had own it."",
        0xE0000011: ""The driver of specified device was not found."",
        0xE0000012: ""The driver version of the specified device mismatched."",
        0xE0000013: ""The loaded driver count exceeded the limitation."",
        0xE0000014: ""The device is not opened."",
        0xE0000015: ""The required device does not exist."",
        0xE0000016: ""The required device is unrecognized by driver."",
        0xE0000017: ""The configuration data of the specified device is lost or ""
                    ""unavailable."",
        0xE0000018: ""The function is not initialized and can't be started."",
        0xE0000019: ""The function is busy."",
        0xE000001A: ""The interrupt resource is not available."",
        0xE000001B: ""The DMA channel is not available."",
        0xE000001C: ""Time out when reading/writing the device."",
        0xE000001D: ""The given signature does not match with the device ""
                    ""current one."",
        0xE000001E: ""The function cannot be executed while the buffered AI is ""
                    ""running."",
        0xE000001F: ""The value range is not available in single-ended mode."",
        0xE000FFFF: ""Undefined error."",
    }
"
373,2500.0,"Munich, Germany",The R&S SMR40 Signal Generator is designed as CW generator with pulse modulation capability with frequency coverage from 1 GHz up to 40 GHz. The lower limit can be expanded to 10 MHz by the optional Frequency Extension 0.01 GHz to 1 GHz  (option B11).,SMR 40,478.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} RF Signal Generator,https://en.wikipedia.org/wiki/Signal_generator,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well",,https://www.axiomtest.com/documents/models/Rohde%20&%20Schwarz%20SMR40%20Data%20Sheet.pdf,"[OrderedDict([('id', 'att6KDS5uA5PCNxIw'), ('width', 275), ('height', 80), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Eqq6OgE2hM5BkBPFstQlkg/MgG9rpddXqu_s0aZsPLSYJVUdPtLlDQag_Z_cZNEJ6diiq1xljODFyTWv2ulQWMlVuHur0_vXgX78ivIr1OSee6bLpeq0yh28qityaXBk3E/keH9MdhurVSM0MAI0be2CUNzhtexAGwkU-5w9cJ_hk4'), ('filename', 'thd_RS_SMR40.jpg'), ('size', 22958), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9F8Abs-x29uC1QlJ35ljRA/aH1cix8GlwNLqn39NZF7cGKMo3A1GOc3uXAbqoV0AFlxGJCY0GYryrvbT55UbgHL0f7Y21fFA8-R_ppKYM1s-g/fBEalXwMvt54qWbrTV3GhiZ4KqvLExdxLxtxMk4Y_cc'), ('width', 124), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7EU3Fwh-cbB3rw84vVk0vA/vTgxHjCfdbXCR4BCQjDEaxmwgyyE5UKaAVA8HxC3n8U8MpupOP_j79o7wWp-TXppUjq9M2LWAmarfbQQxHoroA/KfwSRwt4adEjAuqpmCbmeofvE-jV1owlbeQRzu2f5QA'), ('width', 275), ('height', 80)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/axutroBbansG7-08X_LrjA/ADgbIc6OdyW_68O_jhftBpTPPgLatfBZLl6Nb5NrJhjRrNFI2KRAzSD0vhz94-6lRJz_vDGVQ6b_LIozFBOeZA/DuZSQyINDVi0NpD3bnsFSyM6A9BVpsYo5cLonRhyqCE'), ('width', 3000), ('height', 3000)]))]))])]","https://www.axiomtest.com/Signal-Generators/Signal-Generators-Over-20-GHz,-Up-To-40-GHz/Rohde-_and_-Schwarz/SMR40/Signal-Generator,-40-GHz/#:~:text=Signal%20Generator%2C%2040%20GHz,-Signal%20Generators%20%3E%3E%20Signal&text=The%20R%26S%20SMR40%20Signal%20Generator,1%20GHz%20(option%20B11).",https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/SMR40.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40,,,,,"# Driver for microwave source RS_SMR40
#
# Written by Takafumi Fujita (t.fujita@tudelft.nl)
# This program is based on RS_SMR40.py in QTlab
#

import logging

from qcodes import VisaInstrument
from qcodes import validators as vals

log = logging.getLogger(__name__)

class RohdeSchwarz_SMR40(VisaInstrument):
    """"""
    This is the qcodes driver for the Rohde & Schwarz SMR40 signal generator
    Status: beta-version.

    Work still pending:
        - Add all parameters that are in the manual
        - Add test suite
        - See if there can be a common driver for RS mw sources from which
          different models inherit

    This driver does not contain all commands available for the SMR40 but
    only the ones most commonly used.

    """"""

    def __init__(self, name, address, verbose=1, reset=False, **kwargs):
        self.verbose = verbose
        log.debug(__name__ + ' : Initializing instrument')
        super().__init__(name, address, **kwargs)

        # TODO(TF): check what parser parameters can do
        #           check what 'tags=['sweep']' and 'types' do in qtlab
        #           fix format types
        self.add_parameter('frequency',
                           label='Frequency',
                           get_cmd=self.do_get_frequency,
                           set_cmd=self.do_set_frequency,
                           vals=vals.Numbers(10e6, 40e9),
                           unit='Hz')
        self.add_parameter('power',
                           label='Power',
                           get_cmd=self.do_get_power,
                           set_cmd=self.do_set_power,
                           vals=vals.Numbers(-30, 25),
                           unit='dBm')
        self.add_parameter('status',
                           get_cmd=self.do_get_status,
                           set_cmd=self.do_set_status,
                           vals=vals.Strings())

        # TODO(TF): check how to fix the get functions
        self.add_parameter('status_of_modulation',
                           get_cmd=self.do_get_status_of_modulation,
                           set_cmd=self.do_set_status_of_modulation,
                           vals=vals.Strings())
        self.add_parameter('status_of_ALC',
                           get_cmd=self.do_get_status_of_ALC,
                           set_cmd=self.do_set_status_of_ALC,
                           vals=vals.Strings())
        self.add_parameter('pulse_delay',
                           get_cmd=self.do_get_pulse_delay,
                           set_cmd=self.do_set_pulse_delay)

        # TODO(TF): check the way of defining this type of functions, where logging is added
        # self.add_function('reset')
        # self.add_function('get_all')

        if reset:
            self.reset()
        else:
            self.get_all()

        self.connect_message()

    # Functions
    def reset(self):
        """"""Resets the instrument to default values.

        Args:
            None

        Output:
            None

        """"""
        log.info(__name__ + ' : Resetting instrument')
        self.write('*RST')
        # TODO: make it printable
        self.get_all()

    def get_all(self):
        """"""Reads all implemented parameters from the instrument, and updates
        the wrapper.

        Args:
            None

        Output:
            None

        """"""
        log.info(__name__ + ' : reading all settings from instrument')
        # TODO: make it printable
        self.frequency.get()
        self.power.get()
        self.status.get()

    # Communication functions
    def do_get_frequency(self):
        """"""Get frequency from device.

        Args:
            None

        Output:
            frequency (float) : frequency in Hz

        """"""
        log.debug(__name__ + ' : reading frequency from instrument')
        return float(self.ask('SOUR:FREQ?'))

    def do_set_frequency(self, frequency):
        """"""Set frequency of device.

        Args:
            frequency (float) : frequency in Hz

        Output:
            None

        """"""
        log.debug(__name__ + ' : setting frequency to %s GHz' % frequency)
        self.write('SOUR:FREQ %e' % frequency)

    def do_get_power(self):
        """"""Get output power from device.

        Args:
            None

        Output:
            power (float) : output power in dBm

        """"""
        log.debug(__name__ + ' : reading power from instrument')
        return float(self.ask('SOUR:POW?'))

    def do_set_power(self, power):
        """"""Set output power of device.

        Args:
            power (float) : output power in dBm

        Output:
            None

        """"""
        log.debug(__name__ + ' : setting power to %s dBm' % power)
        self.write('SOUR:POW %e' % power)

    def do_get_status(self):
        """"""Get status from instrument.

        Args:
            None

        Output:
            status (str) : 'on or 'off'

        """"""
        log.debug(__name__ + ' : reading status from instrument')
        stat = self.ask(':OUTP:STAT?')

        # TODO: fix
        if stat == '1\n':
            return 'ON'
        elif stat == '0\n':
            return 'OFF'
        else:
            raise ValueError('Output status not specified : %s' % stat)

    def do_set_status(self, status):
        """"""Set status of instrument.

        Args:
            status (str) : 'on or 'off'

        Output:
            None

        """"""
        log.debug(__name__ + ' : setting status to ""%s""' % status)
        if status.upper() in ('ON', 'OFF'):
            status = status.upper()
        else:
            raise ValueError('set_status(): can only set on or off')
        self.write(':OUTP:STAT %s' % status)

    def do_get_status_of_modulation(self):
        """"""Get status from instrument.

        Args:
            None

        Output:
            status (str) : 'on' or 'off'

        """"""
        log.debug(__name__ + ' : reading status from instrument')
        stat = self.ask(':SOUR:PULM:STAT?')

        # TODO: fix
        # if stat == '1':
        # return 'ON'
        # elif stat == '0':
        # return 'OFF'
        if stat == '1\n':
            return 'ON'
        elif stat == '0\n':
            return 'OFF'
        else:
            raise ValueError('Output status not specified : %s' % stat)

    def do_set_status_of_modulation(self, status):
        """"""Set status of modulation.

        Args:
            status (str) : 'on' or 'off'

        Output:
            None

        """"""
        log.debug(__name__ + ' : setting status to ""%s""' % status)
        if status.upper() in ('ON', 'OFF'):
            status = status.upper()
        else:
            raise ValueError('set_status(): can only set on or off')
        self.write(':SOUR:PULM:STAT %s' % status)

    def do_get_status_of_ALC(self):
        """"""Get status from instrument.

        Args:
            None

        Output:
            status (str) : 'on or 'off'

        """"""
        log.debug(__name__ + ' : reading ALC status from instrument')
        stat = self.ask(':SOUR:POW:ALC?')

        # TODO: fix
        # if stat == '1':
        # return 'ON'
        # elif stat == '0':
        # return 'OFF'
        if stat == '1\n':
            return 'ON'
        elif stat == '0\n':
            return 'OFF'
        else:
            raise ValueError('Output status not specified : %s' % stat)

    def do_set_status_of_ALC(self, status):
        """"""Set status of instrument.

        Args:
            status (str) : 'on or 'off'

        Output:
            None

        """"""
        log.debug(__name__ + ' : setting ALC status to ""%s""' % status)
        if status.upper() in ('ON', 'OFF'):
            status = status.upper()
        else:
            raise ValueError('set_status(): can only set on or off')
        self.write(':SOUR:POW:ALC %s' % status)

    def do_get_pulse_delay(self):
        """"""Get output power from device.

        Args:
            None

        Output:
            power (float) : output power in dBm

        """"""
        log.debug(__name__ + ' : reading pulse delay from instrument')
        return float(self.ask('SOUR:PULS:DEL?'))

    def do_set_pulse_delay(self, delay):
        """"""Set output power of device.

        Args:
            power (float) : output power in dBm

        Output:
            None

        """"""
        log.debug(
            __name__ + ' : setting pulse delay to %s seconds' % str(delay))
        self.write('SOUR:PULS:DEL 1us')

    # Shortcuts
    def off(self):
        """"""Set status to 'off'.

        Args:
            None

        Output:
            None

        """"""
        self.status.set('off')

    def on(self):
        """"""Set status to 'on'.

        Args:
            None

        Output:
            None

        """"""
        self.status.set('on')

    def off_modulation(self):
        """"""Set status of modulation to 'off'.

        Args:
            None

        Output:
            None

        """"""
        self.set_status_of_modulation('off')

    def on_modulation(self):
        """"""Set status of modulation to 'on'.

        Args:
            None

        Output:
            None

        """"""
        self.set_status_of_modulation('on')

    def set_ext_trig(self):
        """"""Set to the external trigger mode.

        Args:
            None

        Output:
            None

        """"""
        log.debug(__name__ + ' : setting to the external trigger mode')
        self.write('TRIG:PULS:SOUR EXT_TRIG')
"
374,367.3,"Abingdon, United Kingdom",MERC-IPS-120 MercuryIPS 120 A 10 V superconducting magnet power supply. The Mercury iPS is configurable and is made up of two units: The Mercury main unit E1-060 and Mercury secondary slave unit E1-061.,IPS 120,399.0,"Oxford Instruments plc is a United Kingdom manufacturing and research company that designs and manufactures tools and systems for industry and research. The company is headquartered in Abingdon, Oxfordshire, England, with sites in the United Kingdom, United States, Europe, and Asia.[2] It is listed on the London Stock Exchange and is a constituent of the FTSE 250 Index.[3]
",Qcodes Community,Oxford Instruments,"[OrderedDict([('id', 'attlP8b4ZXQRqQBKm'), ('width', 119), ('height', 41), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/L40kknza-cq9NhsYZ_dxRA/X7-tAyMECMdzvktYW1Kl9_wKs3wsykQuO0IZcUkIUzd1B_SdZpcWdwl9ire2dJ4mn_NIUCi-fXkE9trZOQYGNZcnMFjuTh1vvVGqKQD84dU/VrmXwTzIYFMM9z1rDroBhvlRqvT8XcH2PaS_F3-DBVs'), ('filename', 'download (5).png'), ('size', 1521), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_iwpStMuWtl-rSHbrkzUAQ/EgBTs4xZ7Dzht1W2XWHZwA1IGIJgHbD9WzrjaY4JDkCpRuPRMJlEgH9kAtbBEv3RD3HgMi1bApV67Fl2XLSdRA/eqNmVJzdrw5n0i3TmwADh2OeVb_TzPLbJdyK-fKB4Js'), ('width', 104), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2KWjy__chX3lYbHxvvzC7A/oCguq8sGx6ptCIX60qNDU4zX3wcA7m3tHoFRlXkYelctl7EqLrPQoNCeIqY22MErR36kQ4F_3tKFWxOX6I_cew/mOJ13fJh8O9VXyMA8OvTyOiIwyNW4KVH-IsgIVcfDb0'), ('width', 119), ('height', 41)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DvsxvVsG2-FCGVv7Wp2EOQ/iepJ_ZVF6MEjfwH-AhuZOXTSsXAle_ZKdHBsg8p6sS1bjnYOipyCEkWYxvdPihG5eqYM44AUH9GOoLigHgnrew/5THJTVgjyS9Y6CAHL_n4U7QQVgBcQOwU25PKU6DxVzQ'), ('width', 3000), ('height', 3000)]))]))])]",https://www.oxinst.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.jlab.org/div_dept/physics_division/dsg/technical_documentation/HDice/Manuals_and_Specifications/Oxford%20IPS120-10.pdf,"[OrderedDict([('id', 'attmQ7Nb3HgLUBAiu'), ('width', 700), ('height', 700), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/YlVX0yOi-N4XqQupowlBnA/o2DiGqEVds-hnkMK8aeHPHlDBznv0tRViuyDQQ7kuiCGWarePLCjjPbPNNYhtj70N5q1Z2oYba9T233LCKmkE5wpUOJLBj8e-q60b7LEgMw/1plFAxwuFcl9cGxJula250cJisiqVDLDlYpcThp_rL0'), ('filename', 'Mercury_IPS_E1-120.jpg'), ('size', 22336), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qB6b6VbRWM3ictmwIRO57w/7WsEOUYCHSx4n-v_SSVfm8rJIp5vAsUzNAyl8h8EwxxdmUossmCsqyPqB6aPxoT6p4SKFwr7oMPSJqevGQz5rw/E8L9IhCVs5eTeMhuq2TGjxGfQAHz9aAIbQUwvcJ_G4o'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/l_lGrrvPtz-Hb6ZHQl1Wtg/e1qzCdR4uOUBq0qy-WzVakKRZAXCa4Oo1tdZdf4TNkdMPw3qqidANgH8DQ1toYrROU6wkBsb6rKLeo3ZpU4sFg/mYLeDMbeO6SPDaTi9b0RxC5NjSsavCxiItKaOqMOwd8'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/WPB0rBrdy_Q4acn_4MlPIg/Hs2PW0K1fyiuqcV8vb_-VRa3qsvkyj_ANwN0dlI37ELgopYyj2u9vMY014w-xibyzL49LqAeXanu1rordt7m2g/991DxuQzLzuKuQre9iDP37xeHpwNvYvtNmpuZ6fQmBE'), ('width', 3000), ('height', 3000)]))]))])]",https://estore.oxinst.com/eu/products/system-spares/magnet-systems/mercury-electronics-and-cables/zidE1-120,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Oxford/IPS120.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.Oxford.html#module-qcodes_contrib_drivers.drivers.Oxford.IPS120,15982.85,,,,"# OxfordInstruments_IPS120.py class, to perform the communication between the Wrapper and the device
# Copyright (c) 2017 QuTech (Delft)
# Code is available under the available under the `MIT open-source license <https://opensource.org/licenses/MIT>`_

# Sjaak van Diepen <c.j.vandiepen@gmail.com>, 2017
# Takafumi Fujita <t.fujita@tudelft.nl>, 2016
# Mohammad Shafiei <m.shafiei@tudelft.nl>, 2011
# Guenevere Prawiroatmodjo <guen@vvtp.tudelft.nl>, 2009
# Pieter de Groot <pieterdegroot@gmail.com>, 2009


import logging
from qcodes import VisaInstrument
from qcodes import validators as vals
from time import sleep
import pyvisa


log = logging.getLogger(__name__)

class OxfordInstruments_IPS120(VisaInstrument):
    """"""This is the driver for the Oxford Instruments IPS 120 Magnet Power Supply

    The IPS 120 can connect through both RS232 serial as well as GPIB. The
    commands sent in both cases are similar. When using the serial connection,
    commands are prefaced with '@n' where n is the ISOBUS number.
    """"""

    _GET_STATUS_MODE = {
            0: ""Amps, Magnet sweep: fast"",
            1: ""Tesla, Magnet sweep: fast"",
            4: ""Amps, Magnet sweep: slow"",
            5: ""Tesla, Magnet sweep: slow"",
            8 : ""Amps, (Magnet sweep: unaffected)"",
            9 : ""Tesla, (Magnet sweep: unaffected)""}

    _GET_STATUS_MODE2 = {
            0: ""At rest"",
            1: ""Sweeping"",
            2: ""Sweep limiting"",
            3: ""Sweeping & sweep limiting"",
            5: ""Unknown""}

    _GET_STATUS_SWITCH_HEATER = {
            0: ""Off magnet at zero (switch closed)"",
            1: ""On (switch open)"",
            2: ""Off magnet at field (switch closed)"",
            5: ""Heater fault (heater is on but current is low)"",
            8: ""No switch fitted""}

    _GET_STATUS_REMOTE = {
            0: ""Local and locked"",
            1: ""Remote and locked"",
            2: ""Local and unlocked"",
            3: ""Remote and unlocked"",
            4: ""Auto-run-down"",
            5: ""Auto-run-down"",
            6: ""Auto-run-down"",
            7: ""Auto-run-down""}

    _GET_SYSTEM_STATUS = {
            0: ""Normal"",
            1: ""Quenched"",
            2: ""Over Heated"",
            3: ""Warming Up"",
            4: ""Fault""}

    _GET_SYSTEM_STATUS2 = {
            0: ""Normal"",
            1: ""On positive voltage limit"",
            2: ""On negative voltage limit"",
            3: ""Outside negative current limit"",
            4: ""Outside positive current limit""}

    _GET_POLARITY_STATUS1 = {
            0: ""Desired: Positive, Magnet: Positive, Commanded: Positive"",
            1: ""Desired: Positive, Magnet: Positive, Commanded: Negative"",
            2: ""Desired: Positive, Magnet: Negative, Commanded: Positive"",
            3: ""Desired: Positive, Magnet: Negative, Commanded: Negative"",
            4: ""Desired: Negative, Magnet: Positive, Commanded: Positive"",
            5: ""Desired: Negative, Magnet: Positive, Commanded: Negative"",
            6: ""Desired: Negative, Magnet: Negative, Commanded: Positive"",
            7: ""Desired: Negative, Magnet: Negative, Commanded: Negative""}

    _GET_POLARITY_STATUS2 = {
            1: ""Negative contactor closed"",
            2: ""Positive contactor closed"",
            3: ""Both contactors open"",
            4: ""Both contactors closed""}

    _SET_ACTIVITY = {
            0: ""Hold"",
            1: ""To set point"",
            2: ""To zero""}

    _WRITE_WAIT = 100e-3 # seconds

    def __init__(self, name, address, use_gpib=False, number=2, **kwargs):
        """"""Initializes the Oxford Instruments IPS 120 Magnet Power Supply.

        Args:
            name (str)    : name of the instrument
            address (str) : instrument address
            use_gpib (bool)  : whether to use GPIB or serial
            number (int)     : ISOBUS instrument number. Ignored if using GPIB.
        """"""
        super().__init__(name, address, terminator='\r', **kwargs)

        self._address = address
        self._number = number
        self._values = {}
        self._use_gpib = use_gpib

        # Add parameters
        self.add_parameter('mode',
                           get_cmd=self._get_mode,
                           set_cmd=self._set_mode,
                           vals=vals.Ints())
        self.add_parameter('mode2',
                           get_cmd=self._get_mode2)
        self.add_parameter('activity',
                           get_cmd=self._get_activity,
                           set_cmd=self._set_activity,
                           vals=vals.Ints())
        self.add_parameter('switch_heater',
                           get_cmd=self._get_switch_heater,
                           set_cmd=self._set_switch_heater,
                           vals=vals.Ints())
        self.add_parameter('field_setpoint',
                           unit='T',
                           get_cmd=self._get_field_setpoint,
                           set_cmd=self._set_field_setpoint,
                           vals=vals.Numbers(-14, 14))
        self.add_parameter('sweeprate_field',
                           unit='T/min',
                           get_cmd=self._get_sweeprate_field,
                           set_cmd=self._set_sweeprate_field,
                           vals=vals.Numbers(0, 0.7))
        self.add_parameter('system_status',
                           get_cmd=self._get_system_status)
        self.add_parameter('system_status2',
                           get_cmd=self._get_system_status2)
        self.add_parameter('polarity',
                           get_cmd=self._get_polarity)
        self.add_parameter('voltage',
                           unit='V',
                           get_cmd=self._get_voltage)
        self.add_parameter('voltage_limit',
                           unit='V',
                           get_cmd=self._get_voltage_limit)

        # Find the F field limits
        MaxField = self.field_setpoint.vals._max_value
        MinField = self.field_setpoint.vals._min_value
        MaxFieldSweep = self.sweeprate_field.vals._max_value
        MinFieldSweep = self.sweeprate_field.vals._min_value
        # A to B conversion
        ABconversion = 115.733 / 14  # Ampere per Tesla
        self.add_parameter('current_setpoint',
                           unit='A',
                           get_cmd=self._get_current_setpoint,
                           set_cmd=self._set_current_setpoint,
                           vals=vals.Numbers(ABconversion * MinField,
                                             ABconversion * MaxField))
        self.add_parameter('sweeprate_current',
                           unit='A/min',
                           get_cmd=self._get_sweeprate_current,
                           set_cmd=self._set_sweeprate_current,
                           vals=vals.Numbers(ABconversion * MinFieldSweep,
                                             ABconversion * MaxFieldSweep))
        self.add_parameter('remote_status',
                           get_cmd=self._get_remote_status,
                           set_cmd=self._set_remote_status,
                           vals=vals.Ints())
        self.add_parameter('current',
                           unit='A',
                           get_cmd=self._get_current)
        self.add_parameter('magnet_current',
                           unit='A',
                           get_cmd=self._get_magnet_current)
        self.add_parameter('field',
                           unit='T',
                           get_cmd=self._get_field)
        self.add_parameter('persistent_current',
                           unit='A',
                           get_cmd=self._get_persistent_current)
        self.add_parameter('persistent_field',
                           unit='T',
                           get_cmd=self._get_persistent_field)
        self.add_parameter('magnet_inductance',
                           unit='H',
                           get_cmd=self._get_magnet_inductance)
        self.add_parameter('lead_resistance',
                           unit='mOhm',
                           get_cmd=self._get_lead_resistance)
        self.add_parameter('current_limit_lower',
                           unit='A',
                           get_cmd=self._get_current_limit_lower)
        self.add_parameter('current_limit_upper',
                           unit='A',
                           get_cmd=self._get_current_limit_upper)
        self.add_parameter('heater_current',
                           unit='mA',
                           get_cmd=self._get_heater_current)
        self.add_parameter('trip_field',
                           unit='T',
                           get_cmd=self._get_trip_field)
        self.add_parameter('trip_current',
                           unit='A',
                           get_cmd=self._get_trip_current)

        if not self._use_gpib:
            self.visa_handle.set_visa_attribute(
                    pyvisa.constants.VI_ATTR_ASRL_STOP_BITS,
                    pyvisa.constants.VI_ASRL_STOP_TWO)
            # to handle VisaIOError which occurs at first read
            try:
                self.visa_handle.write('@%s%s' % (self._number, 'V'))
                sleep(self._WRITE_WAIT)
                self._read()
            except pyvisa.VisaIOError:
                pass

    def get_all(self):
        """"""
        Reads all implemented parameters from the instrument,
        and updates the wrapper.
        """"""
        self.snapshot(update=True)

    def _execute(self, message):
        """"""
        Write a command to the device and return the result.

        Args:
            message (str) : write command for the device

        Returns:
            Response from the device as a string.
        """"""
        self.log.info('Send the following command to the device: %s' % message)

        if self._use_gpib:
            return self.ask(message)

        self.visa_handle.write('@%s%s' % (self._number, message))
        sleep(self._WRITE_WAIT)  # wait for the device to be able to respond
        result = self._read()
        if result.find('?') >= 0:
            print(""Error: Command %s not recognized"" % message)
        else:
            return result

    def _read(self):
        """"""
        Reads the total bytes in the buffer and outputs as a string.

        Returns:
            message (str)
        """"""
        bytes_in_buffer = self.visa_handle.bytes_in_buffer
        with(self.visa_handle.ignore_warning(pyvisa.constants.VI_SUCCESS_MAX_CNT)):
            mes = self.visa_handle.visalib.read(
                self.visa_handle.session, bytes_in_buffer)
        mes = str(mes[0].decode())
        return mes

    def identify(self):
        """"""Identify the device""""""
        self.log.info('Identify the device')
        return self._execute('V')

    def examine(self):
        """"""Examine the status of the device""""""
        self.log.info('Examine status')

        print('System Status: ')
        print(self.system_status())

        print('Activity: ')
        print(self.activity())

        print('Local/Remote status: ')
        print(self.remote_status())

        print('Switch heater: ')
        print(self.switch_heater())

        print('Mode: ')
        print(self.mode())

        print('Polarity: ')
        print(self.polarity())

    def remote(self):
        """"""Set control to remote and unlocked""""""
        self.log.info('Set control to remote and unlocked')
        self.remote_status(3)

    def local(self):
        """"""Set control to local and unlocked""""""
        self.log.info('Set control to local and unlocked')
        self.remote_status(2)

    def close(self):
        """"""Safely close connection""""""
        self.log.info('Closing IPS120 connection')
        self.local()
        super().close()

    def get_idn(self):
        """"""
        Overides the function of Instrument since IPS120 does not support `*IDN?`

        This string is supposed to be a comma-separated list of vendor, model,
        serial, and firmware, but semicolon and colon are also common
        separators so we accept them here as well.

        Returns:
            A dict containing vendor, model, serial, and firmware.
        """"""
        idparts = ['Oxford Instruments', 'IPS120', None, None]

        return dict(zip(('vendor', 'model', 'serial', 'firmware'), idparts))

    def _get_remote_status(self):
        """"""
        Get remote control status

        Returns:
            result(str) :
            ""Local & locked"",
            ""Remote & locked"",
            ""Local & unlocked"",
            ""Remote & unlocked"",
            ""Auto-run-down"",
            ""Auto-run-down"",
            ""Auto-run-down"",
            ""Auto-run-down""
        """"""
        self.log.info('Get remote control status')
        result = self._execute('X')
        return self._GET_STATUS_REMOTE[int(result[6])]

    def _set_remote_status(self, mode):
        """"""
        Set remote control status.

        Args:
            mode(int): Refer to _GET_STATUS_REMOTE for allowed values and
            meanings.
        """"""
        if mode in self._GET_STATUS_REMOTE.keys():
            self.log.info('Setting remote control status to %s'
                    % self._GET_STATUS_REMOTE[mode])
            self._execute('C%s' % mode)
        else:
            print('Invalid mode inserted: %s' % mode)

    def _get_system_status(self):
        """"""
        Get the system status

        Returns:
            result (str) :
            ""Normal"",
            ""Quenched"",
            ""Over Heated"",
            ""Warming Up"",
            ""Fault""
        """"""
        result = self._execute('X')
        self.log.info('Getting system status')
        return self._GET_SYSTEM_STATUS[int(result[1])]

    def _get_system_status2(self):
        """"""
        Get the system status

        Returns:
            result (str) :
            ""Normal"",
            ""On positive voltage limit"",
            ""On negative voltage limit"",
            ""Outside negative current limit"",
            ""Outside positive current limit""
        """"""
        result = self._execute('X')
        self.log.info('Getting system status')
        return self._GET_SYSTEM_STATUS2[int(result[2])]

    def _get_current(self):
        """"""
        Demand output current of device

        Returns:
            result (float) : output current in Amp
        """"""
        self.log.info('Read output current')
        result = self._execute('R0')
        return float(result.replace('R', ''))

    def _get_voltage(self):
        """"""
        Demand measured output voltage of device

        Returns:
            result (float) : output voltage in Volt
        """"""
        self.log.info('Read output voltage')
        result = self._execute('R1')
        return float(result.replace('R', ''))

    def _get_magnet_current(self):
        """"""
        Demand measured magnet current of device

        Returns:
            result (float) : measured magnet current in Amp
        """"""
        self.log.info('Read measured magnet current')
        result = self._execute('R2')
        return float(result.replace('R', ''))

    def _get_current_setpoint(self):
        """"""
        Return the set point (target current)

        Returns:
            result (float) : Target current in Amp
        """"""
        self.log.info('Read set point (target current)')
        result = self._execute('R5')
        return float(result.replace('R', ''))

    def _set_current_setpoint(self, current):
        """"""
        Set current setpoint (target current)

        Args:
            current (float) : target current in Amp
        """"""
        self.log.info('Setting target current to %s' % current)
        self.remote()
        self._execute('I%s' % current)
        self.local()
        self.field_setpoint()

    def _get_sweeprate_current(self):
        """"""
        Return sweep rate (current)

        Returns:
            result (float) : sweep rate in A/min
        """"""
        self.log.info('Read sweep rate (current)')
        result = self._execute('R6')
        return float(result.replace('R', ''))

    def _set_sweeprate_current(self, sweeprate):
        """"""
        Set sweep rate (current)

        Args:
            sweeprate(float) : Sweep rate in A/min.
        """"""
        self.remote()
        self.log.info('Set sweep rate (current) to %s A/min' % sweeprate)
        self._execute('S%s' % sweeprate)
        self.local()
        self.sweeprate_field()

    def _get_field(self):
        """"""
        Demand output field

        Returns:
            result (float) : magnetic field in Tesla
        """"""
        self.log.info('Read output field')
        result = self._execute('R7')
        return float(result.replace('R', ''))

    def _get_field_setpoint(self):
        """"""
        Return the set point (target field)

        Returns:
            result (float) : Field set point in Tesla
        """"""
        self.log.info('Read field set point')
        result = self._execute('R8')
        return float(result.replace('R', ''))

    def _set_field_setpoint(self, field):
        """"""
        Set the field set point (target field)

        Args:
            field (float) : target field in Tesla
        """"""
        self.log.info('Setting target field to %s' % field)
        self.remote()
        self._execute('J%s' % field)
        self.local()
        self.current_setpoint()

    def _get_sweeprate_field(self):
        """"""
        Return sweep rate (field)

        Returns:
            result (float) : sweep rate in Tesla/min
        """"""
        self.log.info('Read sweep rate (field)')
        result = self._execute('R9')
        return float(result.replace('R', ''))

    def _set_sweeprate_field(self, sweeprate):
        """"""
        Set sweep rate (field)

        Args:
            sweeprate(float) : Sweep rate in Tesla/min.
        """"""
        self.log.info('Set sweep rate (field) to %s Tesla/min' % sweeprate)
        self.remote()
        self._execute('T%s' % sweeprate)
        self.local()
        self.sweeprate_current()

    def _get_voltage_limit(self):
        """"""
        Return voltage limit

        Returns:
            result (float) : voltage limit in Volt
        """"""
        self.log.info('Read voltage limit')
        result = self._execute('R15')
        result = float(result.replace('R', ''))
        self.voltage.vals = vals.Numbers(-result, result)
        return result

    def _get_persistent_current(self):
        """"""
        Return persistent magnet current

        Returns:
            result (float) : persistent magnet current in Amp
        """"""
        self.log.info('Read persistent magnet current')
        result = self._execute('R16')
        return float(result.replace('R', ''))

    def _get_trip_current(self):
        """"""
        Return trip current

        Returns:
            result (float) : trip current om Amp
        """"""
        self.log.info('Read trip current')
        result = self._execute('R17')
        return float(result.replace('R', ''))

    def _get_persistent_field(self):
        """"""
        Return persistent magnet field

        Returns:
            result (float) : persistent magnet field in Tesla
        """"""
        self.log.info('Read persistent magnet field')
        result = self._execute('R18')
        return float(result.replace('R', ''))

    def _get_trip_field(self):
        """"""
        Return trip field

        Returns:
            result (float) : trip field in Tesla
        """"""
        self.log.info('Read trip field')
        result = self._execute('R19')
        return float(result.replace('R', ''))

    def _get_heater_current(self):
        """"""
        Return switch heater current

        Returns:
            result (float) : switch heater current in milliAmp
        """"""
        self.log.info('Read switch heater current')
        result = self._execute('R20')
        return float(result.replace('R', ''))

    def _get_current_limit_upper(self):
        """"""
        Return safe current limit, most positive

        Returns:
            result (float) : safe current limit, most positive in Amp
        """"""
        self.log.info('Read safe current limit, most positive')
        result = self._execute('R22')
        return float(result.replace('R', ''))

    def _get_current_limit_lower(self):
        """"""
        Return safe current limit, most negative

        Returns:
            result (float) : safe current limit, most negative in Amp
        """"""
        self.log.info('Read safe current limit, most negative')
        result = self._execute('R21')
        return float(result.replace('R', ''))

    def _get_lead_resistance(self):
        """"""
        Return lead resistance

        Returns:
            result (float) : lead resistance in milliOhm
        """"""
        self.log.info('Read lead resistance')
        result = self._execute('R23')
        return float(result.replace('R', ''))

    def _get_magnet_inductance(self):
        """"""
        Return magnet inductance

        Returns:
            result (float) : magnet inductance in Henry
        """"""
        self.log.info('Read magnet inductance')
        result = self._execute('R24')
        return float(result.replace('R', ''))

    def _get_activity(self):
        """"""
        Get the activity of the magnet. Possibilities: Hold, Set point, Zero or Clamp.

        Returns:
            result(str) : ""Hold"", ""Set point"", ""Zero"" or ""Clamp"".
        """"""
        self.log.info('Get activity of the magnet.')
        result = self._execute('X')
        return self._SET_ACTIVITY[int(result[4])]

    def _set_activity(self, mode):
        """"""
        Set the activity to Hold, To Set point or To Zero.

        Args:
            mode (int): See _SET_ACTIVITY for values and meanings.
        """"""
        if mode in self._SET_ACTIVITY.keys():
            self.log.info('Setting magnet activity to %s'
                    % self._SET_ACTIVITY[mode])
            self.remote()
            self._execute('A%s' % mode)
            self.local()
        else:
            print('Invalid mode inserted.')

    def hold(self):
        """"""Set the device activity to Hold""""""
        self.activity(0)

    def to_setpoint(self):
        """"""Set the device activity to ""To set point"". This initiates a sweep.""""""
        self.activity(1)

    def to_zero(self):
        """"""
        Set the device activity to ""To zero"". This sweeps te magnet back to zero.
        """"""
        self.activity(2)

    def _get_switch_heater(self):
        """"""
        Get the switch heater status.

        Returns:
            result(str): See _GET_STATUS_SWITCH_HEATER.
        """"""
        self.log.info('Get switch heater status')
        result = self._execute('X')
        return self._GET_STATUS_SWITCH_HEATER[int(result[8])]

    def _set_switch_heater(self, mode):
        """"""
        Set the switch heater Off or On. Note: After issuing a command it is necessary to wait
        several seconds for the switch to respond.
        Args:
            mode (int) :
            0 : Off
            1 : On
        """"""
        if mode in [0, 1]:
            self.log.info('Setting switch heater to %d' % mode)
            self.remote()
            self._execute('H%s' % mode)
            print(""Setting switch heater... (wait 40s)"")
            self.local()
            sleep(40)
        else:
            print('Invalid mode inserted.')
        sleep(0.1)
        self.switch_heater()

    def heater_on(self):
        """"""Switch the heater on, with PSU = Magnet current check""""""
        current_in_magnet = self.persistent_current()
        current_in_leads = self.current()
        if self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[1]:
            print('Heater is already on!')
        else:
            if self.mode2() == self._GET_STATUS_MODE2[0]:
                if current_in_leads == current_in_magnet:
                    self.switch_heater(1)
                else:
                    print('Current in the leads is not matching persistent current!')
            else:
                print('Magnet supply not at rest, cannot switch on heater!')
        self.switch_heater()

    def set_persistent(self):
        """"""
        Puts magnet into persistent mode

        Note: After turning of the switch heater we will wait for additional 20
        seconds before we put the current to zero. This is done to make sure
        that the switch heater is cold enough and becomes superconducting.
        """"""
        if self.mode2() == self._GET_STATUS_MODE2[0]:
            self.heater_off()
            print('Waiting for the switch heater to become superconducting')
            sleep(20)
            self.to_zero()
            self.get_all()
        else:
            print('Magnet is not at rest, cannot put it in persistent mode')
        self.get_all()

    def leave_persistent_mode(self):
        """"""
        Read out persistent current, match the current in the leads to that current
        and switch on heater
        """"""
        if self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[2]:
            field_in_magnet = self.persistent_field()
            field_in_leads = self.field()
            self.hold()
            self.field_setpoint(field_in_magnet)
            self.to_setpoint()

            while field_in_leads != field_in_magnet:
                field_in_leads = self.field()
            self.heater_on()
            self.hold()

        elif self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[1]:
            print('Heater is already on, so the magnet was not in persistent mode')
        elif self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[0]:
            print('Heater is off, field is zero. Turning on switch heater.')
            self.heater_on()

        self.get_all()

    def run_to_field(self, field_value):
        """"""
        Go to field value

        Args:
            field_value (float): the magnetic field value to go to in Tesla
        """"""

        if self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[1]:
            self.hold()
            self.field_setpoint(field_value)
            self.to_setpoint()
        else:
            print('Switch heater is off, cannot change the field.')
        self.get_all()

    def run_to_field_wait(self, field_value):
        """"""
        Go to field value and wait until it's done sweeping.

        Args:
            field_value (float): the magnetic field value to go to in Tesla
        """"""
        if self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[1]:
            self.hold()
            self.field_setpoint(field_value)
            self.remote()
            self.to_setpoint()
            magnet_mode = self.mode2()
            while magnet_mode != self._GET_STATUS_MODE2[0]:
                magnet_mode = self.mode2()
                sleep(0.5)
        else:
            print('Switch heater is off, cannot change the field.')
        self.get_all()
        self.local()

    def heater_off(self):
        """"""Switch the heater off""""""
        if (self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[0] or
                self.switch_heater() == self._GET_STATUS_SWITCH_HEATER[2]):
            print('Heater is already off!')
        else:
            if self.mode2() == self._GET_STATUS_MODE2[0]:
                self.switch_heater(0)
            else:
                print('Magnet is not at rest, cannot switch of the heater!')

    def _get_mode(self):
        """"""
        Get the mode of the device

        Returns:
            mode(str): See _GET_STATUS_MODE.
        """"""
        self.log.info('Get device mode')
        result = self._execute('X')
        return self._GET_STATUS_MODE[int(result[10])]

    def _get_mode2(self):
        """"""
        Get the sweeping mode of the device

        Returns:
            mode(str): See _GET_STATUS_MODE2.
        """"""
        self.log.info('Get device mode')
        result = self._execute('X')
        return self._GET_STATUS_MODE2[int(result[11])]

    def _set_mode(self, mode):
        """"""
        Args:
            mode(int): Refer to _GET_STATUS_MODE dictionary for the allowed
            mode values and meanings.
        """"""
        if mode in self._GET_STATUS_MODE.keys():
            self.log.info('Setting device mode to %s' % self._GET_STATUS_MODE[mode])
            self.remote()
            self._execute('M%s' % mode)
            self.local()
        else:
            print('Invalid mode inserted.')

    def _get_polarity(self):
        """"""
        Get the polarity of the output current

        Returns:
            result (str): See _GET_POLARITY_STATUS1 and _GET_POLARITY_STATUS2.
        """"""
        self.log.info('Get device polarity')
        result = self._execute('X')
        return self._GET_POLARITY_STATUS1[int(result[13])] + \
            "", "" + self._GET_POLARITY_STATUS2[int(result[14])]
"
382,5420.0,USA,,Keysight J 7211,306.0,"Keysight Technologies, or Keysight, is an American company that manufactures electronics test and measurement equipment and software
",Qcodes Community,Keysight,"[OrderedDict([('id', 'attSixem5KGYQVz77'), ('width', 212), ('height', 75), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/CpwBp96kY5dUnguQiqYpww/J9lJkFD16xSDAPvmgv_d56vj9Lqq6ItNUW_5UoMyN-S0Shnh0JOEO8csLebz7Xu4Z8gE07FUhS-nDKuUnQrjlgGl9TDwvdw0ri8xFYWoqJI/u6-p03gBGsvJDX5pDkq8g03E4crw0PcqBr7jJQHqkOI'), ('filename', 'keysight-logo.svg'), ('size', 2285), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OHgE-tcyvCBxuFqu2T7t_A/az7HG7f0QS1vnZ52VcX5uXPXMyaXWm0aU0XpvVcbL-iaXMyXmXzrSR-B4rc2L0dd-f6o9qeZB5ZLJwyXF5Ddw0s88QIR6eB5yl5YgvaK938/HNFmDeic35zFTM_Qz4ZdgLI6Ram83KauYXm5s4osP2w'), ('width', 102), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EXCh0xCs_7MHSTx5Zz4CPA/Vm4LQikWqhLq7BQ4diBo6XQAAS5CLk1cfq9-S4yaTSMKcSuykUmlSiBgLAQSc73c_ggpGgo-k66P49Sg6IvYNQsS9xuXJrGvmuhM7B3ygEQ/9HyBiUmvRW0XEd9GhYUpcS4ZSI2K8DRyjI70MXa9kr4'), ('width', 212), ('height', 75)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RQAo4UuLDVUF9_USADgP3w/dB55bQeyNGnlF3qRJsUAPWsAKtJnjKtA7XkA6scBhm0AkS5S6u_fVInQqEF-cIPNvke9dKGD1bz6c74uEryk4Ez3lO2dlivDqcW_KnVzMQM/vqKwTVltxdBX1CwxjuFTUNpzJ5R2NnBqC3e7aQx3xzA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.keysight.com/us/en/home.html,Write a Python script that uses Qcodes Community to connect to a KEYSIGHT J7211/A/B/C (Series) Lockin Amplifiers,https://en.wikipedia.org/wiki/Lock-in_amplifier,['Lockin Amplifiers'],"An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.
",KEYSIGHT J7211/A/B/C (Series),https://www.keysight.com/us/en/assets/7018-01788/technical-overviews/5989-8323.pdf,,,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Keysight/Keysight_J7211.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.Keysight.html#module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211,,,,,"from qcodes.instrument.visa import VisaInstrument
from qcodes.utils.validators import Ints
from typing import Optional


class Keysight_J7211(VisaInstrument):
    r""""""
    Qcodes driver for the Keysight J7211 Attenuation Control Unit.
    Tested with J7211B.

    Args:
        name: Instrument name
        address: Address or VISA alias of instrument
        attenuation: Optional attenuation level (in dB) to set on startup
        terminator: Termination character in VISA communication.
    """"""

    def __init__(self, name: str, address: str,
                 attenuation: Optional[int] = None,
                 terminator=""\r"", **kwargs):
        super().__init__(name=name, address=address,
                         terminator=terminator, **kwargs)

        model = self.IDN()['model']
        if model in [""J7211A"", ""J7211B""]:
            vals = Ints(0, 120)
        elif model in [""J7211C""]:
            vals = Ints(0, 100)
        else:
            raise RuntimeError(f""Model {model} is not supported."")

        self.add_parameter('attenuation', unit='dB',
                           set_cmd='ATT {:03.0f}',
                           get_cmd='ATT?',
                           get_parser=int,
                           vals=vals,
                           initial_value=attenuation)

        self.connect_message()
"
391,230.0,UK,"The Andor Shamrock SR-750 is based on Czerny-Turner optical design. The Shamrock is available as a pre-aligned detector/spectrometer option allowing for seamless integration of software, electronics, optics and detector. There is also a fast and interactive graphical software interface allowing full control of all the spectrograph functions.",SR 750,499.0,"Leaders In The Development & Manufacture of Cameras, Microscopy and Spectroscopy Systems.
",Qcodes Community,Andor,"[OrderedDict([('id', 'att2wclSxDYBZ5XdP'), ('width', 400), ('height', 300), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W-Bkxhigu7k_aJjKjIYK-g/J8_OPLsu7y28nkzDpOEPW32LWOUcg9_QanVKntH3oPdwnmq4HROYITx8x1du0utNzRW4lIZMy5nlGrc80tm5bg/6GWyfPhlB50c6sZ4pOf8wSwD-9XqaCEwRUzB8dHFr8w'), ('filename', '3672.jpg'), ('size', 29221), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/W_LUYypurv0P1EIGvsMMOg/mj_MvTWhxuS6kztywCJVQ0ArFyTJa-LeKkpNgH8kyHQgN5Orw0rxK4suECX0Aa3zxb8ZEqwUmC0qI76RSooyfA/DiEO32ihLRfyIH0_ttwOdlh0oRljyXmZ9_UNEWkGW0k'), ('width', 48), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/94wxu4ixCf5B3zFTw2szqA/WW_EjhgF3Lf8kMiLI_hegsiumOGVVzUQYNRx9bGOisQWLj1NMCi5rNOU-qhRFhFWkJEZ5naC4VO49QHAgvZTyA/IU-30VoUWpyJ50H7a3RJ2knjr1H865R2RsSwcwFT6-k'), ('width', 400), ('height', 300)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Smhksd0ebSkbPEWD3d0lag/GhXcKFryJcxVVugFiFY_b4elNKXrYwBkNH5Ft0arUYpHMtsp-lBGP67JsIqhoVSssuqwD2J7QTE40ndiY820Vw/MlESOkiMZR728vvpvb8M9qA-FbLvdoNomfbfjPClRUU'), ('width', 3000), ('height', 3000)]))]))])]",https://andor.oxinst.com/,Write a Python script that uses Qcodes Community to connect to a Shamrock 750 Spectrometers,https://en.wikipedia.org/wiki/Spectrometer,['Spectrometers'],A spectrometer is a scientific instrument used to separate and measure spectral components of a physical phenomenon. Spectrometer is a broad term often used to describe instruments that measure a continuous variable of a phenomenon where the spectral components are somehow mixed,Shamrock 750,https://andor.oxinst.com/assets/uploads/products/andor/documents/andor-shamrock-750-specifications.pdf,"[OrderedDict([('id', 'attOpEVsiqQFB5kDf'), ('width', 1000), ('height', 866), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/e2MDxhMDETv99gDDuPPnWQ/c-bmYw1PqJK-xVcSXp21G5d8WcZ1KvjuZN1b3I-GcES0aN7kSEFk_GglIxLY-ctrbrd8gUTpjEfPoY5coE8b1MzZnDr2h4WFLrEhRSCE8Kw/pXwthpj16Vh4sPzbYb03f9dZ9OJ8ROTK5rsBJQuag80'), ('filename', 'shamrock-750-product.png'), ('size', 469885), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/XaE2WHGsX9RNeeWSUSqkWw/QZ3ailpP4PWPCwIRFXd8Yr6jUZNL9C9K5x0hng95XG9oomS82FpFQxusSCiRCYAdQln85ktpDpbWBBxlJycWzg/7a-SEmiktZu5QozAmBsNJEtZMM5AKZ0iysjoP2REBt0'), ('width', 42), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DgV7B0FfrO92BxuA3r_WlQ/xwpSExEgZ5xRf44IauDOtcP5e8KkCz3-nhdrmZX6wd2sZp0yjAuNTvFfQrMomfs_pB7cKFjZ7BFfBYKG_y6vNA/hrp9ZTjDIejWU3J9a98wf_OQu4CR7EzIZaYHICkNjAY'), ('width', 591), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_pyyJeuiiD4FCkbfVrSJ8g/6gw96PyQKdapEwa9DHXFzs9Veq7vAn1smlVTxPwwcJkUj6KTVj87laSVrR-ESka2LVP6VA7fx4RzzA5LgPV9gw/KSPoFxXdbFflbXpDM-GnMLvLxL8tj-hlQ3MsCf5aWQw'), ('width', 3000), ('height', 3000)]))]))])]",https://andor.oxinst.com/products/kymera-and-shamrock-spectrographs/shamrock-750,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Shamrock/SR750.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Shamrock_SR750.ipynb,,,,,"from qcodes import Instrument
from qcodes.utils.validators import Ints, Numbers
import ctypes
import os
import sys
import logging
from typing import Optional

logger = logging.getLogger(__name__)


class ShamrockCIF:
    """"""
    Wrapper class for the ShamrockCIF.dll library.

    The class has been tested for a Shamrock SR750.

    Args:
        dll_path: Path to the ShamrockCIF.dll file. If not set, a default path is used.
        verbose: Flag for the verbose behaviour. If true, successful events are printed.

    Attributes:
        verbose: Flag for the verbose behaviour.
        dll: WinDLL object for ShamrockCIF.dll.
    """"""

    # default dll path
    _dll_path = 'C:\\Program Files\\Andor SDK\\Shamrock64\\ShamrockCIF.dll'

    # success and error codes
    _success_codes = {20202: 'SHAMROCK_SUCCESS'}
    _error_codes = {
        20201: 'SHAMROCK_COMMUNICATION_ERROR',
        20266: 'SHAMROCK_P1INVALID',
        20267: 'SHAMROCK_P2INVALID',
        20268: 'SHAMROCK_P3INVALID',
        20269: 'SHAMROCK_P4INVALID',
        20270: 'SHAMROCK_P5INVALID',
        20275: 'SHAMROCK_NOT_INITIALIZED',
        20292: 'SHAMROCK_NOT_AVAILABLE'
    }

    def __init__(self, dll_path: Optional[str] = None, verbose: bool = False):
        if sys.platform != 'win32':
            raise OSError(""\""ShamrockCIF\"" is only compatible with Microsoft Windows"")

        # save attributes
        self.verbose: bool = verbose

        # connect to the DLL
        current_path = os.getcwd()
        try:
            os.chdir(os.path.dirname(self._dll_path))
            self.dll = ctypes.windll.LoadLibrary(dll_path or self._dll_path)
        finally:
            os.chdir(current_path)

    def error_check(self, code, function_name=''):
        if code in self._success_codes.keys():
            if self.verbose:
                logger.info(f""ShamrockCIF: [{function_name}]: {self._success_codes[code]}"")
        elif code in self._error_codes.keys():
            error_string = f""ShamrockCIF: [{function_name}]: {self._error_codes[code]}""
            logger.error(error_string)
            raise Exception(error_string)
        else:
            error_string = f""ShamrockCIF: [{function_name}]: Unknown code: {code}""
            logger.error(error_string)
            raise Exception(error_string)

    # dll functions
    def close(self):
        code = self.dll.ShamrockClose()
        self.error_check(code, 'ShamrockClose')

    def get_calibration(self, device, number_pixels):
        c_device = ctypes.c_int(device)
        c_calibration = (ctypes.c_float * number_pixels)()
        c_number_pixels = ctypes.c_int(number_pixels)
        code = self.dll.ShamrockGetCalibration(c_device, c_calibration, c_number_pixels)
        self.error_check(code, 'ShamrockGetCalibration')
        return [max(0.0, v) for v in c_calibration]

    def get_grating(self, device):
        c_device = ctypes.c_int(device)
        c_grating = ctypes.c_int()
        code = self.dll.ShamrockGetGrating(c_device, ctypes.byref(c_grating))
        self.error_check(code, 'ShamrockGetGrating')
        return c_grating.value

    def get_grating_info(self, device, grating):
        c_device = ctypes.c_int(device)
        c_grating = ctypes.c_int(grating)
        c_lines = ctypes.c_float()
        c_blaze = ctypes.create_string_buffer(64)
        c_home = ctypes.c_int()
        c_offset = ctypes.c_int()
        code = self.dll.ShamrockGetGratingInfo(c_device, c_grating, ctypes.byref(c_lines), c_blaze, ctypes.byref(c_home), ctypes.byref(c_offset))
        self.error_check(code, 'ShamrockGetGratingInfo')
        return c_lines.value, c_blaze.value, c_home.value, c_offset.value

    def get_number_devices(self):
        c_no_devices = ctypes.c_int()
        code = self.dll.ShamrockGetNumberDevices(ctypes.byref(c_no_devices))
        self.error_check(code, 'ShamrockGetNumberDevices')
        return c_no_devices.value

    def get_number_gratings(self, device):
        c_device = ctypes.c_int(device)
        c_no_gratings = ctypes.c_int()
        code = self.dll.ShamrockGetNumberGratings(c_device, ctypes.byref(c_no_gratings))
        self.error_check(code, 'ShamrockGetNumberGratings')
        return c_no_gratings.value

    def get_number_pixels(self, device):
        c_device = ctypes.c_int(device)
        c_number_pixels = ctypes.c_int()
        code = self.dll.ShamrockGetNumberPixels(c_device, ctypes.byref(c_number_pixels))
        self.error_check(code, 'ShamrockGetNumberPixels')
        return c_number_pixels.value

    def get_pixel_width(self, device):
        c_device = ctypes.c_int(device)
        c_width = ctypes.c_float()
        code = self.dll.ShamrockGetPixelWidth(c_device, ctypes.byref(c_width))
        self.error_check(code, 'ShamrockGetPixelWidth')
        return c_width.value

    def get_serial_number(self, device):
        c_device = ctypes.c_int(device)
        c_serial = ctypes.create_string_buffer(128)
        code = self.dll.ShamrockGetSerialNumber(c_device, c_serial)
        self.error_check(code, 'ShamrockGetSerialNumber')
        return c_serial.value.decode('ascii')

    def get_slit(self, device):
        c_device = ctypes.c_int(device)
        c_width = ctypes.c_float()
        code = self.dll.ShamrockGetSlit(c_device, ctypes.byref(c_width))
        self.error_check(code, 'ShamrockGetSlit')
        return c_width.value

    def get_wavelength(self, device):
        c_device = ctypes.c_int(device)
        c_wavelength = ctypes.c_float()
        code = self.dll.ShamrockGetWavelength(c_device, ctypes.byref(c_wavelength))
        self.error_check(code, 'ShamrockGetWavelength')
        return c_wavelength.value

    def get_wavelength_limits(self, device, grating):
        c_device = ctypes.c_int(device)
        c_grating = ctypes.c_int(grating)
        c_min = ctypes.c_float()
        c_max = ctypes.c_float()
        code = self.dll.ShamrockGetWavelengthLimits(c_device, c_grating, ctypes.byref(c_min), ctypes.byref(c_max))
        self.error_check(code, 'ShamrockGetWavelengthLimits')
        return c_min.value, c_max.value

    def initialize(self):
        code = self.dll.ShamrockInitialize("""")
        self.error_check(code, 'ShamrockInitialize')

    def set_grating(self, device, grating):
        c_device = ctypes.c_int(device)
        c_grating = ctypes.c_int(grating)
        code = self.dll.ShamrockSetGrating(c_device, c_grating)
        self.error_check(code, 'ShamrockSetGrating')

    def set_number_pixels(self, device, number_pixels):
        c_device = ctypes.c_int(device)
        c_number_pixels = ctypes.c_int(number_pixels)
        code = self.dll.ShamrockSetNumberPixels(c_device, c_number_pixels)
        self.error_check(code, 'ShamrockSetNumberPixels')

    def set_pixel_width(self, device, width):
        c_device = ctypes.c_int(device)
        c_width = ctypes.c_float(width)
        code = self.dll.ShamrockSetPixelWidth(c_device, c_width)
        self.error_check(code, 'ShamrockSetPixelWidth')

    def set_slit(self, device, width):
        c_device = ctypes.c_int(device)
        c_width = ctypes.c_float(width)
        code = self.dll.ShamrockSetSlit(c_device, c_width)
        self.error_check(code, 'ShamrockSetSlit')

    def set_wavelength(self, device, wavelength):
        c_device = ctypes.c_int(device)
        c_wavelength = ctypes.c_float(wavelength)
        code = self.dll.ShamrockSetWavelength(c_device, c_wavelength)
        self.error_check(code, 'ShamrockSetWavelength')


class Shamrock_SR750(Instrument):
    """"""
    Instrument driver for the Shamrock SR750 spectrometer.

    Args:
        name: Instrument name.
        dll_path: Path to the ShamrockCIF.dll file. If not set, a default path is used.
        device_id: ID for the desired spectrometer.
        ccd_number_pixels: Number of pixels on the connected CCD.
        ccd_pixel_width: Pixel width on the connected CCD.

    Attributes:
        ShamrockCIF: DLL wrapper for ShamrockCIF.dll
        device_id: Spectrometer device ID.
        serial_number: Serial number of the spectrometer.
        number_gratings: Number of gratings on the spectrometer.
    """"""

    def __init__(self, name: str,
                 dll_path: Optional[str] = None, device_id: int = 0,
                 ccd_number_pixels: int = 1024, ccd_pixel_width: int = 26,
                 **kwargs):

        super().__init__(name, **kwargs)

        # link to dll
        self.ShamrockCIF: ShamrockCIF = ShamrockCIF(dll_path=dll_path)

        # store device number
        self.device_id: int = device_id

        # initialize Shamrock
        self.ShamrockCIF.initialize()

        # read info from Shamrock
        self.serial_number: int = self.ShamrockCIF.get_serial_number(self.device_id)
        self.number_gratings: int = self.ShamrockCIF.get_number_gratings(self.device_id)

        # send CCD info to Shamrock
        self.ShamrockCIF.set_number_pixels(self.device_id, ccd_number_pixels)
        self.ShamrockCIF.set_pixel_width(self.device_id, ccd_pixel_width)

        # add the instrument parameters
        self.add_parameter('blaze',
                           get_cmd=self._get_blaze,
                           get_parser=int,
                           label='Blaze')

        self.add_parameter('calibration',
                           get_cmd=self._get_calibration,
                           unit='nm',
                           label='Calibration')

        self.add_parameter('grating',
                           get_cmd=self._get_grating,
                           set_cmd=self._set_grating,
                           get_parser=int,
                           vals=Ints(min_value=1,
                                     max_value=self.number_gratings),
                           label='Grating')

        self.add_parameter('groove_density',
                           get_cmd=self._get_groove_density,
                           get_parser=int,
                           unit='l/mm',
                           label='Groove density')

        self.add_parameter('slit',
                           get_cmd=self._get_slit,
                           set_cmd=self._set_slit,
                           get_parser=int,
                           vals=Ints(min_value=10,
                                     max_value=2500),
                           unit=u""\u03BC""+'m',
                           label='Slit')

        min_wavelength, max_wavelength = self.ShamrockCIF.get_wavelength_limits(self.device_id, self._get_grating())
        self.add_parameter('wavelength',
                           get_cmd=self._get_wavelength,
                           set_cmd=self._set_wavelength,
                           get_parser=float,
                           vals=Numbers(min_value=min_wavelength,
                                        max_value=max_wavelength),
                           unit='nm',
                           label='Wavelength')

        # print connect message
        self.connect_message()

    # get methods

    def _get_blaze(self):
        grating = self.ShamrockCIF.get_grating(self.device_id)
        grating_info = self.ShamrockCIF.get_grating_info(self.device_id, grating)
        return grating_info[1]

    def _get_calibration(self):
        return self.ShamrockCIF.get_calibration(self.device_id, 1024)

    def _get_grating(self):
        return self.ShamrockCIF.get_grating(self.device_id)

    def _get_groove_density(self):
        grating = self.ShamrockCIF.get_grating(self.device_id)
        grating_info = self.ShamrockCIF.get_grating_info(self.device_id, grating)
        return grating_info[0]

    def get_idn(self):
        return {'vendor': 'Shamrock', 'serial': self.serial_number}

    def _get_slit(self):
        return self.ShamrockCIF.get_slit(self.device_id)

    def _get_wavelength(self):
        return self.ShamrockCIF.get_wavelength(self.device_id)

    # set methods

    def _set_grating(self, grating):
        self.ShamrockCIF.set_grating(self.device_id, grating)
        min_wavelength, max_wavelength = self.ShamrockCIF.get_wavelength_limits(self.device_id, grating)
        self.wavelength.vals = Numbers(min_value=min_wavelength, max_value=max_wavelength)

    def _set_slit(self, val):
        self.ShamrockCIF.set_slit(self.device_id, val)

    def _set_wavelength(self, wavelength):
        self.ShamrockCIF.set_wavelength(self.device_id, wavelength)

    # further methods

    def close(self):
        self.ShamrockCIF.close()
        super().close()
"
400,5.0,"Delft, Zuid-Holland, The Netherlands",,Singlequantum,508.0,"At Single Quantum, we confront every challenge with innovation, dedication, and passion. Founded in 2012, our team emerged as true pioneers of single photon detection technology: we were among the first to manufacture and commercialize superconducting nanowire single photon detectors. Since then, our multi-channel Single Quantum Eos photon detection system has been chosen by more than 100 academic and industrial labs all over the world to perform complex optical measurements.
",Qcodes Community,Singlequantum,"[OrderedDict([('id', 'attFUj5zrgN4njy3J'), ('width', 453), ('height', 111), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/G0ZN7yiM_UzoxUU-6F4qWg/agvzl0XfLedn9pfeb3SMwIy1eTEXLX4dVJ-_IBINxknOvwwy6tooYF7VxhnCsQDLCpy79kZ_nAG2x1q3s0BZIbASh9wTFvk2EeLCbDKqE9c/_WObAFqFbphO-2Skox-67bgFtURTZCPbE_Z3FoYOGE0'), ('filename', 'download (8).png'), ('size', 5477), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/zb5Rc0G9XsGCd8-OWgYOKg/Tpu-Xz3_RGIczLb3EhbXpnDLEnGvOR5w6GSt0aUE-MSXIZrlSZZ2kuj-CRQnPS1jl3KVLQ0S6nGjudwukNZtPA/uKaBsA5oCSSP497xNgIM96PgannlrpoED5Yol2sSgzQ'), ('width', 147), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GakASehBmfhMlbr4DKVMgg/65ALp50f7bhR8exLrztQg0QHbFdKyDlemOzaOZ4_E8TeperDqH4lJaJi90gcqjc8VUdiVSCOeQKMZp7YAUM8Wg/ENzTLO-kseY3zqOoEPoXgw_32LEiErplgau1f3Ur0Kg'), ('width', 453), ('height', 111)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/8dM_ylfocsVKlcKuoT0xNw/qVksx9gfvrAfca17kjvxoW5XRHyhdNKYJXOcWpziGxEB_x-xhp1Y5ygg5o98JAQDsCZZ1dN8zPD3JnvVbq4o9w/EnXiYng-txjmCunUXoELhollPoHsfZZFcP-4DzLtIvw'), ('width', 3000), ('height', 3000)]))]))])]",https://singlequantum.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} ,,,,,,,,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/SingleQuantum/SingleQuantum.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.SingleQuantum.html,,,,,"""""""
The MIT License (MIT)

Copyright (c) 2020 Single Quantum B. V.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
""""""

import numpy as np
import socket
import json
import threading
import time
import sys

from qcodes.instrument.ip import Instrument
from qcodes.instrument.base import Parameter
from qcodes.instrument.parameter import ParameterWithSetpoints, MultiParameter
from qcodes.utils.validators import Arrays


class SQTalk(threading.Thread):
    def __init__(self, TCP_IP_ADR='localhost', TCP_IP_PORT=12000,
                 error_callback=None):
        threading.Thread.__init__(self)
        self.TCP_IP_ADR = TCP_IP_ADR
        self.TCP_IP_PORT = TCP_IP_PORT

        self.socket = socket.socket(
            socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((self.TCP_IP_ADR, self.TCP_IP_PORT))
        self.socket.settimeout(.1)
        self.BUFFER = 10000000
        self.shutdown = False
        self.labelProps = dict()

        self.error_callback = error_callback

        self.lock = threading.Lock()

    def close(self):
        # Print(""Closing Socket"")
        self.socket.close()
        self.shutdown = True

    def send(self, msg):
        self.socket.send(bytes(msg, ""utf-8""))

    def sub_jsons(self, msg):
        """"""Return sub json strings.
        {}{} will be returned as [{},{}]
        """"""
        i = 0
        result = []
        split_msg = msg.split('}{')
        for s in range(len(split_msg)):
            if i == 0 and len(split_msg) == 1:
                result.append(split_msg[s])
            elif i == 0 and len(split_msg) > 1:
                result.append(split_msg[s] + ""}"")
            elif i == len(split_msg) - 1 and len(split_msg) > 1:
                result.append(""{"" + split_msg[s])
            else:
                result.append(""{"" + split_msg[s] + ""}"")
            i += 1
        return result

    def add_labelProps(self, data):
        if ""label"" in data.keys():
            # After get labelProps, queries also bounds, units etc...
            if isinstance(data[""value""], (dict)):
                self.labelProps[data[""label""]] = data[""value""]
            # General label communication, for example from broadcasts
            else:
                try:
                    self.labelProps[data[""label""]
                                    ][""value""] = data[""value""]
                except Exception:
                    None

    def check_error(self, data):
        if ""label"" in data.keys():
            if ""Error"" in data[""label""]:
                self.error_callback(data[""value""])

    def get_label(self, label):
        timeout = 10
        dt = .1
        i = 0
        while True:
            if i * dt > timeout:
                raise IOError(""Could not acquire label"")
            try:
                return self.labelProps[label]
            except Exception:
                self.send(json.dumps(
                    {""request"": ""labelProps"", ""value"": ""None""}))
                time.sleep(dt)
            i += 1

    def get_all_labels(self, label):
        return self.labelProps

    def run(self):
        self.send(json.dumps(
            {""request"": ""labelProps"", ""value"": ""None""}))
        rcv_msg = []

        while self.shutdown is False:
            try:
                rcv = """" + rcv_msg[1]
            except Exception:
                rcv = """"
            data = {}
            r = """"
            while ""\x17"" not in rcv:
                try:
                    r = str(self.socket.recv(self.BUFFER), 'utf-8')
                except Exception:
                    None
                rcv = rcv + r

            rcv_msg = rcv.split(""\x17"")

            for rcv_line in rcv_msg:
                rcv_split = self.sub_jsons(rcv_line)
                for msg in rcv_split:
                    try:
                        data = json.loads(msg)
                    except Exception:
                        None

                    with self.lock:
                        self.add_labelProps(data)
                        self.check_error(data)


class SQCounts(threading.Thread):
    def __init__(
            self,
            TCP_IP_ADR='localhost',
            TCP_IP_PORT=12345,
            CNTS_BUFFER=100):
        threading.Thread.__init__(self)
        self.lock = threading.Lock()
        self.rlock = threading.RLock()
        self.TCP_IP_ADR = TCP_IP_ADR
        self.TCP_IP_PORT = TCP_IP_PORT

        self.socket = socket.socket(
            socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((self.TCP_IP_ADR, self.TCP_IP_PORT))
        # self.socket.settimeout(.1)
        self.BUFFER = 1000000
        self.shutdown = False

        self.cnts = []
        self.CNTS_BUFFER = CNTS_BUFFER
        self.n = 0

    def close(self):
        # print(""Closing Socket"")
        self.socket.close()
        self.shutdown = True

    def get_n(self, n):
        n0 = self.n
        while self.n < n0 + n:
            time.sleep(0.001)
        cnts = self.cnts
        return cnts[-n:]

    def run(self):
        while self.shutdown is False:
            data_raw = str(self.socket.recv(self.BUFFER), 'utf-8')

            data_newline = data_raw.split('\n')

            v = []
            for d in data_newline[0].split(','):
                v.append(float(d))

            with self.lock:
                self.cnts.append(v)
                # Keep Size of self.cnts
                len_ = len(self.cnts)
                if len_ > self.CNTS_BUFFER:
                    self.cnts = self.cnts[len_ - self.CNTS_BUFFER:]
                self.n += 1


class ChannelArray(ParameterWithSetpoints):
    """"""Fetches the correct row from the matrix counters,  based on the channel
    This is a parameter with setpoints, where the setpoints are the time stamps
    Args:
        channel (int): the channel number to select the row from the counters matrix
    Return (numpy_array): a numpy vector of length npts, containing the counts
    """"""

    def __init__(self, channel, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._channel = channel

    def get_raw(self):
        return self.root_instrument.counters.get_latest()[
            self._channel]


class TimeArray(Parameter):
    """"""Fetches the row with time stamps, currently channel 0
    This parameter is used as the setpoints for the channelarray
    Args:
        channel (int): the channel number to select the row from the counters matrix (channel 0 is the timestamp)
    Return (numpy_array): a numpy vector of length npts, containing the time stamps
    """"""

    def __init__(self, channel, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._channel = channel

    def get_raw(self):
        return np.array(self.root_instrument.counters.get_latest()[
            self._channel])


class CommunicationHandler(object):
    """"""Handles the communication, creates JSON strings""""""

    def __init__(
            self,
            root_instrument,
            log,
            TCP_IP_ADR='localhost',
            CONTROL_PORT=12000,
            COUNTS_PORT=12345):
        self.root_instrument = root_instrument
        self.log = log
        self.TCP_IP_ADR = TCP_IP_ADR
        self.CONTROL_PORT = CONTROL_PORT
        self.COUNTS_PORT = COUNTS_PORT
        self.NUMBER_OF_DETECTORS = 0

        self.talk = SQTalk(
            TCP_IP_ADR=self.TCP_IP_ADR,
            TCP_IP_PORT=self.CONTROL_PORT,
            error_callback=self.error)
        # Daemonic Thread close when main progam is closed
        self.talk.daemon = True
        self.talk.start()

        self.cnts = SQCounts(TCP_IP_ADR=self.TCP_IP_ADR,
                             TCP_IP_PORT=self.COUNTS_PORT)
        # Daemonic Thread close when main progam is closed
        self.cnts.daemon = True
        self.cnts.start()

        self.NUMBER_OF_DETECTORS = self.talk.get_label(
            ""NumberOfDetectors"")[""value""]

    def acquire_cnts_t(self):
        """"""Acquire n count measurments transposed.
        Return (numpy_array): Acquired counts with timestamp in first row.
        """"""
        n = self.root_instrument.npts()
        cnts = self.cnts.get_n(n)
        return np.array(cnts).T

    def set_measurement_periode(self, t_in_ms):
        msg = json.dumps(
            dict(
                command=""SetMeasurementPeriod"",
                label=""InptMeasurementPeriod"",
                value=t_in_ms))
        self.talk.send(msg)

    def get_number_of_detectors(self):
        return self.talk.get_label(""NumberOfDetectors"")[""value""]

    def get_measurement_periode(self):
        """"""Get measurment periode in ms.
        Return (float): time
        """"""
        return self.talk.get_label(""InptMeasurementPeriod"")[""value""]

    def get_bias_current(self):
        return self.talk.get_label(""BiasCurrent"")[""value""]

    def get_trigger_level(self):
        return self.talk.get_label(""TriggerLevel"")[""value""]

    def get_bias_voltage(self):
        msg = json.dumps(dict(request=""BiasVoltage""))
        self.talk.send(msg)
        return self.talk.get_label(""BiasVoltage"")[""value""]

    def set_bias_current(self, current_in_uA):
        array = current_in_uA
        msg = json.dumps(dict(command=""SetAllBiasCurrents"",
                              label=""BiasCurrent"", value=array))
        self.talk.send(msg)

    def set_trigger_level(self, trigger_level_mV):
        array = trigger_level_mV
        msg = json.dumps(dict(command=""SetAllTriggerLevels"",
                              label=""TriggerLevel"", value=array))
        self.talk.send(msg)

    def enable_detectors(self, state=True):
        msg = json.dumps(dict(command=""DetectorEnable"",
                              label=""DetectorEnable"", value=state))
        self.talk.send(msg)

    def set_dark_counts_auto_iv(self, dark_counts):
        """"""Set the dark counts for the automatic detector calibration.
        After this command execute: self.auto_cali_bias_currents()
        """"""
        if self.NUMBER_OF_DETECTORS != len(dark_counts):
            raise ValueError(
                'Dark counts not the same lenght as number of detectors')
        else:
            msg = json.dumps(
                dict(
                    command=""DarkCountsAutoIV"",
                    label=""DarkCountsAutoIV"",
                    value=dark_counts))
            self.talk.send(msg)

    def auto_cali_bias_currents(self):
        """"""Performs the automatic bias calibration. Make sure that no light reaches the detectors during this procedure.
        To check if this function has finished use self.auto_cali_finished() which return true or false.
        """"""
        msg = json.dumps(
            dict(
                command=""AutoCaliBiasCurrents"",
                value=True))
        self.talk.send(msg)

    def auto_cali_finished(self):
        """"""Check if auto calibration of the bias currents to find a given dark count value has finished.
        Returns: True if finished, False otherwise
        """"""
        msg = json.dumps(dict(request=""StartAutoIV""))
        self.talk.send(msg)
        return not(self.talk.get_label(""StartAutoIV"")[""value""])

    def error(self, error_msg):
        """"""Called in case of an error""""""
        self.log.warning(""ERROR DETECTED"")
        self.log.warning(error_msg)


class WebSQControlqcode(Instrument):
    """"""The instrument.

    IMPORTANT: the QCoDeS parameter 'counters' updates the time stamp and counters from the detectors.
    Always call 'counters' if you want to fetch the next 'npts' counts.
    """"""

    def __init__(self, name, address, port, **kwargs):
        # super().__init__(name, address, port, **kwargs)
        super().__init__(name, **kwargs)

        self.TCP_IP_ADR = address
        self.CONTROL_PORT = port
        self.COUNTS_PORT = 12345
        self.NUMBER_OF_DETECTORS = 0

        self.comm = CommunicationHandler(self.root_instrument, self.log,
                                         self.TCP_IP_ADR, self.CONTROL_PORT, self.COUNTS_PORT)

        self.NUMBER_OF_DETECTORS = self.comm.talk.get_label(
            ""NumberOfDetectors"")[""value""]

        self.add_parameter(
            'bias_current',
            unit='uA',
            get_cmd=self.comm.get_bias_current,
            set_cmd=self.comm.set_bias_current,
            docstring='Bias current setting'
        )

        self.add_parameter(
            name='npts',
            initial_value=1,
            label='Number of points',
            get_cmd=None,
            set_cmd=None,
            docstring='Number of points to acquire (see measurement_periode)'
        )

        self.add_parameter(
            'detectors',
            get_cmd=self.comm.enable_detectors,
            set_cmd=None,
            docstring='Enables/disables the detectors'
        )

        self.add_parameter(
            'number_of_detectors',
            get_cmd=self.comm.get_number_of_detectors,
            set_cmd=None,
            docstring='Gets the number of detectors in the instrument'
        )

        self.add_parameter(
            'counters',
            get_cmd=self.comm.acquire_cnts_t,
            docstring='Acquire points'
        )

        self.add_parameter(
            'measurement_periode',
            unit='ms',
            get_cmd=self.comm.get_measurement_periode,
            set_cmd=self.comm.set_measurement_periode,
            docstring='Measurement periode setting, determines the time that each point counts'
        )

        self.add_parameter(
            'timing',
            unit='ms',
            label='Time',
            parameter_class=TimeArray,
            channel=0,
            vals=Arrays(shape=(self.npts.get_latest, )),
            docstring='Parameter with timestamps for each point acquired'
        )

        for i in range(self.NUMBER_OF_DETECTORS):
            channel = i + 1
            name = 'channel' + str(channel)

            self.add_parameter(
                name,
                unit='',
                label='Counts',
                parameter_class=ChannelArray,
                channel=channel,
                setpoints=(self.timing,),
                vals=Arrays(shape=(self.npts.get_latest, )),
                snapshot_value=True,
                docstring='Parameter with setpoints with the counts for each point acquired'
            )

        self.add_parameter(
            'trigger_level',
            unit='mV',
            get_cmd=None,
            set_cmd=self.comm.set_trigger_level,
            docstring='Trigger level setting'
        )

        self.add_parameter(
            'bias_voltage',
            unit='mV',
            get_cmd=self.comm.get_bias_voltage,
            set_cmd=None,
            docstring='Gets the bias voltage'
        )

        self.connect_message()
"
405,38.0,Switzerland,"The Zurich Instruments HDAWG multi-channel Arbitrary Waveform Generator has one of the highest channel densities available in its class and is designed for advanced signal generation up to 750 MHz bandwidth. The HDAWG comes with either 4 or 8 DC-coupled, single-ended analog output channels with 16-bit vertical resolution.",Zihdawg 8,649.0,"Zurich Instruments Ltd. is a privately owned company developing and selling advanced test and measurement instruments equipped with software for dynamic signal analysis. 
",Qcodes Community,Zurich Instruments,"[OrderedDict([('id', 'attFUxuoeXBIspDuo'), ('width', 204), ('height', 228), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-aJZerh44NENOuc71uHbVA/mykVIYXi0ZNzJ6Ax23WvcMKdKEBIuq50kx6OYCOXv74UoACIkPS0rPAjd06U-37Ra1sC_1NpDuZUdNfddQyp3kywG2LzHS6Py3DtF0B6a3j7MaDLwtAUqILQ1FA4jN_V/a5DaVbBTWufeEgt6gkn-N7hGLk7kQFTztq5f8OUn8r4'), ('filename', 'Zurich_Instruments(logo).png'), ('size', 3655), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/tTH3_exZDRca7ndOG1GTkg/M3jvNvXPxKcHtyOk_L9xyIbunn0LpzohY1wWW8mraDCCOZEksE_A1dDjUqq0mTBTXcU0B3ICcyESSIesw318BA/qEXexaHoGoZKSK3_R-6efbwMUT3t_p5xYx2GPiGuI4o'), ('width', 32), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9Eonia4x7RaM-shc9mMbfQ/ZaqlbP76_rirAnk1bNGXXDXGc6_-gQNEzHyuqg9Mmhf-bbJGdm_BQlXdvot6wtF9q4W3UTRun_mOyQCS8csXbA/nzrc_d9PEvSIejxBRybqARZ1iLQgxqXeUFsvBMtpIpw'), ('width', 204), ('height', 228)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-mAPS_esAWs4FWXEc9JtCw/NptxydPBHQjtgt9K4DY5XDErIfRGAM-hoZAiA76YTcWlTmv0CARtgGMCiViSdJeAEKbbeOieqV8Zu6hSRI2WSw/V7cmuByL29KqOrDTgsRiGTG7SH67rKFKdUv3TmJt0iw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.zhinst.com/americas/en,Write a Python script that uses Qcodes Community to connect to a HDAWG Wavemeters,,['Wavemeters'],,HDAWG,https://docs.zhinst.com/pdf/ziHDAWG_UserManual.pdf,"[OrderedDict([('id', 'attDrX4Vlwjak4Pks'), ('width', 1183), ('height', 549), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FoVD0uU2Xxoqf3R74hxJJw/OHRvW6ypEGePYqjpcQEOAw_cQ6ff2bbe-tyb0r7l3sabMjCB96farh7alph1DfgBmZaIGWF5YRv5QGXmBmx9AkRG61-xBFkQTRVECRK21BK194BqD8iVDXQIR-u8c6Ao/7APXsiKhG-KbU9pgMzg-hnUfJkXWXJPPGBH038lkYVQ'), ('filename', 'hdawg8_front_2560.jpg.webp'), ('size', 57176), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/k4Y28VYkoQgbaCRwfZprNg/cW2vQl_QHyG0MapRLIm8qPXsiA1WHflmgj4MRA4yVOFbyYlyMOa-Lrmcmpr6vztIg0HDizuJJjG3Ewmx2FdL7PIQad96xwH_Z55nhcL8cGA/RdjSrWDXW2hOZUgoAHVVvEhd09nQeLjYAlMEN79frGY'), ('width', 78), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/WAa9Kqgyjw-TEpoG2Q_Peg/cd7rvw1N1n3cr81LvAeEejxskxFqTBO-IHphSwy78_FgaDhy_LrxcNgCNSyIFshoEGBwerCQiZ0-2aWK6vHXQU0pjO0XN_Z6u_Oq5sFiKy0/KQRXHH_qhO2FhG7meAC6djFwNq5SZjJc5_m7PPiwmmY'), ('width', 1103), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/vNM9RudUc_RfpsAplhAY_w/8JYngai8rcmOQAOovuUr6TF83YAiG43pFw-O-y5XdusJHPXK0xwFdnihbuCm4YmdK1Rt2lsGRmz3JVV1YI6G7_SC9flHQZG9OfVamJNJwEc/ufPd999bhXHghEdyQ2n5q_kSXyBvtJ_Ivm0tMBQ8lrQ'), ('width', 3000), ('height', 3000)]))]))])]",https://zhinst.com/americas/en/products/hdawg-arbitrary-waveform-generator,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/ZurichInstruments/ZIHDAWG8.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/ZurichInstruments/ZIHDAWG8.py,,,,,"import csv
import json
import os
import re
import textwrap
import time
from functools import partial
from typing import Any, List, Tuple, Union, Sequence, Dict, Optional

import numpy as np
import zhinst.utils

from qcodes import Instrument
from qcodes.utils import validators as validators

WARNING_CLIPPING = r""^Warning \(line: [0-9]+\): [a-zA-Z0-9_]+ has a higher "" \
                   r""amplitude than 1.0, waveform amplitude will be limited "" \
                   r""to 1.0$""
WARNING_TRUNCATING = r""^Warning \(line: [0-9]+\): waveform \S+ cut "" \
                     r""down to playable length from [0-9]+ to [0-9]+ samples "" \
                     r""\(should be a multiple of 8 samples for single channel"" \
                     r"" or 4 samples for dual channel waveforms\)$""
WARNING_ANY = r""^Warning \(line: [0-9]+\):.*$""


class CompilerError(Exception):
    """""" Errors that occur during compilation of sequence programs.""""""


class ZIHDAWG8(Instrument):
    """"""
    QCoDeS driver for ZI HDAWG8.
    Requires ZI LabOne software to be installed on the computer running QCoDeS
    (tested using LabOne 18.05.54618 and firmware 53866).
    Furthermore, the Data Server and Web Server must be running and a connection
    between the two must be made.

    Compiler warnings, when uploading and compiling a sequence program, can
    be treated as errors. This is desirable if the user of the driver does
    not want clipping or truncating of waveform to happen silently by the
    compiler. Warnings are constants on the module level and can be added to the
    drivers attribute ``warnings_as_errors``. If warning are added, they
    will raise a CompilerError.
    """"""

    def __init__(self, name: str, device_id: str, **kwargs) -> None:
        """"""
        Create an instance of the instrument.

        Args:
            name: The internal QCoDeS name of the instrument
            device_ID: The device name as listed in the web server.
        """"""
        super().__init__(name, **kwargs)
        self.api_level = 6
        (self.daq, self.device, self.props) = zhinst.utils.create_api_session(
            device_id, self.api_level,
            required_devtype='HDAWG')
        self.awg_module = self.daq.awgModule()
        self.awg_module.set('awgModule/device', self.device)
        self.awg_module.execute()
        node_tree = self.download_device_node_tree()
        self.create_parameters_from_node_tree(node_tree)
        self.warnings_as_errors: List[str] = []
        self._compiler_sleep_time = 0.01

    def snapshot_base(self, update: Optional[bool] = True,
                      params_to_skip_update: Optional[Sequence[str]] = None
                      ) -> Dict:
        """""" Override the base method to ignore 'feature_code' by default.""""""
        params_to_skip = ['features_code']
        if params_to_skip_update is not None:
            params_to_skip += list(params_to_skip_update)
        return super(ZIHDAWG8, self).snapshot_base(update=update,
                                                   params_to_skip_update=params_to_skip)

    def snapshot(self, update=True):
        """""" Override base method to make update default True.""""""
        return super(ZIHDAWG8, self).snapshot(update)

    def enable_channel(self, channel_number: int) -> None:
        """"""
        Enable a signal output, turns on a blue LED on the device.

        Args:
            channel_number: Output channel that should be enabled.
        """"""
        self.set('sigouts_{}_on'.format(channel_number), 1)

    def disable_channel(self, channel_number: int) -> None:
        """"""
        Disable a signal output, turns off a blue LED on the device.

        Args:
            channel_number: Output channel that should be disabled.
        """"""
        self.set('sigouts_{}_on'.format(channel_number), 0)

    def start_awg(self, awg_number: int):
        """"""
        Activate an AWG

        Args:
            awg_number: The AWG that should be enabled.
        """"""
        self.set('awgs_{}_enable'.format(awg_number), 1)

    def stop_awg(self, awg_number: int) -> None:
        """"""
        Deactivate an AWG

        Args:
            awg_number: The AWG that should be disabled.
        """"""
        self.set('awgs_{}_enable'.format(awg_number), 0)

    def waveform_to_wave(self, wave_name: str, waveform: np.ndarray) -> None:
        """"""
        Write waveforms to a .wave file in the modules data directory so that it
        can be referenced and used in a sequence program.

        Args:
            wave_name: Name of the wave file, is used by a sequence program.
            waveforms: Waveforms that is to be written to a .wave file.
        """"""
        data_dir = self.awg_module.getString('awgModule/directory')
        wave_dir = os.path.join(data_dir, ""awg"", ""waves"")
        if not os.path.isdir(wave_dir):
            raise Exception(f""AWG module wave directory {wave_dir} does not exist or is not a directory"")
        wave_file = os.path.join(wave_dir, wave_name + '.wave')

        wave_array = zhinst.utils.convert_awg_waveform(waveform)
        wave_array.tofile(wave_file)

    def waveform_to_csv(self, wave_name: str, *waveforms: list) -> None:
        """"""
        Write waveforms to a CSV file in the modules data directory so that it
        can be referenced and used in a sequence program. If more than one
        waveform is provided they will be played simultaneously but on separate
        outputs.

        Args:
            wave_name: Name of the CSV file, is used by a sequence program.
            waveforms: One or more waveforms that are to be written to a
                CSV file. Note if there are more than one waveforms then they
                have to be of equal length, if not the longer ones will be
                truncated.
        """"""
        data_dir = self.awg_module.getString('awgModule/directory')
        wave_dir = os.path.join(data_dir, ""awg"", ""waves"")
        if not os.path.isdir(wave_dir):
            raise Exception(
                ""AWG module wave directory {} does not exist or is not a ""
                ""directory"".format(
                    wave_dir))
        csv_file = os.path.join(wave_dir, wave_name + '.csv')
        with open(csv_file, ""w"", newline='') as f:
            writer = csv.writer(f, delimiter=';')
            writer.writerows(zip(*waveforms))

    @staticmethod
    def generate_csv_sequence_program(wave_info: List[
        Tuple[int, Union[str, None], Union[str, None]]]) -> str:
        """"""
        A method that generates a sequence program that plays waveforms from
        csv files.

        Args:
            wave_info: A list of tuples containing information about the waves
                that are to be played. Every tuple should have a channel number
                and wave, marker or both wave and marker.

        Returns:
            A sequence program that can be compiled and uploaded.

        """"""
        awg_program = textwrap.dedent(""""""
                HEADER
                DECLARATIONS
                while(true){
                    playWave(WAVES);
                }
                """""")
        sequence_header = '// generated by {}\n'.format(__name__)
        awg_program = awg_program.replace('HEADER', sequence_header)
        declarations = ZIHDAWG8._generate_declarations(wave_info)
        awg_program = awg_program.replace('DECLARATIONS', declarations)
        play_wave_arguments = ZIHDAWG8._get_waveform_arguments(wave_info)
        awg_program = awg_program.replace('WAVES', play_wave_arguments)
        return awg_program

    @staticmethod
    def _generate_declarations(wave_info):
        declarations = """"
        for _, wave, marker in wave_info:
            if wave is not None and marker is not None:
                declarations += ('wave {0} = ""{0}"";\n'.format(wave))
                declarations += ('wave {0} = ""{0}"";\n'.format(marker))
                declarations += ('{0} = {0} + {1};\n'.format(wave, marker))
            elif wave is not None:
                declarations += ('wave {0} = ""{0}"";\n'.format(wave))
            elif marker is not None:
                declarations += ('wave {0} = ""{0}"";\n'.format(marker))
        return declarations

    @staticmethod
    def _get_waveform_arguments(wave_info):
        argument_string = ('{}, {}' * len(wave_info)).replace('}{', '}, {')
        play_wave_arguments = []
        for channel, wave, marker in wave_info:
            play_wave_arguments.append(channel)
            wave = wave if wave is not None else marker
            play_wave_arguments.append(wave)
        return argument_string.format(*play_wave_arguments)

    def upload_sequence_program(self, awg_number: int,
                                sequence_program: str) -> int:
        """"""
        Uploads a sequence program to the device equivalent to using the the
        sequencer tab in the device's gui.

        Args:
            awg_number: The AWG that the sequence program will be uploaded to.
            sequence_program: A sequence program that should be played on the
                device.

        Returns:
            0 is Compilation was successful with no warnings.
            2 if Compilation was successful but with warnings.

        Raises:
            CompilerError: If error occurs during compilation of the sequence
                program, or if a warning is elevated to an error.
        """"""
        self.awg_module.set('awgModule/index', awg_number)
        self.awg_module.set('awgModule/compiler/sourcestring', sequence_program)
        while len(self.awg_module.get('awgModule/compiler/sourcestring')
                  ['compiler']['sourcestring'][0]) > 0:
            time.sleep(self._compiler_sleep_time)

        if self.awg_module.getInt('awgModule/compiler/status') == 1:
            raise CompilerError(
                self.awg_module.getString('awgModule/compiler/statusstring'))
        elif self.awg_module.getInt('awgModule/compiler/status') == 2:
            self._handle_compiler_warnings(
                self.awg_module.getString('awgModule/compiler/statusstring'))
        while self.awg_module.getDouble('awgModule/progress') < 1.0:
            time.sleep(self._compiler_sleep_time)

        return self.awg_module.getInt('awgModule/compiler/status')

    def _handle_compiler_warnings(self, status_string: str) -> None:
        warnings = [warning for warning in status_string.split('\n') if
                    re.search(WARNING_ANY, warning) is not None]
        errors = []
        for warning in warnings:
            for warning_as_error in self.warnings_as_errors:
                if re.search(warning_as_error, warning) is not None:
                    errors.append(warning)
            if warning not in errors:
                self.log.warning(warning)
        if len(errors) > 0:
            raise CompilerError('Warning treated as an error.', *errors)

    def upload_waveform(self, awg_number: int, waveform: list,
                        index: int) -> None:
        """"""
        Upload a waveform to the device memory at a given index.

        Note:
            There needs to be a place holder on the device as this only replaces
            a data in the device memory but does not allocate new memory space.

        Args:
            awg_number: The AWG where waveform should be uploaded to.
            waveform: An array of floating point values from -1.0 to 1.0, or
                integers in the range (-32768...+32768)
            index: Index of the waveform that will be replaced. If there are
                more than 1 waveforms used then the index corresponds to the
                position of the waveform in the Waveforms sub-tab of the AWG tab
                in the GUI.
        """"""
        self.set('awgs_{}_waveform_index'.format(awg_number), index)
        self.daq.sync()
        self.set('awgs_{}_waveform_data'.format(awg_number), waveform)

    def set_channel_grouping(self, group: int) -> None:
        """"""
        Set the channel grouping mode of the device.

        Args:
            group: 0: groups of 2. 1: groups of 4. 2: groups of 8 i.e., one
                sequencer program controls 8 outputs.
        """"""
        self.set('system_awg_channelgrouping', group)

    def create_parameters_from_node_tree(self, parameters: dict) -> None:
        """"""
        Create QuCoDeS parameters from the device node tree.

        Args:
            parameters: A device node tree.
        """"""
        for parameter in parameters.values():
            getter = partial(self._getter, parameter['Node'],
                             parameter['Type']) if 'Read' in parameter[
                'Properties'] else None
            setter = partial(self._setter, parameter['Node'],
                             parameter['Type']) if 'Write' in parameter[
                'Properties'] else False
            options = validators.Enum(
                *[int(val) for val in parameter['Options'].keys()]) \
                if parameter['Type'] == 'Integer (enumerated)' else None
            parameter_name = self._generate_parameter_name(parameter['Node'])
            self.add_parameter(name=parameter_name,
                               set_cmd=setter,
                               get_cmd=getter,
                               vals=options,
                               docstring=parameter['Description'],
                               unit=parameter['Unit']
                               )

    @staticmethod
    def _generate_parameter_name(node):
        values = node.split('/')
        return '_'.join(values[2:]).lower()

    def download_device_node_tree(self, flags: int = 0) -> dict:
        """"""
        Args:
            flags:
                ziPython.ziListEnum.settingsonly (0x08): Returns only nodes
                which are marked as setting
                ziPython.ziListEnum.streamingonly (0x10): Returns only
                streaming nodes
                ziPython.ziListEnum.subscribedonly (0x20): Returns only
                subscribed nodes
                ziPython.ziListEnum.basechannel (0x40): Return only one instance
                of a node in case of multiple channels

                Or any combination of flags can be used.

        Returns:
            A dictionary of the device node tree.
        """"""
        node_tree = self.daq.listNodesJSON('/{}/'.format(self.device), flags)
        return json.loads(node_tree)

    def _setter(self, name: str, param_type: str, value: Any) -> None:
        if param_type == ""Integer (64 bit)"" or \
                param_type == 'Integer (enumerated)':
            self.daq.setInt(name, value)
        elif param_type == ""Double"":
            self.daq.setDouble(name, value)
        elif param_type == ""String"":
            self.daq.setString(name, value)
        elif param_type == ""ZIVectorData"":
            self.daq.vectorWrite(name, value)

    def _getter(self, name: str, param_type: str) -> Any:
        if param_type == ""Integer (64 bit)"" or \
                param_type == 'Integer (enumerated)':
            return self.daq.getInt(name)
        elif param_type == ""Double"":
            return self.daq.getDouble(name)
        elif param_type == ""String"":
            return self.daq.getString(name)
        elif param_type == ""ZIVectorData"":
            return self.daq.getAsEvent(name)
"
406,367.3,"Abingdon, United Kingdom",,Kelvinox,396.0,"Oxford Instruments plc is a United Kingdom manufacturing and research company that designs and manufactures tools and systems for industry and research. The company is headquartered in Abingdon, Oxfordshire, England, with sites in the United Kingdom, United States, Europe, and Asia.[2] It is listed on the London Stock Exchange and is a constituent of the FTSE 250 Index.[3]
",Qcodes Community,Oxford Instruments,"[OrderedDict([('id', 'attlP8b4ZXQRqQBKm'), ('width', 119), ('height', 41), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/L40kknza-cq9NhsYZ_dxRA/X7-tAyMECMdzvktYW1Kl9_wKs3wsykQuO0IZcUkIUzd1B_SdZpcWdwl9ire2dJ4mn_NIUCi-fXkE9trZOQYGNZcnMFjuTh1vvVGqKQD84dU/VrmXwTzIYFMM9z1rDroBhvlRqvT8XcH2PaS_F3-DBVs'), ('filename', 'download (5).png'), ('size', 1521), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_iwpStMuWtl-rSHbrkzUAQ/EgBTs4xZ7Dzht1W2XWHZwA1IGIJgHbD9WzrjaY4JDkCpRuPRMJlEgH9kAtbBEv3RD3HgMi1bApV67Fl2XLSdRA/eqNmVJzdrw5n0i3TmwADh2OeVb_TzPLbJdyK-fKB4Js'), ('width', 104), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/2KWjy__chX3lYbHxvvzC7A/oCguq8sGx6ptCIX60qNDU4zX3wcA7m3tHoFRlXkYelctl7EqLrPQoNCeIqY22MErR36kQ4F_3tKFWxOX6I_cew/mOJ13fJh8O9VXyMA8OvTyOiIwyNW4KVH-IsgIVcfDb0'), ('width', 119), ('height', 41)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/DvsxvVsG2-FCGVv7Wp2EOQ/iepJ_ZVF6MEjfwH-AhuZOXTSsXAle_ZKdHBsg8p6sS1bjnYOipyCEkWYxvdPihG5eqYM44AUH9GOoLigHgnrew/5THJTVgjyS9Y6CAHL_n4U7QQVgBcQOwU25PKU6DxVzQ'), ('width', 3000), ('height', 3000)]))]))])]",https://www.oxinst.com/,Write a Python script that uses Qcodes Community to connect to a {Device name} ,,,,,,,,,,,,,,
410,21.4,"Westerville, Ohio, USA","The Model 331 cryogenic temperature controller combines the easy operation and unsurpassed reliability of the Model 330 with improved sensor input and interface flexibility, including compatibility with negative temperature coefficient (NTC) resistance temperature detectors (RTDs). Backed by the Lake Shore tradition of excellence in cryogenic sensors and instrumentation, the Model 331 temperature controller sets the standard for mid-price range temperature control instruments.",Model 331,352.0,"Supporting advanced scientific research, Lake Shore is a leading global innovator in measurement and control solutions.
",Qcodes Community,Lakeshore,"[OrderedDict([('id', 'attzehTVrrXJAMgad'), ('width', 256), ('height', 72), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/6WgWgYzcnadqtQAsudq-EQ/qBMiciOZubDp7AaEQb1Tv-1U7eOQy4PGJ_AMUo3dTbb-Pm8GYMROAQ5fttNK1jW0qJU0F_aSSOYUidImJnZwIqJCOqvuAe5gHRBm6AHjZ10/F119v_xcdXTD3MkzuV2EejAV_L48lDkINVwOof3RvIk'), ('filename', 'lake-shore-logo.svg'), ('size', 11991), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/WQmuNgpMl44p6V9XmZ4CyQ/VdzncpNu4Dlldt-i-xrpQM74B3f6bDLTaP0ie7-T7n0hZK37WfnL-v3ss9yYKa0y5lc58Ghyk7omaX-5odAxJNwzaTPatTY72Z-oKOjyfiM/_QAqiUYoQZu56EGbkjlIF-HpunexUq5tQDhy3Tr_ees'), ('width', 128), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qB77VOwXqmX7ni1DyoSpdA/C1ho5lb9cSlVTcsONgw9K2Ge-vBjQmxzNmaUhFDgUmH8r2L3uXqv5KBe-nsatdxn3GxAFHK34MBKdCc0wQfoa4ldCEorN3IH5V9DrMzhJWU/wodeRmUKgG9QfZMfQh9drX3ilz8sIWSWqDCXSD_ogqE'), ('width', 256), ('height', 72)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_138iKkNN5kpXaPATAYnsw/oA-4OBF8ojXeHh3X37Mpe3HKE7SCUItHGxgJv5X3ZDhGXNXe1y3Aq1aDhpuQVDsX4WgdMgUUKiWfDUhaANRWCTvATEnw_afgI6F5R89tpdM/tSHU0OcwY60JScIOEF2BOGOKZpsJVHz5m4XQ420dbKk'), ('width', 3000), ('height', 3000)]))]))])]",https://www.lakeshore.com/home,Write a Python script that uses Qcodes Community to connect to a {Device name} Temperature Controllers,https://en.wikipedia.org/wiki/Temperature_control,['Temperature Controllers'],"Temperature control is a process in which change of temperature of a space (and objects collectively there within), or of a substance, is measured or otherwise detected, and the passage of heat energy into or out of the space or substance is adjusted to achieve a desired temperature.",,https://www.lakeshore.com/docs/default-source/product-downloads/331_manual.pdf?sfvrsn=5ed3bf08_1,"[OrderedDict([('id', 'attpTGvKOo21mFXrh'), ('width', 505), ('height', 273), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/OpuZaU70lYN6IPtFBqZliA/Ckx2vDmO8wgubDmQWlzjxgceUSzs72F7QIoSAjvi0JABd810VAzFucBB5P-gtxF4Q8AL1cAVbuwdjnHCDnsxMA/ctj0_kSfoZZua4E_9hETVfzzHWf8-waJqQWwkFWvEbk'), ('filename', '331.png'), ('size', 155224), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/I7_56tXktb7BGA-sByZoPQ/ImHAXmE_YTU0xXCf2NBj0QLQDPQBdrDMsXYoKXAg3Gf2wcEG22CnRC9K9Gn_SE5TVWXPBDkzAj5WTAbmis9A7Q/iwEP9kEBnX3WQ28g3lC_ssY_LqbDu7BLb4IeOYS2l4Y'), ('width', 67), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/KC2PSMjGk0hW828jA51bAQ/s_v9XZE8It4Fe31d6nDzm4AwiCK6Usr3xNav-fMfa0DcAOyMt5xB_hVDY5ciRnlLAqSqm7wM2vLLNLstP_stMQ/-yLNP7TlSzQ5CvHb1HkSyNJ0nRsGxWPtZkQPiJ8wuhY'), ('width', 505), ('height', 273)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/uQZDbc-8fdfe0zyks_Zbhg/ELjUgPOAWAmOAny-H76QNpDQcPM1m1WT7LVFxMrAsKSRMX7wp5q5PsHODuJwasCejchv9yLN3dtNnAarL8jghw/qEqBsMeBJCzh0tW-FQotgtsG1X5jLRP4WXUC5OWxmuQ'), ('width', 3000), ('height', 3000)]))]))])]",https://www.lakeshore.com/products/categories/overview/discontinued-products/discontinued-products/model-331-cryogenic-temperature-controller,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Lakeshore/Model_331.py,https://qcodes.github.io/Qcodes_contrib_drivers/examples/Lakeshore_311.html,,,True,,"from qcodes import VisaInstrument, InstrumentChannel, ChannelList
from qcodes.utils.validators import Enum


class SensorChannel(InstrumentChannel):
    """"""
    Channel class for the Lakeshore 331.

    Args:
        parent: The parent Lakeshore 331.
        name: The channel name.
        channel: The channel ID.

    Attributes:
        channel: The channel ID.
    """"""

    _channel_values = Enum('A', 'B')

    def __init__(self, parent: ""Model_331"", name: str, channel: str):
        super().__init__(parent, name)

        # validate the channel value
        self._channel_values.validate(channel)
        self.channel = channel

        # add parameters
        self.add_parameter('temperature',
                           get_cmd='KRDG? {}'.format(self.channel),
                           get_parser=float,
                           label='temperature {}'.format(self.channel),
                           unit='K')

        self.add_parameter('sensor_raw',
                           get_cmd='SRDG? {}'.format(self.channel),
                           get_parser=float,
                           label='sensor raw {}'.format(self.channel),
                           unit=u""\u03A9"")  # TODO: this will vary based on sensor type

        self.add_parameter('sensor_status',
                           get_cmd='RDGST? {}'.format(self.channel),
                           val_mapping={
                               'ok': 0,
                               'invalid reading': 1,
                               'temp underrange': 16,
                               'temp overrange': 32,
                               'sensor units zero': 64,
                               'temp overrange, sensor units zero': 96,
                               'Sensor Units Overrange': 128,
                               'temp underrange, sensor units overrange': 144},
                           label='sensor status {}'.format(self.channel))


class Model_331(VisaInstrument):
    """"""
    Instrument class for the Lakeshore 331.

    Args:
        name: The channel name.
        address: The GPIB address.
    """"""

    _loop = 1

    def __init__(self, name: str, address: str, **kwargs):
        super().__init__(name, address, terminator=""\r\n"", **kwargs)

        # add channels
        channels = ChannelList(self, ""TempSensors"", SensorChannel, snapshotable=False)
        for channel_id in ('A', 'B'):
            channel = SensorChannel(self, 'Chan{}'.format(channel_id), channel_id)
            channels.append(channel)
            self.add_submodule(channel_id, channel)
        channels.lock()
        self.add_submodule(""channels"", channels)

        # add parameters
        self.add_parameter('heater_output',
                           get_cmd='HTR?',
                           get_parser=float,
                           label='heater output',
                           unit='%')

        self.add_parameter('heater_range',
                           get_cmd='RANGE?',
                           get_parser=int,
                           set_cmd='RANGE {}',
                           val_mapping={
                               'off': 0,
                               '0.5W': 1,
                               '5W': 2,
                               '50W': 3},
                           label='heater range')

        self.add_parameter('input',
                           get_cmd='CSET? %i' % self._loop,
                           set_cmd='CSET ' + str(self._loop) + ',{},1,1,1',
                           get_parser=lambda ans: ans[0],
                           label='input')

        self.add_parameter('setpoint',
                           get_cmd='SETP? '+str(self._loop),
                           set_cmd='SETP ' + str(self._loop) + ', {}',
                           get_parser=float,
                           label='setpoint',
                           unit='K')

        # print connect message
        self.connect_message()
"
412,5.0,USA,"The LDA-602Q Lab Brick USB programmable 50 Ohm high resolution digital attenuator has an input power of up to +28 dBm, and offers frequency coverage of 200 to 6,000 MHz. It has an attenuation range of 120 dB and a step size of 0.1 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-602Q ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-602Q,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attUTENiRF6l0AFcO'), ('width', 327), ('height', 388), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZXPs9jSF5HxNB8jnhXlOzQ/fUuVAE6lHmDJUFvIHUZQpiJBg3U-o7eujwT3Yl-6zHr1YgM3VRXVFeaxJ_zeZlatrCDvPU0iRmRNE4cOgzDScfiN45DtKFZhC5xBIrGyoP4/ff4cEEvU3ssV9XuDBa54EcW829C1GCoD6OgFOhu5kMA'), ('filename', 'vaunix-lda-602q.png'), ('size', 121735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/ZQOKH1-v9kq8jJwsJY476w/rIsa4d5D6SazhSNingBAZcuUmI_P5Fjqk2uxa09j4gh_CkRlew-xgsLilthaB_VRroe6IFk5imaSfyjrMd_ZHQ/GO2rvcEDvdZY2NYZ4UsPcv-k6x-VYsmaDIbP7eUhG2M'), ('width', 30), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/7IhJPakNkJWvYP_Yg-3YXQ/GpwWHBjv5MCXkhZHQNx7qEuE8ugJ-OvrYw34FSHRDY1axYmwQr-DcTSNQScUIjICqUs2jlHdRoY92ewvFlWT-A/AYfayGKkWFca3h5jnN8sO1bCtqv6_8sRcg8x73eCsSc'), ('width', 327), ('height', 388)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/RyrvFkSPX4AISKbBBU1sQg/NoLlA92urFEkIziMGkC0gxTgt3tK8CqXIUmKPyqimDsY3s3QoGhn4gz5xfwbwNzprCUi7NjzY8PqKLV190PgJw/TISNnu8SwEm085VLCMfk7pzcIxuMhBlnSTbuzWX9Uqg'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-602q-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,2900.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
417,5.0,USA,"The LDA-802EH Digital Attenuator is a high dynamic range, bidirectional, 50 Ohm step attenuator. The LDA-802EH provides 120 dB of attenuation control range from 200 to 8000 MHz with a step size of 0.1 dB. The attenuators are easily programmable for fixed attenuation, swept attenuation ramps and fading profiles directly from the included Graphical User Interface (GUI). Alternatively, for users wishing to develop their own interface, Vaunix supplies LabVIEW drivers, Windows API DLL files, Linux drivers, Python examples and much more.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-802EH ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-802EH,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attA12ZwM8fNa8gjn'), ('width', 824), ('height', 644), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/v3i5b2mxf-T4mKBvPTsugw/8JcAd3NHQ4CS_GHnIDwSzZ3IXbaK5ZHWFYW6lRm5mmfmh4taUCPQHZd8NbXEcgrkdxy2sJ9H8OILNMwKtjRpmAKVBP2XOUNZ-tvxmD_g8YaC_6DSA8EgwqQQ8MyCTqxH/6vWjXrljtL-7s1dKqSCh4KJSzc2_91u1JtLqmiCep2w'), ('filename', 'vaunix-digital-attenuator-602eh.png'), ('size', 818096), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/0BZa8LAaCcwVbThGWMMzaw/CqusFi1mHFMWCSeGKIJ-W5hvERQbhZL4kmiK_YVeUyBF81cYVGLQh6-6THyTbcERGg2rqEc0mgycJzCs7JsNLA/SHt5fz6VbNRNsWGQ_LmslfeCcD47AgAqmQyeZJZBTwg'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/wrme-T9ZhDjevBBzm5fmJQ/d_9XyMBGZHXqjeJNc4_fYyNXqWCZGCu2t2hIpc4ETVXzfHx-8uvsdrpSW1MafG_GdwLhoFKAkYEHzY1xXGrOrw/YKKXeHU_5_tz_4_WQnKJB1tvu7uH9JSmJrJxm8R8qVY'), ('width', 655), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ddh0LtwNruFBVQ4xGvZs0g/0sQ14AZC18BQIJweXROBjDo2uChyY74p14m7F-ESXLSui5ciPtBvb3kyzP-7vhZDRVBhdDJb5mqdISxzza6n1Q/RSBoNZ3pQETm8LU4GrRygvFU8fYlqaMglE7eJtIf7IM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-802eh-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,875.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
419,21.4,"Westerville, Ohio, USA","The Model 625 superconducting magnet power supply is the ideal supply for small to medium sized superconducting magnets used in high sensitivity materials research applications. The Model 625 is a practical alternative to both the larger, one size fits all, superconducting magnet supplies and the endless adaptations of generic power supplies. By limiting output power, Lake Shore was able to concentrate on the performance requirements of the most demanding magnet users. The resulting Model 625 provides high precision, low noise, safety, and convenience.",Model 625,349.0,"Supporting advanced scientific research, Lake Shore is a leading global innovator in measurement and control solutions.
",Qcodes Community,Lakeshore,"[OrderedDict([('id', 'attzehTVrrXJAMgad'), ('width', 256), ('height', 72), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/6WgWgYzcnadqtQAsudq-EQ/qBMiciOZubDp7AaEQb1Tv-1U7eOQy4PGJ_AMUo3dTbb-Pm8GYMROAQ5fttNK1jW0qJU0F_aSSOYUidImJnZwIqJCOqvuAe5gHRBm6AHjZ10/F119v_xcdXTD3MkzuV2EejAV_L48lDkINVwOof3RvIk'), ('filename', 'lake-shore-logo.svg'), ('size', 11991), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/WQmuNgpMl44p6V9XmZ4CyQ/VdzncpNu4Dlldt-i-xrpQM74B3f6bDLTaP0ie7-T7n0hZK37WfnL-v3ss9yYKa0y5lc58Ghyk7omaX-5odAxJNwzaTPatTY72Z-oKOjyfiM/_QAqiUYoQZu56EGbkjlIF-HpunexUq5tQDhy3Tr_ees'), ('width', 128), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qB77VOwXqmX7ni1DyoSpdA/C1ho5lb9cSlVTcsONgw9K2Ge-vBjQmxzNmaUhFDgUmH8r2L3uXqv5KBe-nsatdxn3GxAFHK34MBKdCc0wQfoa4ldCEorN3IH5V9DrMzhJWU/wodeRmUKgG9QfZMfQh9drX3ilz8sIWSWqDCXSD_ogqE'), ('width', 256), ('height', 72)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/_138iKkNN5kpXaPATAYnsw/oA-4OBF8ojXeHh3X37Mpe3HKE7SCUItHGxgJv5X3ZDhGXNXe1y3Aq1aDhpuQVDsX4WgdMgUUKiWfDUhaANRWCTvATEnw_afgI6F5R89tpdM/tSHU0OcwY60JScIOEF2BOGOKZpsJVHz5m4XQ420dbKk'), ('width', 3000), ('height', 3000)]))]))])]",https://www.lakeshore.com/home,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.lakeshore.com/docs/default-source/product-downloads/catalog/lstc_625_l.pdf?sfvrsn=35bdc355_1,"[OrderedDict([('id', 'attgwvzzpIaSMC8Ir'), ('width', 505), ('height', 192), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fPPSw0GpWjaAladQrFIv8A/qPXZkFIimY-m5O1nKe-VKkT1YRFWrTIHc0C3xppSHR6dfesXFNNsYLcEjBdVNLUi2YDsBKP7F1pGNa23gje6wg/PAQwvRy88DolJ_gwV-LrWb89Kp7hrF5MgDsJJ6pgBXo'), ('filename', '625.png'), ('size', 132679), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/EphjtyMike_alHPN7YeBEQ/By1DsNmdnA08QsMCgj8OOk1MY2rC-BeSRcwLbhUAMywIj7WOp-mRbThT3sFteqTQgfZEn7kxd5QPn2EstBs5Sw/NIStaN7D6KKe1wVPEl0wIEx28kAc8R-Rw-MUDeC4xHk'), ('width', 95), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fqCiyKTRgQdElLuBXLoSPg/uhFdj6GMGcXd8DfKgMqWXqsS95VzyqyaFSZX3MsVBM_Bw2NwoN6I_UpTNuK3Va87vg-vl4u8Tg-y2bsQC8BvIw/0O9Le85gvsqT4tXeWceR_6rImlGZyLet2CDFs4JSM1c'), ('width', 505), ('height', 192)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ckl1heTzze-OwsPetkidPg/g-yvWgMX5ZmCs_le5eULB9I1GQnsj5iKwZEt9toExzmsrZqIJrjNoeWjgVAK-7DRJBEa9js15DMUuG4Lm3Lflw/8cuIfVF5Cwigs9xYjaov8Rx-HsYjN_WPaQSOGJHJ_e4'), ('width', 3000), ('height', 3000)]))]))])]",https://www.lakeshore.com/products/categories/overview/material-characterization-products/superconducting-magnet-power-supply/model-625-superconducting-magnet-power-supply,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Lakeshore/Model_625.py,https://qcodes.github.io/Qcodes_contrib_drivers/examples/Lakeshore_625.html,11951.0,,,,"import logging
import time
from typing import Union, Tuple


from qcodes import VisaInstrument
from qcodes.utils.validators import  Numbers, Enum


class Lakeshore625(VisaInstrument):
    """"""
    Driver for the Lakeshore Model 625 superconducting magnet power supply.

    This class uses T/A and A/s as units.

    Args:
        name (str): a name for the instrument
        coil_constant (float): Coil contant of magnet, in untis of T/A
        field_ramp_rate (float): Magnetic field ramp rate, in units of T/min
        address (str): VISA address of the device
    """"""

    def __init__(self, name: str, coil_constant: float,  field_ramp_rate: float, address: str,
                 reset: bool=False, terminator:str='', **kwargs) -> None:

        super().__init__(name, address, terminator=terminator, **kwargs)
    
        # Add reset function
        self.add_function('reset', call_cmd='*RST')
        if reset:
            self.reset()

        # Add power supply parameters
        self.add_parameter(name='current_limit',
                           unit=""A"",
                           set_cmd=self._set_curent_limit,
                           get_cmd=self._get_current_limit,
                           get_parser=float,
                           vals=Numbers(0, 60.1),
                           docstring=""Maximum output current""
                           )
        
        self.add_parameter(name='voltage_limit',
                           unit=""V"",
                           set_cmd=self._set_voltage_limit,
                           get_cmd=self._get_voltage_limit,
                           get_parser=float,
                           vals=Numbers(0, 5),
                           docstring=""Maximum compliance voltage""
                           )
        
        self.add_parameter(name='current_rate_limit',
                           unit=""A/s"",
                           set_cmd=self._set_current_rate_limit,
                           get_cmd=self._get_current_rate_limit,
                           get_parser=float,
                           vals=Numbers( 0.0001, 99.999),
                           docstring=""Maximum current ramp rate""
                           )
        
        self.add_parameter(name='voltage',
                           unit = 'V',
                           set_cmd=""SETV {}"",
                           get_cmd='RDGV?',
                           get_parser=float,
                           vals=Numbers(-5, 5)
                           )
        
        self.add_parameter(name='current',
                           unit = 'A',
                           set_cmd=""SETI {}"",
                           get_cmd='RDGI?',
                           get_parser=float,
                           vals=Numbers(-60, 60)
                           )
        
        self.add_parameter(name='current_ramp_rate',
                           unit = 'A/s',
                           set_cmd=""RATE {}"",
                           get_cmd='RATE?',
                           get_parser=float
                           )
        
        self.add_parameter(name='ramp_segments',
                           set_cmd=""RSEG {}"",
                           get_cmd='RSEG?',
                           get_parser=int,
                           val_mapping={'disabled': 0,
                                        'enabled': 1}
                           )
        
        self.add_parameter(name='persistent_switch_heater',
                           set_cmd=self._set_persistent_switch_heater_status,
                           get_cmd=self._get_persistent_switch_heater_status,
                           get_parser=int,
                           val_mapping={'disabled': 0,
                                        'enabled': 1}
                           )
    
        self.add_parameter(name='quench_detection',
                           set_cmd=self._set_quench_detection_status,
                           get_cmd=self._get_quench_detection_status,
                           get_parser=int,
                           val_mapping={'disabled': 0,
                                        'enabled': 1}
                           )
    
        self.add_parameter(name='quench_current_step_limit',
                           unit = 'A/s',
                           set_cmd=self._set_quench_current_step_limit,
                           get_cmd=self._get_quench_current_step_limit,
                           get_parser=float,
                           vals=Numbers(0.01, 10)
                           )

        self.add_parameter(name='ramping_state',
                           get_cmd=self._get_ramping_state,
                           vals=Enum('ramping', 'not ramping')
                           )
        
        self.add_parameter(name='operational_error_status',
                           get_cmd=self._get_operational_errors,
                           get_parser=str
                           )
        
        self.add_parameter(name='oer_quench',
                           get_cmd=self._get_oer_quench_bit,
                           get_parser=int,
                           val_mapping={'no quench detected': 0,
                                        'quench detected': 1}
                           )


        # Add solenoid parameters
        self.add_parameter(name='coil_constant_unit',
                           set_cmd=self._set_coil_constant_unit,
                           get_cmd=self._get_coil_constant_unit,
                           get_parser=int,
                           val_mapping={'T/A': 0,
                                        'kG/A': 1},
                           docstring=""unit of the coil constant, either T/A (default) or kG/A""
                           )
    
        self.add_parameter(name='coil_constant',
                           unit = self.coil_constant_unit,
                           set_cmd=self._update_coil_constant,
                           get_cmd=self._get_coil_constant,
                           get_parser=float,
                           vals=Numbers(0.001, 999.99999)  # what are good numbers here?
                           )
        
        self.add_parameter(name='field',
                           unit = 'T',
                           set_cmd=self.set_field,
                           get_cmd='RDGF?',
                           get_parser=float
                           )
        
        self.add_parameter(name='field_ramp_rate',
                           unit = 'T/min',
                           set_cmd=self._set_field_ramp_rate,
                           get_cmd=self._get_field_ramp_rate,
                           get_parser=float,
                           docstring=""Field ramp rate (T/min)""
                           )

   
        # Add clear function
        self.add_function('clear', call_cmd='*CLS')
        
        # disable persistent switch heater by default
        self.persistent_switch_heater('disabled')
        
        # disable ramp segments by default
        self.ramp_segments('disabled')
        
        # set coil constant unit to T/A by default
        self.coil_constant_unit('T/A')

        # assign init parameters
        self.coil_constant(coil_constant)
        self.field_ramp_rate(field_ramp_rate)

        # print connect message
        self.connect_message()


    def _sleep(self, t: float) -> None:
        """"""
        Sleep for a number of seconds t. If we are or using
        the PyVISA 'sim' backend, omit this
        """"""
        simmode = getattr(self, 'visabackend', False) == 'sim'

        if simmode:
            return
        else:
            time.sleep(t)


    # get functions returning several values
    def _get_limit(self) -> Tuple[float, float, float]:
        """"""
        Limit Output Settings Query

        Returns
        -------
            <current>, <voltage>, <rate>
        """"""
        raw_string = self.ask('LIMIT?')
        current_limit, voltage_limit, current_rate_limit = raw_string.split(',')
        return float(current_limit), float(voltage_limit), float(current_rate_limit)


    def _get_persistent_switch_heater_setup(self) -> Tuple[int, float, float]:
        """"""
        Persistent Switch Heater Parameter Query

        Returns
        -------
            <enable>, <current>, <delay>
        """"""
        raw_string = self.ask('PSHS?')
        status, psh_current, psh_delay = raw_string.split(',')
        return int(status), float(psh_current), float(psh_delay)


    def _get_quench_detection_setup(self) -> Tuple[int, float]:
        """"""
        Quench Parameter Query

        Returns
        -------
            <enable>, <rate>
        """"""
        raw_string = self.ask('QNCH?')
        status, current_step_limit = raw_string.split(',')
        return int(status), float(current_step_limit)


    def _get_field_setup(self) -> Tuple[str, float]:
        """"""
        Computed Magnetic Field Parameter Query

        Returns
        -------
            <units>, <constant>
        """"""
        raw_string = self.ask('FLDS?')
        unit, coil_constant = raw_string.split(',')
        return str(unit), float(coil_constant)    


    # get functions for parameters
    def _get_current_limit(self) -> float:
        """"""
        Get maximum allowed output current setting.

        Returns
        -------
            <current>
        """"""
        current_limit, voltage_limit, current_rate_limit = self._get_limit()
        return current_limit


    def _get_voltage_limit(self) -> float:
        """"""
        Gets maximum allowed compliance voltage setting
        
        Returns
        -------
            <voltage>
        """"""
        current_limit, voltage_limit, current_rate_limit = self._get_limit()
        return voltage_limit


    def _get_current_rate_limit(self) -> float:
        """"""
        Gets maximum allowed output current ramp rate setting

        Returns
        -------
            <rate>
        """"""
        current_limit, voltage_limit, current_rate_limit = self._get_limit()
        return current_rate_limit


    def _get_persistent_switch_heater_status(self) -> int:
        """"""
        Queries if there is a persistent switch: 0 = Disabled (no PSH), 1 = Enabled

        Returns
        -------
            status
        """"""
        status, psh_current, psh_delay = self._get_persistent_switch_heater_setup()
        return status


    def _get_quench_detection_status(self) -> int:
        """"""
        Queries if quench detection is to be used: 0 = Disabled, 1 = Enabled

        Returns
        -------
            status
        """"""
        status, current_step_limit = self._get_quench_detection_setup()
        return status


    def _get_quench_current_step_limit(self) -> float:
        """"""
        Gets current step limit for quench detection

        Returns
        -------
            <rate>
        """"""
        status, current_step_limit = self._get_quench_detection_setup()
        return current_step_limit


    def _get_coil_constant(self) -> float:
        """"""
        Gets magnetic field constant in either T/A or kG/A depending on units

        Returns
        -------
            <constant>
        """"""
        coil_constant_unit, coil_constant = self._get_field_setup()
        return coil_constant


    def _get_coil_constant_unit(self) -> str:
        """"""
        Gets the units of the magnetic field constant: 0 = T/A, 1 = kG/A

        Returns
        -------
            <units>
        """"""
        coil_constant_unit, coil_constant = self._get_field_setup()
        return coil_constant_unit


    def _get_field_ramp_rate(self) -> float:
        """"""
        Gets the field ramp rate in units of T/min

        Returns
        -------
            field_ramp_rate (T/min)
        """"""
        coil_constant_unit, coil_constant = self._get_field_setup() # in T/A by default
        current_ramp_rate = self.current_ramp_rate()    # in A/s
        field_ramp_rate = current_ramp_rate * coil_constant * 60 # in T/min
        return field_ramp_rate


    def _get_ramping_state(self) -> str:
        """"""
        Gets the ramping state of the power supply (corresponds to blue LED on panel)
        Is inferred from the status bit register

        Returns
        -------
            ramping state
        """"""
        operation_condition_register = self.ask('OPST?')
        bin_OPST = bin(int(operation_condition_register))[2:]
        if len(bin_OPST)<2:
            rampbit = 1
        else:
            # read second bit, 0 = ramping, 1 = not ramping
            rampbit = int(bin_OPST[-2])
        if rampbit == 1:
            return 'not ramping'
        else:
            return 'ramping'


    def _get_operational_errors(self) -> str:
        """"""
        Error Status Query

        Returns
        -------
            error status
        """"""
        error_status_register = self.ask('ERST?')
        # three bytes are read at the same time, the middle one is the operational error status
        operational_error_registor = error_status_register.split(',')[1]
        
        #prepend zeros to bit-string such that it always has length 9
        oer_bit_str = bin(int(operational_error_registor))[2:].zfill(9)
        return oer_bit_str


    def _get_oer_quench_bit(self) -> int:
        """"""
        Returns the oer quench bit

        Returns
        -------
            quench bit
        """"""
        return int(self._get_operational_errors()[3])


    # set functions for parameters
    def _set_curent_limit(self, current_limit_setpoint: float) -> None:
        """"""
        Sets maximum allowed output current
        """"""
        current_limit, voltage_limit, current_rate_limit = self._get_limit()
        self.write_raw('LIMIT {}, {}, {}'.format(current_limit_setpoint, voltage_limit, current_rate_limit))


    def _set_voltage_limit(self, voltage_limit_setpoint: float) -> None:
        """"""
        Sets maximum allowed compliance voltage
        """"""
        current_limit, voltage_limit, current_rate_limit = self._get_limit()
        self.write_raw('LIMIT {}, {}, {}'.format(current_limit, voltage_limit_setpoint, current_rate_limit))


    def _set_current_rate_limit(self, current_rate_limit_setpoint: float) -> None:
        """"""
        Sets maximum allowed output current ramp rate
        """"""
        current_limit, voltage_limit, current_rate_limit = self._get_limit()
        self.write_raw('LIMIT {}, {}, {}'.format(current_limit, voltage_limit, current_rate_limit_setpoint))


    def _set_persistent_switch_heater_status(self, status_setpoint: int) -> None:
        """"""
        Specifies if there is a persistent switch: 0 = Disabled (no PSH), 1 = Enabled
        """"""
        status, psh_current, psh_delay = self._get_persistent_switch_heater_setup()
        self.write_raw('PSHS {}, {}, {}'.format(status_setpoint, psh_current, psh_delay))


    def _set_quench_detection_status(self, status_setpoint: int) -> None:
        """"""
        Specifies if quench detection is to be used: 0 = Disabled, 1 = Enabled
        """"""
        status, current_step_limit = self._get_quench_detection_setup()
        self.write_raw('QNCH {}, {}'.format(status_setpoint, current_step_limit))


    def _set_quench_current_step_limit(self, current_step_limit_setpoint: float) -> None:
        """"""
        Specifies the current step limit for quench detection
        """"""
        status, current_step_limit = self._get_quench_detection_setup()
        self.write_raw('QNCH {}, {}'.format(status, current_step_limit_setpoint))


    def _set_coil_constant(self, coil_constant_setpoint: float) -> None:
        """"""
        Specifies the magnetic field constant in either T/A or kG/A depending on units
        """"""
        coil_constant_unit, coil_constant = self._get_field_setup()
        self.write_raw('FLDS {}, {}'.format(coil_constant_unit, coil_constant_setpoint))


    def _set_coil_constant_unit(self, coil_constant_unit_setpoint: str) -> None:
        """"""
        Specifies the units of the magnetic field constant: 0 = T/A, 1 = kG/A
        """"""
        coil_constant_unit, coil_constant = self._get_field_setup()
        self.write_raw('FLDS {}, {}'.format(coil_constant_unit_setpoint, coil_constant))


    def _update_coil_constant(self, coil_constant_setpoint: float) -> None:
        """"""
        Updates the coil_constant and with it all linked parameters
        """"""
        # read field_ramp_rate before chaning coil constant
        field_ramp_rate = self.field_ramp_rate()
        # set the coil constant
        self._set_coil_constant(coil_constant_setpoint)
        # update the current ramp rate, leaving the field ramp rate unchanged
        current_ramp_rate_setpoint = field_ramp_rate / coil_constant_setpoint / 60   # current_ramp_rate is in A/s
        self.current_ramp_rate(current_ramp_rate_setpoint)


    def _set_field_ramp_rate(self, field_ramp_rate_setpoint: float) -> None:
        """"""
        Sets the field ramp rate in units of T/min by setting the corresponding current_ramp_rate
        """"""
        coil_constant_unit, coil_constant = self._get_field_setup() # in T/A by default
        current_ramp_rate_setpoint = field_ramp_rate_setpoint / coil_constant / 60   # current_ramp_rate is in A/s
        self.current_ramp_rate(current_ramp_rate_setpoint)


    def set_field(self, value: float, block: bool=True) -> None:
        """"""
        Ramp to a certain field

        Args:
            value: field setpoint
            block: Whether to wait until the field has finished setting
        """"""

        self.write('SETF {}'.format(value))
        # Check if we want to block
        if not block:
            return

        # Otherwise, wait until no longer ramping
        self.log.debug(f'Starting blocking ramp of {self.name} to {value}')
        self._sleep(0.5)    # wait for a short time for the power supply to fall into the ramping state
        while self.ramping_state() == 'ramping':
            self._sleep(0.3)
        self._sleep(2.0)
        self.log.debug(f'Finished blocking ramp')
        return
"
420,5.0,USA,"The LDA-602N Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +22 dBm, and offers frequency coverage of 6 to 6,000 MHz. It has an attenuation range of 63 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-602N ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-602N,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'att1Jmm1YPpJucecK'), ('width', 408), ('height', 336), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/GzllfbNRrjlMClQHbFUC0Q/ZMPJSWvmPvVGRnhfLIifwd9iJIPJ3lYTJ0ElBzWUQ61OP61PiQjyE9vNXnHpxnJFVw-36JKfkTpxTiPez64Mp7pQyfoh3LKUH90yvEGQt0qgOJPcu28c369QDZ36D4i5/cpAv2bMpeUQHS_9wTBK81kQgv0_hgCWYYgAgUKFnW8w'), ('filename', 'vaunix-digital-attenuator-n.png'), ('size', 122214), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/Ax_BW0RJXYFC27SdYc4H0g/oYdvjr2dfiGLv54QfblcEwoFJ38MbgGYS2hFpjiB8j9UfhJUKjOhEMMRaiu6M7y7_tXYaLOhQFFOa85oV0wPHw/rME_NaL5kpLNggEuKZVA6_d24XVMyHn4p-xMk2IToo8'), ('width', 44), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FUpamTwjGn8BJ5EJZ8fCrQ/fq8BaEHBi1TYb6VLTIqksc6LcnwGVShb3wnqxhfVxd8zk98rek_GmYh_IDK9TCooT8Rqd-PV5LZ4-IbDGiOE-g/djOYJUPnHZsEFKj9YMryTScSlSr6y-xXmP4ziJo9fmw'), ('width', 408), ('height', 336)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/JZxcgoIibFfxCRRswnCuCQ/G_6YY_pphzpUlcqyXM5wgIMfjncrI8ajfUdsuzWw59lgvQ0NQB8K_r1xEWX9LQ2lwvvhR2E_8t233P07c0JIdg/-VKayRuNl_XR3jAhYzkRoUDFuootFLjUFNlwYt3WtwA'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-602n-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,539.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
423,5.0,USA,"The LDA-602 Lab Brick USB programmable 50 Ohm digital attenuator has an input power of up to +22 dBm, and offers frequency coverage of 6 to 6,000 MHz. It has an attenuation range of 63 dB and a step size of 0.5 dB. The unit is powered and controlled by USB connection to a PC or self-powered hub, and is programmable for fixed attenuation or swept attenuation ramps directly from the included graphical user interface (GUI) software.",LDA,629.0,"Vaunix Technology Corp. designs, manufactures, and services RF and microwave test equipment and digital radio communications products. Utilizing our deep RF and software engineering expertise, rooted in microwave radio and wireless equipment repair and testing, Vaunix developed the Lab Brick® family of electronic test products, which set a new standard for cost, size, and simplicity of wireless testing devices. Powered by a USB connection and controlled by easy-to-use, graphical-user-interface (GUI) software, Lab Bricks have been designed to meet the needs of wireless engineers and technicians who want to create flexible, customized system solutions either in the lab or in the field. We 've expanded our Lab Brick® family of electronic test products to include Attenuator Matrix solutions that double as Wireless [Handover Test Systems](https://vaunix.com/handover-test-systems/) to give our test technicians and product engineers the advanced capability to solve unique wireless _handover _testing challenges and bring affordability, functionality, reliability and simplicity to the microwave test bench. 
",Qcodes Community,Vaunix,"[OrderedDict([('id', 'attyMYkkEMIf5IRX3'), ('width', 200), ('height', 200), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/nx52WAZ2lXO4RGRshT51QQ/Azf5DAM-_sfe43WSg6eXtLkpVJQe7OEcNiB_F_gQry52jW9EPel6x_6te8Gf527Weo_HG6U8pU5eXBSxsihvwnn2pM25ofnkHaYERxbJtco/mxovhtgBWkqFxjQOHmKjaqGQp-DNyUnIDktHWg1P8zc'), ('filename', '110_Vaunix-200_200.jpg'), ('size', 9642), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/qD9ahMiNm0OpaayIJKoQOQ/wr9LZ_3zi5gKZbvrin9UrJw7au6YTi6bBSkgUa_3AqOgW4bT7UrIUNDKlqrtzKFAV-UDTy8ZkafNz2sYHX8TSA/iChtvOE4tO2JOIbnl8rAD2J5V6YLizvaQNO-V0k4Sgk'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/bUAaOjpHzLEdNBOQthB1gQ/kBykS0cJKMXFnRVe_frk6BKlFgUiA-_ZKOPgrS7sE-Wr6Lnx8RfBdb0qIKHKPHY1S8bYetcC2xsvg6xP5Tb1tw/hnJO0PQtK7fJsm2Zlivyy85KGegDptWsz7gEMuqpcqQ'), ('width', 200), ('height', 200)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/FgO_NTYywPegg3inLLvmIQ/Bn1ovGON1NHNM2ReNHK4AIAuRWVvZLEOQ0NbKXBhnsZXuM6lz8LmzMWqZqm4kiJSziX56ETsylG_-CbPjyD65g/eZnWBSPBsh5TiFg8h7PEY3NCYX0PpDC4xO4scNPoN1I'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/,Write a Python script that uses Qcodes Community to connect to a LDA-602 ,https://en.wikipedia.org/wiki/Attenuator_(electronics),,"An attenuator is an electronic device that reduces the power of a signal without appreciably distorting its waveform.

An attenuator is effectively the opposite of an amplifier, though the two work by different methods. While an amplifier provides gain, an attenuator provides loss, or gain less than 1.",LDA-602,https://vaunix.com/resources/digital%20attenuators-datasheet.pdf,"[OrderedDict([('id', 'attYKLluQOr4BaFkT'), ('width', 411), ('height', 297), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/wCcy3zwaT3oYTP-vXnDhLw/JpcX_j8sb2JzwppCkn6LTH4HqJ10l_jXpSccTvf8KmtiMgmWQXMMdMxPz-aBgTih28LDmyhpBfM3mC6cxjAmUL5De47MXlKwfkvhuM4fAgFIsYW0j7FHMsjsyUYezTPf/3xpQYEORq_SVRM0x4HWH8yx04iBJCqkpNN8idTNF6nQ'), ('filename', 'vaunix-digital-attenuator.png'), ('size', 109500), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/gfNCAP_z5pD7aD_BeMp58Q/eRl7NczK4kP_bnrhmOK0hS4_EExBIlsc99lftjKcAFi0HYuR1acL_Tn3Zdf4R73_lwTEESt04zHlr8Uw_43Q_w/7SOQ42isMqua10TNpUMjHXLZWyKV5gxWrs3sFFOHz44'), ('width', 50), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/khu13JfmvpwlFBlCaCtqMQ/AKWppeo4B5GVru2CLBXGG-uwQqaRRZETZVOO_6reToOkH3LMBRCme7ZEnJIV9_I-hIgFBoNKrxavTt6uowLj9Q/IoaGL95gJ8jsYrVnwjEBba_uhaACR7nZgb9UOslMfbM'), ('width', 411), ('height', 297)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/fen0IfWTiyEiHZ1GH7sssQ/jFzD2n4CV5Tr87BhJzLW5Mr5jc7O_wHbEii85eTIANviw4tV4naIKLLWbw-N-ith9TMJaKtWsCFf9wWZmL5nsw/6mwBG6Hnyg5YoLo49j5EXdQuX757Nlsn4Nc4DOLhsEM'), ('width', 3000), ('height', 3000)]))]))])]",https://vaunix.com/lda-602-programmable-digital-attenuator/,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/Vaunix/LDA.py,https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/docs/examples/Vaunix_LDA.ipynb,499.0,,,,"r""""""
This is the QCoDeS driver for Vaunix LDA digital attenuators. It requires the
DLL that comes with the instrument, ``VNX_atten64.dll`` and/or
``VNX_atten.dll``, for 64-bit Windows and 32-bit Windows, respectively. If the
instrument has more than one physical channel, ``InstrumentChannel`` s are
created for each one. If the instrument has only one physical channel, no
channels are created and the parameters will be assigned to this instrument
instead. The sweep profiles available in the API are not implemented.

Tested with 64-bit system and

- LDA-133
- LDA-802Q

""""""

import logging
from typing import Optional, Dict, Callable, Union, cast
from functools import partial
from platform import architecture
import os
import sys
import ctypes
import time

from qcodes import Instrument, InstrumentChannel, Parameter
from qcodes.utils.validators import Numbers

logger = logging.getLogger(__name__)

class Vaunix_LDA(Instrument):
    dll_path = None

    def __init__(self, name: str,
                 serial_number: int,
                 dll_path: Optional[str] = None,
                 channel_names: Optional[Dict[int, str]] = None,
                 test_mode: bool = False,
                 **kwargs):
        r""""""
        QCoDeS Instrument for Vaunix LDA digital attenuators.

        Args:
            name: Qcodes name for this instrument
            serial_number: Serial number of the instrument, used to identify
                it.
            dll_path: Look for the LDA DLLs in this directory. Sets the dll
                path as class attribute that is used for future instances for
                which ``dll_path`` is not given.
            channel_names: Optionally assign these names to the channels.
            test_mode: If True, simulates communication with an LDA-102
                (serial:55102). Does not communicate with physical devices. For
                testing purposes.
        """"""
        begin_time = time.time()

        self.serial_number = serial_number
        self.reference = None

        if channel_names is None:
            channel_names = {}

        self.dll = self._get_dll(dll_path)
        self.dll.fnLDA_SetTestMode(test_mode)  # Test API without communication

        # Find all Vaunix devices, init the one with matching serial number.
        num_devices = self.dll.fnLDA_GetNumDevices()
        device_IDs = ctypes.c_int * num_devices
        device_refs = device_IDs()
        self.dll.fnLDA_GetDevInfo(device_refs)
        devices = {self.dll.fnLDA_GetSerialNumber(ref): ref
                   for ref in device_refs}
        self.reference = devices.get(self.serial_number, ""not found"")
        if self.reference == ""not found"":
            raise ValueError(f""LDA with serial number {self.serial_number}""
                             f"" was not found in the system. Found: {devices}"")

        self.dll.fnLDA_InitDevice(self.reference)

        # call superclass init only after DLL has been successfully loaded
        super().__init__(name=name, **kwargs)

        num_channels = self.dll.fnLDA_GetNumChannels(self.reference)
        if num_channels == 1:
            # don't add Channel objects, add parameters directly instead
            _add_lda_parameters(self)
        else:
            for i in range(1, num_channels + 1):
                name = channel_names.get(i, f""ch{i}"")
                ch = LdaChannel(parent=self, channel_number=i, name=name)
                self.add_submodule(name, ch)

        self.connect_message(begin_time=begin_time)

    def _get_dll(self, dll_path: Optional[str] = None) -> ctypes.CDLL:
        r""""""
        Load correct DLL from ``dll_path`` based on bitness of the operating
        system.

        Args:
            dll_path: path to the directory that contains the Vaunix LDA DLL.
                By default, use class attribute ``Vaunix_LDA.dll_path``.
        """"""
        path = dll_path or Vaunix_LDA.dll_path
        if path is None:
            raise ValueError(""DLL path for Vaunix LDA was not provided. ""
                             ""Either set ``Vaunix_LDA.dll_path`` or provide ""
                             ""it as an argument to the constructor."")

        if sys.platform != ""win32"":
            raise OSError(f""LDA is not supported on {sys.platform}."")
        bitness = architecture()[0]
        if ""64bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten64"")
        elif ""32bit"" in bitness:
            full_path = os.path.join(path, ""VNX_atten"")
        else:
            raise OSError(f""Unknown bitness of system: {bitness}"")

        try:
            dll = ctypes.cdll.LoadLibrary(full_path)
        except OSError as e:
            # typeshead seems to be unaware that winerror is an attribute
            # under windows
            winerror = getattr(e, ""winerror"", None)
            if winerror is not None and winerror == 126:
                # 'the specified module could not be found'
                raise OSError(f""Could not find DLL at '{full_path}'"")
            else:
                raise

        return dll

    def get_idn(self) -> Dict[str, Optional[str]]:

        buf = ctypes.create_string_buffer(300)
        self.dll.fnLDA_GetModelNameA(self.reference, buf)
        model = str(buf.value.decode())

        return {""vendor"": ""Vaunix"",
                ""model"": model,
                ""serial"":  self.dll.fnLDA_GetSerialNumber(self.reference),
                ""firmware"": self.dll.fnLDA_GetDLLVersion(),
                }

    def close(self) -> None:
        if hasattr(self, ""dll""):
            self.dll.fnLDA_CloseDevice(self.reference)
        super().close()

    def save_settings(self) -> None:
        """"""
        Save current settings to memory. Settings are automatically loaded
        during power on.
        """"""
        self.dll.fnLDA_SaveSettings(self.reference)


class LdaChannel(InstrumentChannel):
    """"""
    Channel corresponding to one input-output pair of the LDA digital
    attenuator.
    """"""
    def __init__(self, parent: Vaunix_LDA,
                 channel_number: int,
                 name: str):
        super().__init__(parent=parent, name=name)
        self.channel_number = channel_number
        _add_lda_parameters(self)


def _add_lda_parameters(inst: Union[Vaunix_LDA, LdaChannel]) -> None:
    """"""
    Helper function for adding parameters to either LDA root instrument,
    or channels inside it.
    Args:
        inst: the instrument or channel to add the parameters to.
    """"""
    root_instrument = cast(Vaunix_LDA, inst.root_instrument)
    inst.add_parameter(""attenuation"",
                       parameter_class=LdaAttenuation,
                       set_parser=float,
                       )
    wf_vals = LdaWorkingFrequency.get_validator(root_instrument)
    if wf_vals:
        inst.add_parameter(""working_frequency"",
                           parameter_class=LdaWorkingFrequency,
                           vals=wf_vals,
                           )


class LdaParameter(Parameter):
    scaling = 1.0  # Scaling from integers from API to physical quantities

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 dll_get_function: Callable, dll_set_function: Callable,
                 **kwargs):
        """"""
        Parameter associated with one channel of the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
            dll_get_function: DLL function that gets the value
            dll_get_function: DLL function that sets the value
        """"""
        super().__init__(name, instrument, **kwargs)
        self._reference = instrument.root_instrument.reference
        self._dll_get_function = partial(dll_get_function, self._reference)
        self._dll_set_function = partial(dll_set_function, self._reference)

    def _switch_channel(self) -> None:
        """"""
        Switch to this channel.
        """"""
        if hasattr(self.instrument, ""channel_number""):
            instr = cast(Instrument, self.instrument)
            instr.root_instrument.dll.fnLDA_SetChannel(self._reference,
                                                       instr.channel_number)

    def get_raw(self) -> float:
        """"""
        Switch to this channel and return current value.
        """"""
        self._switch_channel()
        value = self._dll_get_function()
        if value < 0:
            raise RuntimeError(f'{self._dll_get_function.func.__name__} '
                               f'returned error {value}')
        return value * self.scaling

    def set_raw(self, value: float) -> None:
        """"""
        Switch to this channel and set to ``value`` .
        """"""
        self._switch_channel()
        value = round(value / self.scaling)
        error_msg = self._dll_set_function(value)
        if error_msg != 0:
            raise RuntimeError(f'{self._dll_set_function.func.__name__} '
                               f'returned error {error_msg}')


class LdaAttenuation(LdaParameter):
    """"""
    Attenuation of one channel in the LDA.
    """"""
    scaling = 0.05  # integers returned by the API correspond to 0.05 dB

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        dll = instrument.root_instrument.dll

        ref = instrument.root_instrument.reference
        min_att = dll.fnLDA_GetMinAttenuationHR(ref) * self.scaling
        max_att = dll.fnLDA_GetMaxAttenuationHR(ref) * self.scaling
        vals = Numbers(min_att, max_att)

        label = ""Attenuation""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetAttenuationHR,
                         dll_set_function=dll.fnLDA_SetAttenuationHR,
                         vals=vals,
                         unit=""dB"",
                         label=label,
                         **kwargs,
                         )


class LdaWorkingFrequency(LdaParameter):
    """"""
    Working frequency of one channel of the LDA. Not supported on all models.
    """"""
    scaling = 100_000  # integers returned by the API correspond to 100kHz

    def __init__(self, name: str,
                 instrument: Union[Vaunix_LDA, LdaChannel],
                 **kwargs):
        """"""
        Attenuation of one channel in the LDA.

        Args:
            name: parameter name
            instrument: parent instrument, either LDA or LDA channel
        """"""
        dll = instrument.root_instrument.dll

        label = ""Working frequency""
        if isinstance(instrument, LdaChannel):
            # prefix label to make channels more easily distinguishable in plots
            label = f""{instrument.short_name} {label}""

        super().__init__(name, instrument,
                         dll_get_function=dll.fnLDA_GetWorkingFrequency,
                         dll_set_function=dll.fnLDA_SetWorkingFrequency,
                         unit=""Hz"",
                         label=label,
                         docstring=""Frequency at which the ""
                                   ""attenuation is most accurate."",
                         **kwargs
                         )

    @classmethod
    def get_validator(cls, root_instrument: Vaunix_LDA) -> Optional[Numbers]:
        """"""
        Returns validator for working frequency, if ``root_instrument``
        supports it. Else returns None.
        """"""
        max_freq = root_instrument.dll.fnLDA_GetMaxWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        min_freq = root_instrument.dll.fnLDA_GetMinWorkingFrequency(
                    root_instrument.reference) * cls.scaling
        # if feature is not supported, these values will be equal
        if max_freq > min_freq:
            return Numbers(min_freq, max_freq)
        else:
            return None


# shorthand
LDA = Vaunix_LDA
"
425,2500.0,"Munich, Germany",The Rohde & Schwarz HMP4030 power supply belongs to the HMP series and has 3 channels and a power of 384W. All three channels have an output voltage of 0-32V and an output current of 0-10A. The Rohde & Schwarz HMP series are programmable DC power supplies.,HMP 4030,487.0,"Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",Qcodes Community,Rohdeschwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/9cHh-T5DiH-7n6lLjMACLA/bDi2rAgBKKv-UvdRleHzviIH4GcH8AtS2mvdp-g9F5fqCVLRPlAnSBTRQa-Runosj2pUwoAlhqQuz5TbVkWsAPnNM3W2hWam9hmsDAI-rL4/dffvM0sgfAmzoe43t-msnU6e8D0UM-OZGHt_kN6EI98'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/g--_RRN7TAxVYvYfZsfJAQ/7QuUf0QEBkC8SMdK1bmt-YbCN0y4Vh7DjHjVWWAwYMWJee9W1_UqwdojXEJzVUALXPhc6LnhN-lsQmk6w-lHDw/6fec6hnAGzjzj0BDv0TEHJtermLLj4Z3b2m6J6dHT1A'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/oMsz97Tz22aazBF2MmRx0A/qA2gKhQNxFidpSGhEU04F-OoIhF7BfJmWCmPJxKK-IF58k94GMqfn4_xpOfpg48Eyj-YsME_D_oNERlbxBoo6Q/RSM8ZcvfANnn-GXOF96XT_DsItZl0IBVWIuKqbrwXeg'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/UFP-LpUBl8Q8A7_iSD2G2w/fk4nHw-_8wbi1zc78qVKGp5QIQa5f6pWrMFe_z4VK3PuoJe9nupme35Ujw9iTJ3dDShi9V7nI3fIVSaUd5ZLfQ/me0jTPIgCb0Zr4R8FOD7PLpLUZFfzzDCdVKiQlrBrqU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,Write a Python script that uses Qcodes Community to connect to a {Device name} Power Supplies,https://en.wikipedia.org/wiki/Power_supply,['Power Supplies'],"A power supply is an electrical device that supplies electric power to an electrical load. The main purpose of a power supply is to convert electric current from a source to the correct voltage, current, and frequency to power the load. As a result, power supplies are sometimes referred to as electric power converters. Some power supplies are separate standalone pieces of equipment, while others are built into the load appliances that they power.",,https://www.farnell.com/datasheets/3677014.pdf,"[OrderedDict([('id', 'attnmvc17oqo4yC3i'), ('width', 520), ('height', 380), ('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/lhIJJktMi2kyJSzzxPjHLQ/7LqaUk_3GnWhkm_b15810baEkFbMwrjiDZ7FPiFA795Pr-gcwlfkkFxZSsgXarMSirKrk3idZxJPe7RdWQ5d7w/AEG6qFO4itng6l0UJUABmQDxEhpFxOQK8l6sYpjZuV0'), ('filename', '4040.jpg'), ('size', 39656), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/4Pe5S3uHcoShHXNpbXtbaA/wlE4Wyz3gKr65UIDZ-aY7UePJhGZUXsC2kVIGhcP6ILMttkmOtUuIU02XL1x0KXxCFJTk-SVsMoKtlo39HdDWg/AlryLcY8SXljGO_ct6qjwqzyjV9I-0Y7615smSCcs9s'), ('width', 49), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/vCUlKA-gUngr4VOhi63JgA/s77gqtd5Zdq8T90-sxWEPZn2lFH9bKJjz2180cKJSpN6_kwxZ6tnYnEjm9PileaPfMlUHEkTpBgksO9bVYvEbg/5EBAxg1GLZWrbKiAsJ4_dN1BTZhDZ-vYoczSeeEgYQw'), ('width', 520), ('height', 380)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/18/18/1689537600000/-wzUKTf8baSkRNiTcWGHPw/JRLEBJgC74zCe_WBLJ8RRfJPzF_XAKjf9aPePcF2pxRyuuVJ2imjbQd47c-t_Gp9Gesrv4uTj4u8-HAH9FmCdQ/kdyBU8NVTVxAwMLsIt-QFN19V_-2HIvS4nnIN3-KhCI'), ('width', 3000), ('height', 3000)]))]))])]","https://eleshop.eu/rohde-schwarz-hmp4030.html#:~:text=Details,are%20programmable%20DC%20power%20supplies.",https://github.com/QCoDeS/Qcodes_contrib_drivers/blob/main/qcodes_contrib_drivers/drivers/RohdeSchwarz/HMP4030.py,https://qcodes.github.io/Qcodes_contrib_drivers/api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.html#module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030,2189.19,,,,"from .private.HMP import _RohdeSchwarzHMP


class RohdeSchwarzHMP4030(_RohdeSchwarzHMP):
    """"""
    This is the qcodes driver for the Rohde & Schwarz HMP4030 Power Supply
    """"""
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, model_no=4030, **kwargs)"
