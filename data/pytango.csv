,Device datasheet (PDF),Category description link,Device picture,"Yearly revenue (millions, USD)",Vendor headquarters,Vendor logo URL,Device Description,Device Description Link,Device,Field 1,Device Category,Category Description,Vendor wikipedia or cruncbase description,GitHub link to Python driver (NOT LINK TO DOCS ON GITHUB),Library,Python docs link,Vendor,Vendor logo,Vendor website,Image URL,Corrected device name,ChatGPT prompt,Device Price,ChatGPT code,Obsolete,QA Notes,docstring
50,https://www.picoquant.com/images/uploads/downloads/7304-picoharp300.pdf,https://en.wikipedia.org/wiki/Photon_counting,"[OrderedDict([('id', 'atthejQRAjGKhwdow'), ('width', 800), ('height', 455), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/73DBivSqlhgyI26vamonZA/6Xc6zH7TRCXtwrDUOa3jIhrGbvg8IAdOjN3lWcCXgkzSSUQO3t2kN8JCrJhcj1Sffv9LOSULqrv4zKWx4PtJn804J0UIFaH14FmhYbfNY_s/feM2ydx22JV0x92GHKYvBesjNZ486Mg95iIxrqpLNdw'), ('filename', 'picoharp_large.jpg'), ('size', 65004), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/qUVfFF35WX3XpZN78d8pYg/UtNjDc9GWEvewYBuhoiqIA9p1_zZnbwxGJBj6vBDlZQnY0IivTJx-C6fDYxwyW6X5F7dMuc5VoDhdrysWnVP2A/k1nloCfaU2FiXS_pTUHEwqo1ehHoFJhNFGP4602-LjI'), ('width', 63), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/OzKZQTT2NsojBVVi0oZnZw/V9i7nqTPVB1G42DnVrmlb2gF7VWBDgketrNtYFVSghj-MEK3UxgPRJTbG-oPQqriDIPRmYPfgbgtYey2p9HI5w/UdOdl32NEzJV77WFiKpu5Z1UB2j86w3ZkoRximabvNg'), ('width', 800), ('height', 455)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/hr5SjE-4Ddt9AteQebRyAw/M8b65emkSdFTAbPES23cm9dKtoMbqZstu9jdYWpChJHLt-6A8rhGKSP6sprJAGWxrvFuteMy1Z7qIO5EWElrVQ/sPEPCKLw4hpienQLEy5ti3gCq7dI2sncPdDhhLz5xOs'), ('width', 3000), ('height', 3000)]))]))])]",14.7,"Berlin, Germany",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116699/Instruments/Vendor%20Logos/PicoQuant.png,"The PicoHarp 300 is a high-end, easy to use, plug and play Time-Correlated Single Photon Counting (TCSPC) system. It is connected to a PC through a USB 2.0 interface. The high quality and reliability of the PicoHarp 300 is expressed by a unique 5-year limited warranty.

",https://www.picoquant.com/products/category/tcspc-and-time-tagging-modules/picoharp-300-stand-alone-tcspc-module-with-usb-interface,PH Photoncounter,418.0,['Photon Counting System'],Photon counting is a technique in which individual photons are counted using a single-photon detector (SPD). A single-photon detector emits a pulse of signal for each detected photon. The counting efficiency is determined by the quantum efficiency and the system's electronic losses.,"The PicoQuant group was founded in 1996 to develop robust, compact, and easy to use time-resolved instrumentation and systems. Since April 2008 sales and support in North America is handled by PicoQuant Photonics North America Inc. In January 2010, the PicoQuant group was extended by PicoQuant Innovations, which was founded to support the increasing activities in the field of teaching, customer support, and event organization.
",https://github.com/PicoQuant/PH300-v3.x-Demos/blob/master/64/python/Standard/dlldemo.py,Pytango,https://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/tango-ds/MeasureInstruments/PicoHarp300/index.html,Picoquant,"[OrderedDict([('id', 'att3Ffml7HIC1nRMD'), ('width', 177), ('height', 152), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/H_iukymUjWRc6JFsOaqAtQ/LJJ83sky0CWgaW5Q9h6Usdrm_AXAzyox5E1LCaKPNHkxBQFLO8Z0Rw0VfaVrB3jno6xLfEA_K1XvEA89U-nmtySicCkorj_u7-3Yx1O0hhM/Igym3hieRsB0nC0Rdldu2jTaLjwnvzCUcpU1hYsg85Y'), ('filename', 'logo-white.png'), ('size', 58557), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/gLJ_7saToBuZcYqbdjH-VQ/gOOzCq2VGbdxmlwKEmNqnQa_vBnJ5bV2IAGlFiRPjai7QqT9nkQ-tKUo7iyX45gI57ZwbN7hCL6QzJJn778ihQ/Xd87cwwY6Q1Spn4rAZfGN0acP-xStEw7SzNlrpZqvmE'), ('width', 42), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/Y8XnPIqDXBcpwTDjhSVzQQ/nwnCjBAmHm_Uw_WThfZBPEe5p4WQOeB2auTgr6Mlxg_uiDcWRd1T8-tOD-Wgj0K5mkJV3Gly2dfoK5DuL_lP5A/R8FY0SvdaSKKAlH-H7h-isr7WBT4xfqrg1rYw4FPiSU'), ('width', 177), ('height', 152)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/BWB403GqnxM6CuDy3R6dSQ/5TmV4a1B3p9JX4GYxihyqDQs9oGzMHCsxCG-fQt9zw0jmAqT0kSK_Q-14yttNkWIktGQ6pIegH5ylPQztGINyA/F-XpUw2MOW7sXiePGH3tdeWnXkp4RzOB22FTyOfWIqg'), ('width', 3000), ('height', 3000)]))]))])]",https://www.picoquant.com/,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782750/Instruments/Photon%20Counting%20System/Singlequantum/Singlequantum.jpg,PicoHarp 300,Write a Python script that uses Pytango to connect to a PicoHarp 300 Photon Counting System,,,,,"# Demo for access to PicoHarp 300 Hardware via PHLIB.DLL v 3.0.
# The program performs a measurement based on hard coded settings.
# The resulting histogram (65536 channels) is stored in an ASCII output file.
#
# Keno Goertz, PicoQuant GmbH, February 2018

import time
import ctypes as ct
from ctypes import byref

# From phdefin.h
LIB_VERSION = ""3.0""
HISTCHAN = 65536
MAXDEVNUM = 8
MODE_HIST = 0
FLAG_OVERFLOW = 0x0040

# Measurement parameters, these are hardcoded since this is just a demo
binning = 0 # you can change this
offset = 0
tacq = 1000 # Measurement time in millisec, you can change this
syncDivider = 1 # you can change this 
CFDZeroCross0 = 10 # you can change this (in mV)
CFDLevel0 = 100 # you can change this (in mV)
CFDZeroCross1 = 10 # you can change this (in mV)
CFDLevel1 = 50 # you can change this (in mV)
cmd = 0

# Variables to store information read from DLLs
counts = (ct.c_uint * HISTCHAN)()
dev = []
libVersion = ct.create_string_buffer(b"""", 8)
hwSerial = ct.create_string_buffer(b"""", 8)
hwPartno = ct.create_string_buffer(b"""", 8)
hwVersion = ct.create_string_buffer(b"""", 8)
hwModel = ct.create_string_buffer(b"""", 16)
errorString = ct.create_string_buffer(b"""", 40)
resolution = ct.c_double()
countRate0 = ct.c_int()
countRate1 = ct.c_int()
flags = ct.c_int()

phlib = ct.CDLL(""phlib64.dll"")

def closeDevices():
    for i in range(0, MAXDEVNUM):
        phlib.PH_CloseDevice(ct.c_int(i))
    exit(0)

def tryfunc(retcode, funcName):
    if retcode < 0:
        phlib.PH_GetErrorString(errorString, ct.c_int(retcode))
        print(""PH_%s error %d (%s). Aborted."" % (funcName, retcode,\
              errorString.value.decode(""utf-8"")))
        closeDevices()

phlib.PH_GetLibraryVersion(libVersion)
print(""Library version is %s"" % libVersion.value.decode(""utf-8""))
if libVersion.value.decode(""utf-8"") != LIB_VERSION:
    print(""Warning: The application was built for version %s"" % LIB_VERSION)

outputfile = open(""dlldemo.out"", ""w+"")

outputfile.write(""Binning           : %d\n"" % binning)
outputfile.write(""Offset            : %d\n"" % offset)
outputfile.write(""AcquisitionTime   : %d\n"" % tacq)
outputfile.write(""SyncDivider       : %d\n"" % syncDivider)
outputfile.write(""CFDZeroCross0     : %d\n"" % CFDZeroCross0)
outputfile.write(""CFDLevel0         : %d\n"" % CFDLevel0)
outputfile.write(""CFDZeroCross1     : %d\n"" % CFDZeroCross1)
outputfile.write(""CFDLevel1         : %d\n"" % CFDLevel1)

print(""\nSearching for PicoHarp devices..."")
print(""Devidx     Status"")

for i in range(0, MAXDEVNUM):
    retcode = phlib.PH_OpenDevice(ct.c_int(i), hwSerial)
    if retcode == 0:
        print(""  %1d        S/N %s"" % (i, hwSerial.value.decode(""utf-8"")))
        dev.append(i)
    else:
        if retcode == -1: # ERROR_DEVICE_OPEN_FAIL
            print(""  %1d        no device"" % i)
        else:
            phlib.PH_GetErrorString(errorString, ct.c_int(retcode))
            print(""  %1d        %s"" % (i, errorString.value.decode(""utf8"")))

# In this demo we will use the first PicoHarp device we find, i.e. dev[0].
# You can also use multiple devices in parallel.
# You can also check for specific serial numbers, so that you always know 
# which physical device you are talking to.

if len(dev) < 1:
    print(""No device available."")
    closeDevices()
print(""Using device #%1d"" % dev[0])
print(""\nInitializing the device..."")

tryfunc(phlib.PH_Initialize(ct.c_int(dev[0]), ct.c_int(MODE_HIST)), ""Initialize"")

# Only for information
tryfunc(phlib.PH_GetHardwareInfo(dev[0], hwModel, hwPartno, hwVersion),\
        ""GetHardwareInfo"")
print(""Found Model %s Part no %s Version %s"" % (hwModel.value.decode(""utf-8""),\
    hwPartno.value.decode(""utf-8""), hwVersion.value.decode(""utf-8"")))

print(""\nCalibrating..."")
tryfunc(phlib.PH_Calibrate(ct.c_int(dev[0])), ""Calibrate"")

tryfunc(phlib.PH_SetSyncDiv(ct.c_int(dev[0]), ct.c_int(syncDivider)), ""SetSyncDiv"")

tryfunc(
    phlib.PH_SetInputCFD(ct.c_int(dev[0]), ct.c_int(0), ct.c_int(CFDLevel0),\
                         ct.c_int(CFDZeroCross0)),\
    ""SetInputCFD""
)

tryfunc(
    phlib.PH_SetInputCFD(ct.c_int(dev[0]), ct.c_int(1), ct.c_int(CFDLevel1),\
                         ct.c_int(CFDZeroCross1)),\
    ""SetInputCFD""
)

tryfunc(phlib.PH_SetBinning(ct.c_int(dev[0]), ct.c_int(binning)), ""SetBinning"")
tryfunc(phlib.PH_SetOffset(ct.c_int(dev[0]), ct.c_int(offset)), ""SetOffset"")
tryfunc(phlib.PH_GetResolution(ct.c_int(dev[0]), byref(resolution)), ""GetResolution"")

# Note: after Init or SetSyncDiv you must allow 100 ms for valid count rate readings
time.sleep(0.2)

tryfunc(phlib.PH_GetCountRate(ct.c_int(dev[0]), ct.c_int(0), byref(countRate0)),\
        ""GetCountRate"")
tryfunc(phlib.PH_GetCountRate(ct.c_int(dev[0]), ct.c_int(1), byref(countRate1)),\
        ""GetCountRate"")

print(""Resolution=%lf Countrate0=%d/s Countrate1=%d/s"" % (resolution.value,\
      countRate0.value, countRate1.value))

tryfunc(phlib.PH_SetStopOverflow(ct.c_int(dev[0]), ct.c_int(1), ct.c_int(65535)),\
        ""SetStopOverflow"")

while cmd != ""q"":
    # Always use block 0 if not routing
    tryfunc(phlib.PH_ClearHistMem(ct.c_int(dev[0]), ct.c_int(0)), ""ClearHistMeM"")

    print(""press RETURN to start measurement"")
    input()

    tryfunc(phlib.PH_GetCountRate(ct.c_int(dev[0]), ct.c_int(0), byref(countRate0)),\
            ""GetCountRate"")
    tryfunc(phlib.PH_GetCountRate(ct.c_int(dev[0]), ct.c_int(1), byref(countRate1)),\
            ""GetCountRate"")
    
    print(""Countrate0=%d/s Countrate1=%d/s"" % (countRate0.value, countRate1.value))
    
    tryfunc(phlib.PH_StartMeas(ct.c_int(dev[0]), ct.c_int(tacq)), ""StartMeas"")
        
    print(""\nMeasuring for %d milliseconds..."" % tacq)
    
    waitloop = 0
    ctcstatus = ct.c_int(0)
    while ctcstatus.value == 0:
        tryfunc(phlib.PH_CTCStatus(ct.c_int(dev[0]), byref(ctcstatus)), ""CTCStatus"")
        waitloop+=1
        
    tryfunc(phlib.PH_StopMeas(ct.c_int(dev[0])), ""StopMeas"")
    tryfunc(phlib.PH_GetHistogram(ct.c_int(dev[0]), byref(counts), ct.c_int(0)),\
            ""GetHistogram"")
    tryfunc(phlib.PH_GetFlags(ct.c_int(dev[0]), byref(flags)), ""GetFlags"")
    
    integralCount = 0
    for i in range(0, HISTCHAN):
        integralCount += counts[i]
    
    print(""\nWaitloop=%1d  TotalCount=%1.0lf"" % (waitloop, integralCount))
    
    if flags.value & FLAG_OVERFLOW > 0:
        print(""  Overflow."")

    print(""Enter c to continue or q to quit and save the count data."")
    cmd = input()

for i in range(0, HISTCHAN):
    outputfile.write(""\n%5d "" % counts[i])

closeDevices()
outputfile.close()"
110,,,,110.6,"Cleveland, Ohio, United States",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116722/Instruments/Vendor%20Logos/Keithley.png,Class For Getting Data From The Keihtley Of The Photon-Ion Spectrometer (Pipe).,,Pipekeithley,212.0,,,"Keithley Instruments is a measurement and instrument company headquartered in Solon, Ohio, that develops, manufactures, markets, and sells data acquisition products, as well as complete systems for high-volume production and assembly testing.
",http://svn.code.sf.net/p/tango-ds/code/DeviceClasses/MeasureInstruments/Keithley/PIPEKeithley/trunk/PIPEKeithley.py,Pytango,https://www.tango-controls.org/developers/dsc/ds/1164/,Keithley,"[OrderedDict([('id', 'att7PoO6FUHxnCmlK'), ('width', 900), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/JPWbbY0RLTwvCH95zF0lUw/FYE_qzqVeKunCKXZHcCO2IQTlNtrj9deJrJ8IvRi4E8DhdciuLtui1KbfRNDyts0f82Yurlppm-Hpyw3N70TJuAIKY3_44qDFhUb8ydul1PEtbKFosfYlGsV4U7IYpib3RVUQUX5GWVokNgkYfRknw/WU55GPpzEr8Un4iaGll8XGxfZsNp7qoBV0mtZZFez5s'), ('filename', 'keithley-a-tektronix-company-vector-logo.png'), ('size', 4698), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/VBp9CVCl0gO2A14HXB5CIA/Xtk2sr79MHggQNs60J8dAjJHuRLmrvNscTMXYVwGV-rOZX5ZQ4F7ACtavmtqrw0hhhYlJn4zHMcxjwK-x-WurQ/oE5_tuvZoBAR0QruNt2Xeul6WMntVby0GJuS2SR_fo0'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/yaThx4kuSOslFnzq5eZpVQ/hNGVd1kgX7qo-Cv7FP9SK4FZBtGf6rfq2o4m_CWKrLkbqbSICtQmrqYH0b_i97LMUNtmJS49zBQ1ggsKG7GbMQ/aLt21VBpyLvyGoECYC69PHf_IKCG95xaVCmAVNleiU4'), ('width', 900), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ExgTiTQZwc2k2En25SNuZg/jVYfq4gboOT4ayM0U7gaP_jOrYvw63gq8LdOviK8pjRBK24qXRRVHJkZCsY3WIMXq_zK_qoOOwSZifr4odddsA/Xrej63AC0_Tv8PsRwHhmYW8nkHQ-rKBZOkMsm3Q7Dxk'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en,,Pipekeithley,Write a Python script that uses Pytango to connect to a {Device name} ,,,,,
114,,https://en.wikipedia.org/wiki/Magnetometer,"[OrderedDict([('id', 'attluUmBnZ9vg9RMq'), ('width', 1010), ('height', 536), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/-K6YefkTuxyJ6U0qEYysGQ/EeH487DUmT4gd3-NRUqTepV9MUlzbKAkbrX8m1FsC8LDBWgnziZ4hLMxMA8aTxSBcIO8jbVherLGmCL6yVW6FY288Kk3g-avQdlY6c4_4G8/AQwuowoT7GZh7bes6CE8XG-X3jQqF98p6MKi8HU-dWM'), ('filename', 'Gaussmeter-425.png'), ('size', 610592), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/rkw6gDNCtMdSYk4HboTJ-w/F2uk5PWgASRliJcn91z5Y-80YQOJZy9NMJKuZcD2j-3NE0HW7P69_jQzxeAiHox3bbI-kzKQOpDb7rTYmN83_g/2wYXYOiVbpHRlsB0e2vx5kA0JAjn55oDe2M38xuxF3o'), ('width', 68), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/rf0A7KTmum_ngoIqMBD02Q/bCz5co1L68nr2UfEYiH9eV-jPtz2sTl0-sF3YUJKjEe0pRGGVzy08ZLNcMZasrPlYyQGDb-XiVsWn2si79ie9g/jRLuT81fF-GRQdiYV5mbdvQtULBMkiraJEzsgBM9zFQ'), ('width', 965), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/mlkKfDkLiJj02XO3Yczl7w/RLsjq5uqyd6IcCezgP_rWmTmomqwY4lIO1fd7DE0XdCKPL_caWZQrW1uqDIRRQx1VM39rZY-1iXEqLfzQLrhpQ/c2tsIC2BfLyJJqeYJPCYYtOGz894pnmAH2JDfpq7gAc'), ('width', 3000), ('height', 3000)]))]))])]",21.4,"Westerville, Ohio, USA",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116683/Instruments/Vendor%20Logos/Lakeshore.png,Class Connecting To The Lakeshore 425 Gaussmeter,https://www.lakeshore.com/products/categories/overview/magnetic-products/gaussmeters-teslameters/model-425-gaussmeter,LKS 425 Gaussmeterctrl,344.0,['Multimeters'],"Gaussmeter
","Supporting advanced scientific research, Lake Shore is a leading global innovator in measurement and control solutions.
",https://github.com/lakeshorecryotronics/python-driver/blob/main/lakeshore/model_425.py,Pytango,https://github.com/lakeshorecryotronics/python-driver/tree/main/lakeshore,Lakeshore,"[OrderedDict([('id', 'attzehTVrrXJAMgad'), ('width', 256), ('height', 72), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/uZEb0GeNQJzpY4gfMbqkMw/M10zIQfSkj5HU6JWK8X9RsLmcc6FG4q1B_9kI4z-ykuaLjZtGDg98K_rW2vkRVKv9kldiUZYwemYU05K_vzXf_TBjxzPFxgMsA1BoIcYChw/DVxmeK_C9RjtpXeaqXJsNrznuSYlrdhwulHDJ8BkmD8'), ('filename', 'lake-shore-logo.svg'), ('size', 11991), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/5GefCSzVLVY17Ld4My8s-g/NtcN3PJb44e30eFFmMzFBkglOYj5xNlZxeH8S64gI0_oIxRf-JmJ-WoC69yAaIJg36Pe3iNv-1-CWVfo-2HBJTRzjezuPL_3iPkxyDeqr4A/ArbmGKilAdh84ZETfXmtPAi8mytPZCucU5LAjQMjnZQ'), ('width', 128), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/yuuObs2i500o0b-5GqJscw/9753dxcHTqtIHxuitI89R2eJjspqnEoNaT8SWWRqMgMb-6ptXR7-BCn3-TfQRJ8rBGMpi8tqEV-9p8TUXDX539az-OaiNmCs02dNRY49sgs/XsZWd5wK_1Oc_KSFTVO59D8LyuR3UfKdkAO4L4apFsM'), ('width', 256), ('height', 72)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/tqoYkvsE1Ysg_yi7G6kDRg/e9o6yxpeBsdjH_H16y73rv1FxGJ0pUBw1YzVBU_sq6Ny2e0BtuHmu7VjLhDKl4CdWHpYEVac1NSRTqIdKs-f1NYdemb4k4EubjoznL2av7U/1kEKtL2HrImdIfc8aXLiWfpR_fCOWyNtsbJQOiNNOU8'), ('width', 3000), ('height', 3000)]))]))])]",https://www.lakeshore.com/home,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782518/Instruments/Multimeters/Lakeshore-425/Lakeshore-425.png,Lakeshore 425,Write a Python script that uses Pytango to connect to a Lakeshore 425 Multimeters,,,,,"""""""Implements functionality unique to the Lake Shore Model 425 Gaussmeter.""""""
import serial

from .generic_instrument import GenericInstrument


class Model425(GenericInstrument):
    """"""A class object representing the Lake Shore Model 425 Gaussmeter.""""""

    vid_pid = [(0x1FB9, 0x0401)]

    def __init__(self,
                 serial_number=None,
                 com_port=None,
                 baud_rate=57600,
                 data_bits=7,
                 stop_bits=1,
                 parity=serial.PARITY_ODD,
                 flow_control=False,
                 handshaking=False,
                 timeout=2.0,
                 ip_address=None,
                 tcp_port=7777,
                 **kwargs):

        # Call the parent init, then fill in values specific to the 121
        GenericInstrument.__init__(self, serial_number, com_port, baud_rate, data_bits, stop_bits, parity, flow_control,
                                   handshaking, timeout, ip_address, tcp_port, **kwargs)
"
117,https://scdn.rohde-schwarz.com/ur/pws/dl_downloads/dl_common_library/dl_brochures_and_datasheets/pdf_1/SMA100A_dat-sw_en_5213-6412-22_v0700.pdf,https://en.wikipedia.org/wiki/Signal_generator,"[OrderedDict([('id', 'attnFBdOKF66mG3zi'), ('width', 640), ('height', 360), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/YuVnZasDrFAamlD509Fgqg/QqGY5SyNe0RZqWmb_Z2mKxEOlKM13NMFe_YQZmCKwz09xrVw8wQrflRg91uOO36P1bsRuu0nJiPChXTALhoVUUhz_iobFR3Y8igkmB38M10_lQL-thcBGD48D6lc-KQcfEJxF8UEANLRN8O5yxQze3yUehUTSuqjlBytqTk5T0x7gS21l6GFf0M2ze5LooFz/zN3cC_e1npphIhhv4aZX1Mz0qMPMth5UWZw-5XeqgKE'), ('filename', 'sma100a-signal-generator-front-view-rohde-schwarz_200_11643_640_360_1.jpg'), ('size', 27478), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/BgSOs-I1oWpDUA04QDybvw/ghWv_KeiTn58Zes1XcqafSX0XGlAYepYv40SDqyNEIKAdSzQs8WHBSAeHsg8koiAuvao6ixDNI2rj16lK8usWg/mn2ILUkbP1v1Xy3GoIFL78axLgX1GQ7_-oHTiH_dU2w'), ('width', 64), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/QuKhSZh9Ln4EV1vhOfuvmg/YJOo25WwTBK_9a0RmewWoW9RQfWPrf3et5J65rZS-TgROpNzDruGkwAjFjop_lJ0rbGhgpd8tPjo4zP50hG-Hg/HGjhNVT6PcEIGNl1ln652QydUr9IVMWE-7iWPiqnpLM'), ('width', 640), ('height', 360)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/tT6a7_RYgIKb5VXO5aQIGQ/vPtlcMPtuFFUfmr8y6_dguf8qwkD0UevP4vvJFDvnye1SQe9pyUIkOw16tzQN-pyFeMLDMy7P1Ef4-gxUgwNYA/Or0KZDcnvt-BI-A38DLPZDkJ3-Wb4ZsD7IzqWgLka3g'), ('width', 3000), ('height', 3000)]))]))])]",2500.0,"Munich, Germany",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116717/Instruments/Vendor%20Logos/RohdeSchwarz.png,"This Class Handles Rohdes And Schwarz Sma Signal Generators. Supported Model Is: -Sma100A. Signal quality, speed and flexibility these are the criteria by which signal generators are measured today. The R&S SMA100A perfectly meets these criteria, and thus is a premium-class analog generator that sets standards due to its outstanding characteristics.",https://www.trsrentelco.com/products/rohde-schwarz-sma100a?utm_source=google&utm_medium=cpc&utm_campaign={campaign}&utm_agid=149466169157&kwd=&ad_type=659559970489&device=c&placement=&match_type=&gclid=CjwKCAjw-vmkBhBMEiwAlrMeF7nEwWEXPs-pvwkAj_KACe-B9wh-YsMCFtR6IjOqYHd6SGWzf_tTIBoCZgkQAvD_BwE&gad=1,Rohdeschwarzsma,475.0,['RF Signal Generator'],"A signal generator is one of a class of electronic devices that generates electrical signals with set properties of amplitude, frequency, and wave shape. These generated signals are used as a stimulus for electronic measurements, typically used in designing, testing, troubleshooting, and repairing electronic or electroacoustic devices, though it often has artistic uses as well","Rohde & Schwarz GmbH & Co KG is an international electronics group specializing in the fields of electronic test equipment, broadcast & media, cybersecurity, radiomonitoring and radiolocation, and radiocommunication.
",https://github.com/Rohde-Schwarz/Examples/blob/main/SignalGenerators/Python/RsSmab_ScpiPackage/RsSmab_FileTransferWithProgress_Example.py,Pytango,https://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/tango-ds/MeasureInstruments/RohdeSchwarzSMa/index.html,Rohdes And Schwarz,"[OrderedDict([('id', 'attgThuQed8Zn1CUa'), ('width', 119), ('height', 31), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/XHBiQ9oxXm-n-HvM6LnRsA/zCF7wkTRkwfOTCAuwmibY3O7w00r82Jr-e9BArEz2wuEOw-7rLpTsqnPaLuh9W23W58Qwn9JURC-40I0_-4JxPkfgmT1CSF7VPctZxztnV4/I5ofu9MkvIeeFWHtoXZm_t6fUCujFLfj-JFESMUqIgk'), ('filename', 'download (7).png'), ('size', 735), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/rp7cS3TGPqAHuTUKlrNiDg/VQ8_PlSktrAEUSma3ec9casPyXqUCiOYTta1bFMCr-JbFojx11fj4PsFxxQcQkgk5T0s4eilsQBFkmKe1f5C4A/plUaF2hmxk-9dn7wzOx_UZSUTlLGORdKrjwdpcJGgiM'), ('width', 119), ('height', 31)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ouYl2k3tZan1Mqr3gFZ4XQ/eznvJmkOWcALsfmYE2FWZIIuDkvhPsL5ha4wYwX2hkGiFmGNwyYpsS2lgvAprhPlVCGH-c59BKm4kM4jMvjwlA/h8aBHQcCEhxqGNo05zJPlPwJ7fdGYthLjdrl6yX_uaY'), ('width', 119), ('height', 31)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/6WMk-uFRvLMFJ3F3nCseOQ/Ssto5hgGHjq8Q9vjrgnj3D0-Fay9y9tubFUbdbvK9IeGUYn2K3euoW1jshe65viP4uybZmkDEuVY84MH5n021w/_2LXQNPKEtc9MtuRG0jFWn1Hay_SQ8m2sSYN4caNxpw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.rohde-schwarz.com/ca/home_48230.html,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782521/Instruments/RF%20Signal%20Generator/SMA100A/SMA100A.jpg,SMA100A,Write a Python script that uses Pytango to connect to a SMA100A RF Signal Generator,,,True,,"""""""Example showing how you can transfer a big file to the instrument and from the instrument with showing the progress.
Since the SMA100B is quite fast on data transfer, we slow it down by waiting for 100ms between each chunk transfer (1MB)
This way we see the transfer progress better and we do not need a file that is so big - let's take cca 20MB.
For big files, use the example without the time.sleep(0.1)""""""

import time
import numpy as np
from RsSmab import *


def my_transfer_handler(args):
    """"""Function called each time a chunk of data is transferred""""""
    total_size = args.total_size if args.total_size is not None else ""unknown""
    print(f""Context: '{args.context}{'with opc' if args.opc_sync else ''}', ""
          f""chunk {args.chunk_ix}, ""
          f""transferred {args.transferred_size} bytes, ""
          f""total size {total_size}, ""
          f""direction {'reading' if args.reading else 'writing'}, ""
          f""data '{args.data}'"")
    if args.end_of_transfer:
        print('End of Transfer')
    # Slow down the transfer by 200ms to see the progress better
    time.sleep(0.1)


RsSmab.assert_minimum_version('4.70.300')
smab = RsSmab('TCPIP::10.112.1.64::HISLIP')
print(smab.utilities.idn_string)
smab.utilities.reset()

pc_file = r'c:\temp\bigFile.bin'
instr_file = '/var/user/bigFileInstr.bin'
pc_file_back = r'c:\temp\bigFileBack.bin'

# Generate a random file of 20MB size
x1mb = 1024 * 1024
with open(pc_file, 'wb') as file:
    for x in range(20):
        file.write(np.random.bytes(x1mb))

# Send the file to the instrument with events
smab.events.on_write_handler = my_transfer_handler
smab.utilities.data_chunk_size = x1mb
print(f'Sending file to the instrument...')
smab.utilities.send_file_from_pc_to_instrument(pc_file, instr_file)
smab.events.on_write_handler = None
print(f'Receiving file from the instrument...')
smab.events.on_read_handler = my_transfer_handler
smab.utilities.read_file_from_instrument_to_pc(instr_file, pc_file_back)
smab.events.on_read_handler = None
smab.close()
"
132,https://www.testequipmenthq.com/datasheets/KEITHLEY-6485-Datasheet.pdf,https://en.wikipedia.org/wiki/Ammeter,,110.6,"Cleveland, Ohio, United States",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116722/Instruments/Vendor%20Logos/Keithley.png,"The 5½-digit Model 6485 Picoammeter combines Keithley’s expertise in sensitive current measurement instrumentation with enhanced speed and a robust design. With eight current measurement ranges and high speed autoranging, this cost effective instrument can measure currents from 2nA to 20mA, taking measurements at speeds up to 1000 readings per second. The Model 6485’s 10fA resolution and superior sensitivity make it well suited for characterising low current phenomena, while its 20mA range lets it measure currents high enough for applications such as measuring 4-20mA sensor loops.",https://canada.newark.com/keithley/6485/dc-picoammeter-bench-2na-to-20ma/dp/42J5237,Keithley 6485,223.0,['Power Meters'],"An ammeter (abbreviation of Ampere meter) is an instrument used to measure the current in a circuit. Electric currents are measured in amperes (A), hence the name. For direct measurement, the ammeter is connected in series with the circuit in which the current is to be measured. An ammeter usually has low resistance so that it does not cause a significant voltage drop in the circuit being measured.","Keithley Instruments is a measurement and instrument company headquartered in Solon, Ohio, that develops, manufactures, markets, and sells data acquisition products, as well as complete systems for high-volume production and assembly testing.
",https://sourceforge.net/p/tango-ds/code/HEAD/tree/DeviceClasses/MeasureInstruments/Keithley/Keithley6485/trunk/Keithley6485.py,Pytango,https://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/tango-ds/MeasureInstruments/Keithley6485/index.html,Keithley,"[OrderedDict([('id', 'att7PoO6FUHxnCmlK'), ('width', 900), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/JPWbbY0RLTwvCH95zF0lUw/FYE_qzqVeKunCKXZHcCO2IQTlNtrj9deJrJ8IvRi4E8DhdciuLtui1KbfRNDyts0f82Yurlppm-Hpyw3N70TJuAIKY3_44qDFhUb8ydul1PEtbKFosfYlGsV4U7IYpib3RVUQUX5GWVokNgkYfRknw/WU55GPpzEr8Un4iaGll8XGxfZsNp7qoBV0mtZZFez5s'), ('filename', 'keithley-a-tektronix-company-vector-logo.png'), ('size', 4698), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/VBp9CVCl0gO2A14HXB5CIA/Xtk2sr79MHggQNs60J8dAjJHuRLmrvNscTMXYVwGV-rOZX5ZQ4F7ACtavmtqrw0hhhYlJn4zHMcxjwK-x-WurQ/oE5_tuvZoBAR0QruNt2Xeul6WMntVby0GJuS2SR_fo0'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/yaThx4kuSOslFnzq5eZpVQ/hNGVd1kgX7qo-Cv7FP9SK4FZBtGf6rfq2o4m_CWKrLkbqbSICtQmrqYH0b_i97LMUNtmJS49zBQ1ggsKG7GbMQ/aLt21VBpyLvyGoECYC69PHf_IKCG95xaVCmAVNleiU4'), ('width', 900), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ExgTiTQZwc2k2En25SNuZg/jVYfq4gboOT4ayM0U7gaP_jOrYvw63gq8LdOviK8pjRBK24qXRRVHJkZCsY3WIMXq_zK_qoOOwSZifr4odddsA/Xrej63AC0_Tv8PsRwHhmYW8nkHQ-rKBZOkMsm3Q7Dxk'), ('width', 3000), ('height', 3000)]))]))])]",https://www.tek.com/en,,Keithley 6485,Write a Python script that uses Pytango to connect to a {Device name} Power Meters,4072.7,,,,
165,,,,3500.0,"Irvine, California, United States",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116708/Instruments/Vendor%20Logos/Newport.png,"Device Server To Show The Omega Strain Gage From Newport, In A Tango System.",,Newportomega,389.0,,,"Newport provides a wide range of photonics technology and products designed to enhance the capabilities and productivity of our customers' applications.
",http://svn.code.sf.net/p/tango-ds/code/DeviceClasses/MeasureInstruments/NewportOmega/trunk/src/newportomega.py,Pytango,https://www.tango-controls.org/developers/dsc/ds/142/,Newport,"[OrderedDict([('id', 'attXej1yb0ZjvVVtv'), ('width', 119), ('height', 119), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/FEWzl_hzGTfl7OvJgJBdBw/tPUDo5GPB1KUxhEyyOyobsP-KEoiK2Ih0xVZaUfiHiCt8r8W4khZe5VI19-bfsWgJr3xTYo2OiKTwJWjUJomWLKyq_9tO2Hmp27pDpqzx-g/VaW543YV-j-evaaGXiVtfJJ5PPutORCTokI0LUABPIc'), ('filename', 'download (4).png'), ('size', 1554), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/vzEo1yHydkYTKcvHU805lg/CN-Pa1g8KwDGrdj8avQ4kKAmq7GFLPkZWa2UP04inCOeRMltWULhATvOM4IlAHcgVsXm1VdKVfkKjfQ-doZuMQ/mAI8eljB2LprW6B5NUwrGo3_Uqhn4syCcDAEHs1345k'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/WZWcs6GDcJ0WTbiq0cPGZg/77XjGUVRHP1QY9Et0AK2dUapnZ3BKA0ZFBF02a0GHvgloiyQAx_1bhBRMiUHP1mBT85PJwHOVvWgte2i91UMyg/c1h_II4v-sB65q3OPWiLcoZAYpxxo71GcwvmsgmcK90'), ('width', 119), ('height', 119)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/q5473MlvnA3X6gpdkxtp3Q/btNVEPK-gcX1En1uum6OoqnGCibk8YOVbpyUjAX1wT5sVyYQ5RwHd0sED4XLD64CkxE8G1C54Q9cRyxHz-DddA/T5IaJdzzqvtdLXEa73S1td6HEBjTZuUGAi2Itohi9Dw'), ('width', 3000), ('height', 3000)]))]))])]",https://www.newport.com/,,Newportomega,Write a Python script that uses Pytango to connect to a {Device name} ,,,,,
204,,,"[OrderedDict([('id', 'attzyvS9MbjMwlnPo'), ('width', 1024), ('height', 768), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/kOh2lnJgC1eINtaI3S1t7Q/qfUl7xandKmVYS-LKCH9QaJK_LHUfX1Ffmk3xZUdU7-D4kJB6D5cYQG3M4pJhoWLEV8J-7xI1xE2AZjaVOMEl0BkIAR4PTI4_Yp5MZKZVBw/hZgaSIrw4MFP1X0A7jvpIhjOE-IJii4_IVqvUiMAkmM'), ('filename', 'Orbi3_05.webp'), ('size', 16610), ('type', 'image/webp'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/9DB-g9cPZGXk4nMJcN8uLw/7Og1PKYyOGSeZI8yLQUvWjd-hVMp2zwMARVIcVkQYLsra6jL02kBsRs_565ZZ7bWG4-28UtKlz7a0sMvFeeyZoT-1HQRVKCUM7ejD6M-Ry4/M6RLN5lkXV7yNNWN0U9vPSvzjlGtOZWTiOxnZeUjP0k'), ('width', 48), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/n7FTF589i7KQ7ugA-Uv2eA/p-0Fmqkt599ibduuX0fRbtWIO49irRg8YqKXDQcOkSk4STfUQt7Ih0LeakZaRnLmFA9v8daf-NvB77s8zNRMklYp7BWIFY2me_XjrSJcmnQ/NuA6KN4LqpcAY1DK6PxSUHfCv_vsbA55kCY78GKqrs0'), ('width', 683), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/UW_FNthYdAx1whnHR8pibA/BVPpIjwPuTbjl1TF6lTx8LXMeZrCXrVpEH4F9ScjrlqC1k1o-yWXCb-kUU6meDNadQesgiinGgqxWAbvHiT1PWQLgf1fKgOkFCw7KoPp8r8/76QWOKGqpvEz3g1SdZs3yI7VNBvvs5NBLNvZpei63AM'), ('width', 3000), ('height', 3000)]))]))])]",,,https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116714/Instruments/Vendor%20Logos/NoLogo.png,"Orbit 3 is a wireless sensor for ambient temperature and humidity monitoring. Install Orbit 3 at a suitable location, and it will wirelessly transmit temperature and humidity readings continuously. It can be used in precast factories, concrete laboratories, on-site – or wherever ambient climate creates value for you.",https://maturix.com/sensors/orbit-3/,Orbit 3 Sensor,395.0,"['Temperature Sensor', 'Humidity Sensor']",,,https://sourceforge.net/p/tango-ds/code/HEAD/tree/DeviceClasses/MeasureInstruments/Orbit3Sensor/trunk/Orbit3Sensor.py,Pytango,https://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/tango-ds/MeasureInstruments/Orbit3Sensor/index.html,Orbit3,"[OrderedDict([('id', 'attmrdzHeYS7Cvu01'), ('width', 1763), ('height', 1763), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/n5W32iXQLs3HIKQfA-Gkkw/LO1UgMtL9R2NPB8MD4iOzFAOXL_KWJluBtsc6Q-AiTkhk1F7ZvVvb92VJuYnZihfUT9qdoRTe6us-qY2k3inZwfgmtWDIEAia1sQ7JFVYRU/_UkbOBeYGNqc6tM98NcQvJ9UzIIg19x2QGm9fbcyEgY'), ('filename', 'logo (1).png'), ('size', 99073), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/xYvAaBqBpTu6wPfmmzFr-A/_6uG8NpOG1hSfSgOoOte-heFglhxHbUomeImn8FinduZ3ycqQsj8brrZH8RkQDTguEUQyw7Bm_Xo1Zd5vdcuxA/JSOJ4CUneYLOLVi9C06VrVb0OZws9twepZHTJupsXjc'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/8eCUl1fmw8mXEv_7eJM0Hw/i73yUEx6sZ5F1yyWfcSJP8ihoY32xsbpjwI0nOtsQEucJbVOLeNnNUyMjH83l1yVDoE7uU14kaoFpMmhWP6FJQ/T2lertRT3I5fS2pvYHshdsPJIWr3q0EgaBnsm5BfRDs'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/BA3_bM747zRLISm8GHudkg/TgD5tfPwGdqbJRKdQ5IqEuVSBen-km40X0lYe-1lOBJlpdaCLFcbIp_K1hwpCElScvK134dpOu0D9Gz0VIqpwg/kHsGdGjPV0l2MYLB-Pkg1e1P2rEQoNKxAyQUcO74NqI'), ('width', 3000), ('height', 3000)]))]))])]",https://www.solartronmetrology.com/,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782607/Instruments/Temperature%20Sensor/Orbit-3-Sensor/Orbit-3-Sensor.webp,Orbit 3 Sensor,"Write a Python script that uses Pytango to connect to a {Device name} Temperature Sensor, Humidity Sensor",,,,,
249,,https://en.wikipedia.org/wiki/Oscilloscope,"[OrderedDict([('id', 'attk0PJvo91ovSb2T'), ('width', 640), ('height', 640), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/V8hbuJNb-ROF9gUdHCvG4Q/PwxWVwAorKWGgFq2eBcS_bNGG3FPoKxkR9HdYeb38mnlDxaDnhdFi3AGs9fSc91VeJfMALCM8RQbuLff0nm69g/iQgicxltGGN_iHEs7IRe6ShxCBsmRZPQYmOiy_QC3C4'), ('filename', 'DSO.jpeg'), ('size', 183942), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/PYGajK7ftCksw1mj89EUtQ/s7O8mivtKDEhB-08t540b4pFXr60sim9r76dp821fnLQ-6JBmMaIoJKlivghaZHzORPynZb9JmDJbXtCdp0I0Q/7ZWp4YbfoZVc3nG4JkGV_i91JfQCMXszfDe14X5GayU'), ('width', 36), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/udd-vbNfkNGeVvl3xPKYxg/j0JBv3n84p5CelTSN5qf5jrFJHIlaC6pWiHTE9C3FUY-YCjzA2U3Xa-NUYqIOxBpc_J7RIVvLEmgYF7v3JiSEA/dRx-oTiUKXKgN9WO1Tcpldl0P4hVRPhil2rKlLaYbHI'), ('width', 512), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ihSKsnDBDCRN6QOAn5eRQg/Z2LELWOjFcBqcP5lkBf0LsOurXCjG6tF6oYiQ9f0p18vkjOhSjndVZ8NbIZbDErjuoyvfczIAoC6zhEmjqHk9A/ildr3XrluMsvtRLRrrPGW48-0xhNWshcOCIvSgFzoaU'), ('width', 3000), ('height', 3000)]))]))])]",178.0,"s	Chestnut Ridge, New York, USA",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116685/Instruments/Vendor%20Logos/Lecroy.png,"This Class Allows The Acquisition Of A Waveform (The Description And The Data), From A Specific C...",https://www.teledynelecroy.com/oscilloscope/?utm_source=google&utm_medium=ppc&utm_term=teledyne%20lecroy%20oscilloscope&utm_content=exact_4b&gclid=Cj0KCQjw8NilBhDOARIsAHzpbLBKqasdcqZBnXZ4CpALjE8D5E6K2ECJLx-mU1xBZ1H20NnLN5TKF0kaAlGWEALw_wcB,"Lecroydso
",367.0,['Oscilloscopes'],"An oscilloscope (informally scope or O-scope) is a type of electronic test instrument that graphically displays varying voltages of one or more signals as a function of time. The main purpose is capture information on electrical signals for debugging, analysis, or characterization.","Teledyne LeCroy, Inc. manufactures and distributes electronic measuring instruments. The Company produces analyzers, measurement, and testing solutions including oscilloscopes, production test digitizers, and electronic components. Teledyne LeCroy serves customers worldwide.


",https://github.com/TeledyneLeCroy/lecroydso/blob/main/lecroydso/lecroydso.py,Pytango,https://lecroydso.readthedocs.io/en/latest/,Lecroy,"[OrderedDict([('id', 'att8OZpUeT43PIZJv'), ('width', 2700), ('height', 438), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/L42PUrdviZQv30pr3se3hA/k1GpR8vmbzLKg1m2pgUlMCYbIuaMHJAjW7Rm1xQy73tXydUrM-jC2v21bs2oYOKMixnVMI8pOX5UfYKKvr6lqA/YxucztndtEWLie0fIn9_z47Vtc5sV6RL4qq7pFTYqUg'), ('filename', '1.jpeg'), ('size', 127698), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/hlUsJglMd8xYuEyrOKlHEw/EtAP2DXYgPcGqOeYr9tq-Tq7RVa5V0aSOLkfZOxfexrz9y3A47wAdV6EFS3JYek2r1-JhKvmCdnApHMWkyOEug/R70IWyeCxQW1hOsaRCz9841wj6QcKoox49BbnRlb9FE'), ('width', 222), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/lw2z7Agi4l63vMk_TVZ8yA/3TrXTRksN9ab97rd5o4qZLnque9u_ueGe1hcKp_AyGnaJ3Dtl_rhwgHuSiXgILM5_xR25azbu9Y1oLnwQpgKBA/Y_x0UpO6xk1TSBeCpdXkdxMwIv8wR721KXY87NWMaoU'), ('width', 2700), ('height', 438)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/FVi7C2wwFwOppIufouOrjg/PoimZcopMieSGnJC335QEYHhZj9UKV4y9W6jI4h_qE10TjF9aSWLSr4xspvjuPIPyts-4EGdSzpTOpJfcUcqPw/uAvxKnNqObwMYTWFBdiI_n3CLmLrpQjIhxilImB6jdA'), ('width', 3000), ('height', 3000)]))]))])]",https://www.teledynelecroy.com/,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782648/Instruments/Oscilloscopes/Lecroydso/Lecroydso.png,"Lecroydso
",Write a Python script that uses Pytango to connect to a {Device name} Oscilloscopes,,,,,"# -----------------------------------------------------------------------------
# Summary:		Implementation of LeCroyDSO class
# Authors:		Ashok Bruno
# Started:		2/9/2021
# Copyright 2021-2024 Teledyne LeCroy Corporation. All Rights Reserved.
# -----------------------------------------------------------------------------

from lecroydso.errors import ParametersError
from lecroydso import DSOConnection
import time
import re
import logging
from datetime import datetime

verbose = 2     # set 1 (or 2)


# ------------------------------------------------------------------------------------
# Class: LeCroyDSO
class LeCroyDSO:
    """"""Communication interface to a LeCroy Oscilloscope

    Args:
        myConnection (DSOConnection): A connection interface to the oscilloscope like ActiveDSO, LeCroyVISA
        log (bool, optional): creates a log output. Defaults to False.
    """"""

    def __init__(self, connection: DSOConnection, log: bool = False):

        self._conn = connection
        self.connected = True
        self.verbose = verbose
        self.logger = None
        if self.connected is True:
            if log:
                self.__createLogger(self._conn.connection_string)

            self._insert_wait_opc = False
            self.init_vbs()

            # determine what model this scope is
            (self.manufacturer, self.model, self.serial_number, self.firmware_version) = self.query('*IDN?').split(',')

            self.available_channels = []
            self.available_digital_channels = []
            self.available_functions = []
            self.available_parameters = []
            self.available_memories = []
            self.available_zooms = []

            try:
                self.execsAll = self.query_vbs('app.ExecsNameAll').split(',')
                # parse this to get numChannels, numFunctions, numMemories, numParameters
                for exec in self.execsAll:
                    if exec.startswith('C'):
                        self.available_channels.append(exec)
                    elif exec.startswith('D'):
                        self.available_digital_channels.append(exec)
                    elif exec.startswith('F'):
                        self.available_functions.append(exec)
                    elif exec.startswith('P'):
                        self.available_parameters.append(exec)
                    elif exec.startswith('M'):
                        self.available_memories.append(exec)
                    elif exec.startswith('Z'):
                        self.available_zooms.append(exec)
            except ValueError:
                # some default values if unable to read the cvar
                self.available_channels = ['C1', 'C2', 'C3', 'C4']
                self.available_digital_channels = ['D1', 'D2', 'D3', 'D4']
                self.available_functions = ['F1', 'F2', 'F3', 'F4']
                self.available_parameters = ['P1', 'P2', 'P3', 'P4', 'P5', 'P6']
                self.available_memories = ['M1', 'M2', 'M3', 'M4']
                self.available_zooms = ['Z1', 'Z2', 'Z3', 'Z4']

            iNumChannels = len(self.available_channels)
            self.is_attenuator_used = True
            if (iNumChannels == 2):
                self.is_attenuator_used = False
            self.get_instrument_max_bandwidth()

    def __del__(self):
        if self.connected:
            self.disconnect_from_dso()
            self.disconnect()

    def __createLogger(self, suffix: str):
        self.logger = logging.getLogger('LeCroyDSO_' + suffix)
        self.logger.setLevel(logging.INFO)

        # create file handler which logs debug messages
        fh = logging.FileHandler('LeCroyDSO_' + suffix + '_' + datetime.now().strftime('%Y_%m_%d') + '.log')
        fh.setLevel(logging.DEBUG)

        # create console handler with a higher log level
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)

        # create formatter and add it to the handlers
        formatter = logging.Formatter('%(asctime)s [%(levelname)s]: %(message)s', datefmt='%m/%d/%Y %H:%M:%S')
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)

        # add the handlers to the logger
        self.logger.addHandler(fh)
        self.logger.addHandler(ch)

    def init_vbs(self):
        """"""Define some 'standard' variables in scope's VBS context, so commands
        are simpler and more efficient.
        After this function is called you can
        """"""
        self.write_vbs('set acq = app.Acquisition')
        self.write_vbs('set acqHorz = acq.Horizontal')
        self.write_vbs('set chans = acq.channels')
        self.write_vbs('set meas = app.Measure')
        self.write_vbs('set math = app.Math')
        self.write_vbs('set zoom = app.Zoom')
        self.write_vbs('set memory = app.Memory')
        self.write_vbs('set syscon = app.SystemControl')

    def validate_source(self, source: str) -> bool:
        """"""Validate the source against Analog and Digital channels

        Args:
            source (str): source to validate

        Raises:
            ParametersError: on Invalid source

        Returns:
            bool: True, when source is valid
        """"""

        if source.upper() in self.available_channels or source.upper() in self.available_digital_channels:
            return True
        raise ParametersError('source not found')

    def validate_channel_source(self, source: str) -> bool:
        """"""Validate the source against Analog channels

        Args:
            source (str): source to validate

        Raises:
            ParametersError: on Invalid source

        Returns:
            bool: True, when source is valid
        """"""
        if source.upper() in self.available_channels:
            return True
        raise ParametersError('Channel source not found')

    def validate_digital_source(self, source: str) -> bool:
        """"""Validate the source against Digital channels

        Args:
            source (str): source to validate

        Raises:
            ParametersError: on Invalid source

        Returns:
            bool: True, when source is valid
        """"""
        if source.upper() in self.available_digital_channels:
            return True
        raise ParametersError('Digital source not found')

    def validate_parameters_source(self, parameter: str):
        """"""Validate the source against paramter sources

        Args:
            parameter (str): source to validate

        Raises:
            ParametersError: on Invalid source

        Returns:
            bool: True, when source is valid
        """"""
        if parameter.upper() in self.available_parameters:
            return True
        raise ParametersError('Parameter source not found')

    def validate_zoom_source(self, zoom: str):
        """"""Validate the source against zoom sources

        Args:
            zoom (str): source to validate

        Raises:
            ParametersError: on Invalid source

        Returns:
            bool: True, when source is valid
        """"""
        if zoom.upper() in self.available_zooms:
            return True
        raise ParametersError('Zoom source not found')

    def disconnect(self):
        if self.connected:
            self.connected = False

    def disconnect_from_dso(self):
        self._conn.disconnect()

    def get_float_value(self, query_cmd: str) -> float:
        """"""Gets value of the VBS command

        Args:
            query_cmd (str): VBS command

        Returns:
            float: value
        """"""
        val = float(self.query_vbs(query_cmd))
        return val

    def get_string_value(self, query_cmd: str) -> float:
        """"""Gets value of the VBS command

        Args:
            query_cmd (str): VBS command

        Returns:
            str: string value
        """"""
        val = self.query_vbs(query_cmd)
        return val.upper()

    @property
    def num_channels(self) -> int:
        """"""readonly Property for number of channels
        """"""
        return len(self.available_channels)

    @property
    def num_digital_channels(self) -> int:
        """"""readonly Property for number of Digital Channels
        """"""
        return len(self.available_digital_channels)

    @property
    def num_functions(self) -> int:
        """"""readonly Property for number of Functions F1 to Fn
        """"""
        return len(self.available_functions)

    @property
    def num_memories(self) -> int:
        """"""readonly Property for number of Memories M1 to Mn
        """"""
        return len(self.available_memories)

    @property
    def num_parameters(self) -> int:
        """"""readonly Property for number of Parameters P1 to Pn
        """"""
        return len(self.available_parameters)

    @property
    def num_zooms(self) -> int:
        """"""readonly Property for number of Zoom Z1 to Zn
        """"""
        return len(self.available_zooms)

    @property
    def query_response_max_length(self) -> int:
        """"""read max length of response string
        """"""
        return self._conn.query_response_max_length

    @query_response_max_length.setter
    def query_response_max_length(self, val: int):
        """"""set the maximum length of the response string from the instrument
        """"""
        self._conn.query_response_max_length = val

    @property
    def insert_wait_opc(self):
        self._insert_wait_opc = self._conn.insert_wait_opc
        return self._insert_wait_opc

    @insert_wait_opc.setter
    def insert_wait_opc(self, val: bool):
        """"""Inserts a OPC command for reads and writes.
        This ensures that the command will execute sequentially.
        The default value for a connection is false.
        NOTE: There is a performance impact by setting this flag

        Args:
            val (bool): True to insert wait_opc, False otherwise.
        """"""
        self._insert_wait_opc = val
        self._conn.insert_wait_opc = val

    @property
    def hor_scale(self) -> float:
        """"""Reads the horizontal scale from the dso
        """"""
        return self.get_hor_scale()

    @hor_scale.setter
    def hor_scale(self, val: float):
        """"""Sets the horizontal scale of the dso
        """"""
        self.set_hor_scale(val)

    @property
    def hor_offset(self) -> float:
        """"""Reads the horizontal offset from the dso
        """"""
        return self.get_hor_offset()

    @hor_offset.setter
    def hor_offset(self, val: float):
        """"""Sets the horizontal offset of the dso
        """"""
        self.set_hor_offset(val)

    @property
    def sample_mode(self) -> str:
        """"""Reads the sample mode of the dso
        """"""
        return self.query_vbs('acqHorz.samplemode')

    @sample_mode.setter
    def sample_mode(self, val: str):
        """"""Sets the sample mode of the dso
        """"""
        self.set_sample_mode(val)

    @property
    def trigger_mode(self) -> str:
        """"""Reads the trigger mode of the dso
        """"""
        return self.get_string_value('acq.TriggerMode')

    @trigger_mode.setter
    def trigger_mode(self, val: str):
        """"""Sets the trigger mode of the dso
        """"""
        self.set_trigger_mode(val)

    @property
    def triggerType(self) -> str:
        """"""Reads the trigger type of the dso
        """"""
        self.get_string_value('acq.Trigger.Type')

    @triggerType.setter
    def triggerType(self, val: str):
        """"""Sets the trigger type of the dso
        """"""
        self.set_trigger_type(val)

    @property
    def trigger_source(self) -> str:
        """"""Reads the trigger source of the dso
        """"""
        return self.get_string_value('acq.Trigger.Source')

    @trigger_source.setter
    def trigger_source(self, val: str):
        """"""Sets the trigger source of the dso
        """"""
        self.set_trigger_source(val)

    @property
    def trigger_coupling(self) -> str:
        """"""Reads the trigger coupling of the dso
        """"""
        self.get_string_value('acq.Trigger.Coupling')

    @trigger_coupling.setter
    def trigger_coupling(self, val: str):
        """"""Sets the trigger coupling of the dso
        """"""
        self.set_trigger_coupling(val)

    def write(self, strCmd: str):
        """"""Sends the command

        Args:
            message (str): command string
        """"""
        self._conn.write(strCmd)

    def write_vbs(self, strCmd: str):
        """"""Sends the command as a VBS formatted comamnd

        Args:
            message (str): command string
        """"""
        self._conn.write_vbs(strCmd)

    def query(self, message: str, query_delay: float = None) -> str:
        """"""Send the query and returns the response

        Args:
            message (string): command to send
            query_delay (float, optional): delay between the command and response. Defaults to None.

        Returns:
            string: Response from the instrument
        """"""
        return self._conn.query(message, query_delay)

    def query_vbs(self, message: str, query_delay: float = None) -> str:
        """"""Send the query as a VBS formatted string and returns the response

        Args:
            message (string): command to send
            query_delay (float, optional): delay between the command and response. Defaults to None.

        Returns:
            string: Response from the instrument
        """"""
        return self._conn.query_vbs(message, query_delay)

    def vbs(self, vbs_command: str, is_query: bool = False, max_length: int = None) -> str:
        """"""vbs command wrapper for read or write

        Args:
            vbs_command (str): vbs command to send
            is_query (bool, optional): Set to Tue if expecting a return value. Defaults to False.
            max_length (int, optional): maximum length of the expected transfer. Defaults to None.
        Returns:
            str: return value of the response
        """"""
        if not is_query:
            self.write_vbs(vbs_command)
            response = 0
        else:
            if max_length is not None:
                self.query_response_max_length = max_length
            response = self.query_vbs(vbs_command)
        return response

    def set_default_state(self):
        """"""Sets the default state of the DSO
        """"""
        self.write_vbs('app.SystemControl.EnableMessageBox = ' + str(0))
        self.write('CHDR OFF')
        self.query('ALST?')
        self.wait_opc()
        self.write('*RST')
        self.write('CHDR OFF')
        self.write_vbs('app.SaveRecall.Setup.DoRecallDefaultPanelWithTriggerModeAuto')
        self.wait_opc()
        self.wait_opc()

    def restart_app(self):
        """"""Restarts the scope application
        """"""
        self.disconnect()
        self.write_vbs('app.Restart')
        # wait and reconnect
        for _ in range(20):
            time.sleep(5)
            self._conn.reconnect()
            if self._conn.connected:
                break
        self.__init__(self._conn, self.logger)

    def acquire(self, timeout: float = 0.1, force: bool = True) -> bool:
        """"""Acquire a waveform

        Args:
            timeout (float, optional): timeout in seconds for the acquisition to wait. Defaults to 0.1.
            force (bool, optional): Forces an acquisition to complete. Defaults to True.

        Returns:
            bool: True for Triggered, False if not Triggered or unknown state
        """"""
        if force:
            self.write_vbs('acq.acquire ' + str(timeout) + ',' + str(force))
            self.wait_opc()
            return True
        else:
            triggered = self.query_vbs('acq.acquire(' + str(timeout) + ')')
            if triggered == '0':
                return False
            elif triggered == '1':
                return True
            else:
                return False

    def get_scope_setup(self, filename: str = None) -> str:
        """"""Reads the instrument control state into a string

        Returns:
            str: panel file returned as a string, trailing terminator removed
        """"""
        setup = self._conn.get_panel()

        if filename is not None:
            setup = setup[0:-8]
            with open(filename, 'w') as f:
                f.write(setup)
        return setup

    def set_scope_setup(self, setup: str, filename: str = None):
        """"""Set the instrument control state using a panel string, typically from the method get_panel

        Args:
            panel (str): description

        Returns:
            bool: True on success, False on failure
        """"""
        if filename is None:
            theSetup = setup
        else:
            with open(filename, 'r') as f:
                theSetup = f.read() + 'ffffffff'

        return self._conn.set_panel(theSetup)

    def get_waveform(self, source: str) -> bytes:
        """"""Get a waveform from the source specified

        Args:
            source (str): Source string 'C1'

        Returns:
            bytes: return the waveform as bytes, may need to processed further to make sense of it
        """"""
        self.validate_source(source)
        self._conn.write('{}:WF?'.format(source))
        time.sleep(0.1)

        # read the first 11 bytes, this gives us the length of the transfer
        header = self._conn.read_raw(15)
        if 'WARNING' in str(header):
            return ''

        tmp = header[6:15]
        # get number of bytes in the response
        bytes = int(tmp.tobytes().decode('utf-8'))

        # read the amount of data
        wf = self._conn.read_raw(bytes)
        return wf

    def transfer_file_to_dso(self, remoteDevice: str, remoteFileName: str, localFileName: str) -> bool:
        """"""Transfers a file from the PC to the DSO

        Args:
            remoteDevice (str): The device name on the instrument end, typically CARD, HDD
            remoteFileName (str): The name and path of the destination file on the instrument
            localFileName (str): The name and path of the source file on the PC

        Returns:
            bool: True on success, False on failure
        """"""
        response = self._conn.transfer_file_to_dso(remoteDevice, remoteFileName, localFileName)
        return response >= 0.0

    def transfer_file_to_pc(self, remoteDevice: str, remoteFileName: str, localFileName: str) -> bool:
        """"""Transfers a file from the DSO to the PC

        Args:
            remoteDevice (str): The device name on the instrument end, typically CARD, HDD
            remoteFileName (str): The name and path of the destination file on the instrument
            localFileName (str): The name and path of the source file on the PC

        Returns:
            bool: True on success, False on failure
        """"""
        response = self._conn.transfer_file_to_pc(remoteDevice, remoteFileName, localFileName)
        return response >= 0.0

    def pava(self, channel: str, measurement: str) -> tuple:
        """"""Sends a PAVA query to the DSO

        Args:
            channel (str): channel index as a str ('C1')
            measurement (str): specifies the PAVA measurement

        Returns:
            tuple: returns (value, status)
        """"""
        result = self.query(channel + ':PAVA? ' + measurement).split(',')
        status = result[2]

        if status.upper() == 'OK':
            value = float(result[1])
        else:
            value = 0.0

        return value, status

    def set_trigger_source(self, source: str):
        """"""Sets the Trigger Source of the DSO

        Args:
            source (str): C1 to Cn, D1 to Dn, EXT, LINE are possible choices

        Raises:
            ParametersError: if the source is not valid
        """"""
        if (source.upper() in ['EXT', 'LINE'] or self.validate_source(source)):
            self.write_vbs('acq.Trigger.source = ""' + source.upper() + '""')
        else:
            raise ParametersError('source not found')

    def set_trigger_mode(self, mode: str):
        """"""Set Trigger Mode of the DSO

        Args:
            mode (str): Set Trigger Mode to ['AUTO', 'NORMAL', 'SINGLE', 'STOPPED'].

        Raises:
            ParametersError: invalid values
        """"""
        if mode.upper() in ['AUTO', 'NORMAL', 'SINGLE', 'STOPPED']:
            self.write_vbs('acq.triggermode = ""' + mode.upper() + '""')
            self.wait_opc()
        else:
            raise ParametersError('TriggerMode not valid')

    def get_trigger_mode(self) -> str:
        """"""Get the Trigger Mode of the DSO

        Returns:
            str: returns the Trigger Mode
        """"""
        mode = self.query_vbs('acq.TriggerMode')
        return mode.upper()

    def get_trigger_type(self) -> str:
        """"""Gets the trigger type of the DSO

        Returns:
            str: Trigger type value
        """"""
        type = self.query_vbs('acq.Trigger.Type')
        return type.upper()

    def set_trigger_coupling(self, channel: str, coupling: str):
        """"""Set the Trigger Coupling of the DSO

        Args:
            channel (str): Channel Source
            coupling (str): Sets the coupling.

        Raises:
            ParametersError: Invalid channel or coupling
        """"""
        if ((channel.upper() in self.available_channels) and (coupling.upper() in ('DC', 'AC', 'LFREJ', 'HFREJ'))):
            self.write_vbs('acq.Trigger.' + channel.upper() + 'Coupling = ""' + coupling.upper() + '""')
        else:
            raise ParametersError('Trigger Coupling not valid')

    def set_holdoff_type(self, type: str):
        """"""Sets the Trigger Holdoff type

        Args:
            type (str): possible values ['OFF', 'TIME', 'EVENTS']
        """"""
        if type.upper() in ['OFF', 'TIME', 'EVENTS']:
            self.write_vbs('acq.Trigger.HoldoffType = ""' + type.upper() + '""')

    def set_holdoff_events(self, numEvents: int = 1):
        """"""Set Trigger Holdoff events

        Args:
            numEvents (int, optional): Sets the number of holdoff events. Defaults to 1.
        """"""
        if 1 <= numEvents <= 1000000000:
            self.write_vbs('acq.Trigger.HoldoffEvents = ' + str(numEvents))

    def set_average_sweeps(self, channel: str, sweeps: int = 1):
        """"""Set the Average number of sweeps for a channel

        Args:
            channel (str): Channel source
            sweeps (int, optional): Number of sweeps. Defaults to 1.

        Raises:
            ParametersError: on invalid channel or number of sweeps
        """"""
        if (self.validate_channel_source(channel) and 1 <= sweeps <= 1000000):
            self.write_vbs('app.acquisition.' + channel.upper() + '.AverageSweeps = ' + str(sweeps))
        else:
            raise ParametersError('Sweeps invalid')

    def clear_sweeps(self):
        """"""Clear Sweeps
        """"""
        self.write_vbs('app.ClearSweeps.ActNow()')

    def set_trigger_level(self, source: str, level: float = 0.0):
        """"""Set the Trigger Level of the DSO

        Args:
            source (str): Channel source
            level (float, optional): Trigger Level of the trigger source. Defaults to 0.0.

        Raises:
            ParametersError: on invalid Channel source
        """"""
        if (source.upper() in ('EXT') or source.upper() in self.available_channels):
            self.write_vbs('acq.Trigger.' + source.upper() + 'Level = ' + str(level))
        elif (source.upper() in self.available_digital_channels):
            group = int(source.upper().replace('D', '')) / 9
            self.write_vbs('app.LogicAnalyzer.MSxxLogicFamily' + str(group) + ' = ""UserDefined""')
            self.write_vbs('app.LogicAnalyzer.MSxxThreshold' + str(group) + ' = ' + str(level))
        else:
            raise ParametersError('source not found')

    def set_digital_hysteresis_level(self, source: str, level: float = 0.1):
        """"""Set Digital Hysteresis Level

        Args:
            source (str): Digital Channel source
            level (float, optional): Hysteresis. Defaults to 0.1.

        Raises:
            ParametersError: on invalid Digital Channel Source and invalid level
        """"""
        if (self.validate_digital_source(source) and level >= .1 and level <= 1.4):
            group = int(source.upper().replace('D', '')) / 9
            self.write_vbs('app.LogicAnalyzer.MSxxLogicFamily' + str(group) + ' = ""UserDefined""')
            self.write_vbs('app.LogicAnalyzer.MSxxHysteresis' + str(group) + ' = ' + str(level), True)
        else:
            raise ParametersError('source not found')

    def set_trigger_type(self, type: str = 'EDGE'):
        """"""Set Trigger Type

        Args:
            type (str, optional): Type of Triger specified as a string. Defaults to 'EDGE'.

        Raises:
            ParametersError: on invalid Trigger Type
        """"""
        if type.upper() in ['EDGE', 'WIDTH', 'QUALIFIED', 'WINDOW', 'INTERNAL', 'TV', 'PATTERN']:
            self.write_vbs('acq.Trigger.type = ' + type.upper())
        else:
            raise ParametersError('source not found')

    def set_trigger_slope(self, channel: str, slope: str = 'POSITIVE'):
        """"""Sets the trigger slope of the DSO

        Args:
            channel (str): Channel source
            slope (str, optional): Typically 'POSITIVE', 'NEGATIVE', 'EITHER'. Defaults to 'POSITIVE'.

        Raises:
            ParametersError: on invalid source or slope
        """"""
        if (slope.upper() in ['POSITIVE', 'NEGATIVE', 'EITHER']):
            if (channel.upper() in self.available_channels):
                self.write_vbs('acq.Trigger.' + channel.upper() + '.slope = ""' + slope.upper() + '""')
            elif channel.uppper in ['EXT', 'LINE']:
                self.write_vbs('acq.Trigger.' + channel.upper() + '.slope = ""' + slope.upper() + '""')
            else:
                raise ParametersError('source not found')
        else:
            raise ParametersError('slope not found')

    def set_coupling(self, source: str, coupling: str = 'DC50'):
        """"""Set the channel coupling of the source specified

        Args:
            source (str): Channel source
            coupling (str, optional): Coupling is typically 'DC50', 'DC1M', 'AC1M', 'GND','DC100k'. Defaults to 'DC50'.

        Raises:
            ParametersError: on invalid Coupling
        """"""
        if coupling.upper() not in ['DC50', 'DC1M', 'AC1M', 'GND', 'DC100k']:
            raise ParametersError('Invalid Coupling')
        if source.upper() in self.available_channels:
            self.write_vbs('app.acquisition.' + source.upper() + '.Coupling = ""' + coupling.upper() + '""')
        else:
            if source.upper() == 'EXT':
                source = 'AUXIN'
            if source.upper() == 'AUXIN':
                self.write_vbs('app.acquisition.' + source.upper() + '.Coupling = ""' + coupling.upper() + '""')

    def set_ver_offset(self, source: str, offset: float = 0.0):
        """"""Sets the vertical offset of the channel

        Args:
            source (str): Channel source
            offset (float, optional): Vertical offset. Defaults to 0.0.

        Raises:
            ParametersError: on invalid channel source
        """"""
        if source.upper() in self.available_channels:
            self.write_vbs('app.acquisition.' + source.upper() + '.VerOffset = ' + str(offset))
        else:
            raise ParametersError('source not found')

    def set_view(self, channel: str, view: bool = True, digitalGroup: str = 'Digital1'):
        """"""Set view on or off

        Args:
            channel (str): Analog or Digital source
            view (bool, optional): True sets view ON. Defaults to True.
            digitalGroup (str, optional): This is ignored if source is analog. If it is a digital source, specifies the group it belongs to. Defaults to 'Digital1'.

        Raises:
            ParametersError: on invalid source or group
        """"""
        if (channel.upper() in self.available_channels):
            self.write_vbs('app.acquisition.' + channel.upper() + '.view = ' + str(view))
        elif (channel.upper() in self.available_digital_channels and digitalGroup.upper() in ('DIGITAL1', 'DIGITAL2', 'DIGITAL3', 'DIGITAL4')):
            self.write_vbs('app.LogicAnalyzer.' + digitalGroup.upper() + '.Digital' + channel.upper()[1:] + ' = ' + str(view))
        else:
            raise ParametersError('source not found')

    def set_bandwidth_limit(self, channel: str, bandwidth: str = 'FULL'):
        """"""Set bandwidth limit for the channel

        Args:
            channel (str): Channel source
            bandwidth (str, optional): possible values are 'FULL', '350MHZ', '200MHZ', '100MHZ', '20MHZ', 'RAW'. Defaults to 'FULL'.

        Raises:
            ParametersError: on invalid channel source or bandwidth limit
        """"""
        if (self.validate_channel_source(channel) and (bandwidth.upper() in ['FULL', '350MHZ', '200MHZ', '100MHZ', '20MHZ', 'RAW'])):
            self.write_vbs('app.acquisition.' + channel.upper() + '.BandwidthLimit = ""' + bandwidth.upper() + '""')
        else:
            raise ParametersError('Invalid bandwidth limit')

    def set_ver_scale(self, channel: str, ver_scale: float = 0.001):
        """"""Set vertical scale for the channel

        Args:
            channel (str): Channel source
            ver_scale (float, optional): vertical scale. Defaults to 0.001.
        """"""
        self.validate_channel_source(channel)
        self.write_vbs('acq.' + channel.upper() + '.VerScale = ' + str(ver_scale))

    def set_ver_scale_variable(self, channel: str, variable: bool = False):
        """"""Set vertical scale variable flag

        Args:
            channel (str): Channel source
            variable (bool, optional): True sets the variable flag to ON and the step of the vertical scale is variable. Defaults to False.
        """"""
        self.validate_channel_source(channel)
        self.write_vbs('acq.' + channel.upper() + '.VerScaleVariable = ' + '1' if variable else '0')

    def set_sample_mode(self, sample_mode: str = 'REALTIME', segments: int = 10):
        """"""Sets the sample mode of the DSO

        Args:
            sample_mode (str, optional): Typical values for sample mode are REALTIME|RIS|ROLL|SEQUENCE. Defaults to 'REALTIME'.
            segments (int, optional): This is used for Sequence mode to set the number of segments. Defaults to 10.
        """"""
        if sample_mode.upper() in ['REALTIME', 'RIS', 'ROLL', 'SEQUENCE']:
            self.write_vbs('acqHorz.samplemode = ""' + sample_mode.upper() + '""')
            if sample_mode.upper() == 'SEQUENCE' and segments >= 2:
                self.write_vbs('acqHorz.numsegments = ' + str(segments))
        else:
            ParametersError('Invalid Sample mode')

    def set_reference_clock(self, reference: str = 'INTERNAL'):
        """"""Set the reference clock of the DSO

        Args:
            source (str, optional): Possible values are INTERNAL|EXTERNAL. Defaults to 'INTERNAL'.

        Raises:
            ParametersError: on invalid reference
        """"""
        if reference.upper() in ('INTERNAL', 'EXTERNAL'):
            self.write_vbs('acqHorz.referenceclock = ""' + reference.upper() + '""')
        else:
            raise ParametersError('Invalid Reference clock')

    def set_hor_scale(self, hor_scale: float):
        """"""Sets the horizontal scale of the DSO

        Args:
            hor_scale (float): Horizontal scale value
        """"""
        self.write_vbs('acqHorz.horscale = ' + str(hor_scale))

    def set_hor_offset(self, hor_offset: float = 0.0):
        """"""Set the Horizontal offset of the scope

        Args:
            hor_offset (float, optional): Horizontal offset value. Defaults to 0.0.
        """"""
        self.write_vbs('acqHorz.horoffset = ' + str(hor_offset))

    def set_num_points(self, num_points: int):
        """"""Set Number of the points for the acquisition

        Args:
            num_points (int): number of points

        """"""
        self.write_vbs('acqHorz.numpoints = ' + str(num_points))

    def set_max_samples(self, max_samples: int):
        """"""Sets the Max Samples possible in the acquisition

        Args:
            max_samples (int): maximum samples value
        """"""
        self.write_vbs('acqHorz.MaxSamples = ' + str(max_samples))

    def set_sample_rate(self, sample_rate: float):
        """"""Set the sample rate to a specific value. This sets the DSO to FixedSampleRate
        memory mode.

        Args:
            sample_rate (float): sample rate value

        Raises:
            ParametersError: on invalid Sample rate
        """"""
        self.set_memory_mode('FIXEDSAMPLERATE')
        self.write_vbs('acqHorz.samplerate = ' + str(sample_rate))
        if self.get_sample_rate() != float(sample_rate):
            raise ParametersError('Invalid Sample Rate')

    def set_memory_mode(self, maximize: str = 'SetMaximumMemory'):
        """"""Set Memory mode of the DSO

        Args:
            maximize (str, optional): Possible values are SETMAXIMUMMEMORY|FIXEDSAMPLERATE. Defaults to 'SetMaximumMemory'.

        Raises:
            ParametersError: on invalid Memory mode
        """"""
        if maximize.upper() in ['SETMAXIMUMMEMORY', 'FIXEDSAMPLERATE']:
            self.write_vbs('acqHorz.maximize = ""' + maximize.upper() + '""')
        else:
            raise ParametersError('Invalid Memory mode')

    def set_hardcopy(self, filename: str = 'wav000.jpg', destination: str = 'EMAIL',
                     area: str = 'DSOWINDOW', orientation: str = 'LANDSCAPE', color: str = 'BW'):
        """"""Set the hardcopy variables

        Args:
            filename (str, optional): filename on the DSO. Defaults to 'wav000.jpg'.
            destination (str, optional): possible destination are CLIPBOARD|EMAIL|FILE|PRINTER|REMOTE. Defaults to 'EMAIL'.
            area (str, optional): possible area are DSOWINDOW|FULLSCREEN|GRIDAREAONLY. Defaults to 'DSOWINDOW'.
            orientation (str, optional): possible orientation are PORTRAIT|LANDSCAPE. Defaults to 'LANDSCAPE'.
            color (str, optional): possible colors are BW|PRINT|STD. Defaults to 'BW'.
        """"""
        if filename is not None:
            self.write_vbs('app.Hardcopy.PreferredFilename = ""' + filename + '""')
        if destination.upper() in ['CLIPBOARD', 'EMAIL', 'FILE', 'PRINTER', 'REMOTE']:
            self.write_vbs('app.Hardcopy.Destination = ""' + destination.upper() + '""')
        if area.upper() in ['DSOWINDOW', 'FULLSCREEN', 'GRIDAREAONLY']:
            self.write_vbs('app.Hardcopy.HardCopyArea = ""' + area.upper() + '""')
        if orientation.upper() in ['PORTRAIT', 'LANDSCAPE']:
            self.write_vbs('app.Hardcopy.Orientation = ""' + orientation.upper() + '""')
        if color.upper() in ['BW', 'PRINT', 'STD']:
            self.write_vbs('app.Hardcopy.UseColor = ""' + color.upper() + '""')

    def hardcopy_print(self):
        """"""Generates a hardcopy
        """"""
        self.write_vbs('app.Hardopy.Print')

    def get_hor_scale(self) -> float:
        """"""Gets the Horizontal scale

        Returns:
            [float]: horizontal scale value
        """"""
        hor_scale = float(self.query_vbs('acqHorz.horscale'))
        return hor_scale

    def get_hor_offset(self) -> float:
        """"""Gets the Horizontal offset

        Returns:
            [float]: horizontal offset value
        """"""
        hor_offset = float(self.query_vbs('acqHorz.horoffset'))
        return hor_offset

    def get_num_points(self) -> float:
        """"""Gets the number of points

        Returns:
            float: Number of points value
        """"""
        num_points = float(self.query_vbs('acqHorz.numpoints'))
        return num_points

    def get_sample_rate(self) -> float:
        """"""Gets the sample rate of the DSO

        Returns:
            float: Sample rate value
        """"""
        sample_rate = float(self.query_vbs('acqHorz.samplerate'))
        return sample_rate

    def get_num_sweeps(self, channel: str) -> int:
        """"""Gets the number of sweeps of the channel specified

        Args:
            channel (str): Channel source

        Returns:
            int: number of values acquired so far
        """"""
        self.validate_source(channel)
        res = self.query_vbs('app.acquisition.' + channel.upper() + '.Out.Result.Sweeps')
        try:
            numSweeps = int(res)
        except ValueError:
            numSweeps = -100
        return numSweeps

    def get_time_per_point(self) -> float:
        """"""Gets the time per point value of the DSO

        Returns:
            float: Time per point value
        """"""
        time_per_point = float(self.query_vbs('acqHorz.timeperpoint'))
        return time_per_point

    def get_ver_scale(self, channel: str) -> float:
        """"""Get Vertical scale of the DSO

        Args:
            channel (str): Channel source

        Returns:
            float: Vertical scale value
        """"""
        self.validate_channel_source(channel)
        verScale = float(self.query_vbs('app.acquisition.' + channel.upper() + '.VerScale'))
        return verScale

    def get_ver_offset(self, channel: str) -> float:
        """"""Gets the vertical offset of the channel

        Args:
            channel (str): Channel source

        Returns:
            float: Vertical offset value
        """"""
        self.validate_channel_source(channel)
        verScale = float(self.query_vbs('app.acquisition.' + channel.upper() + '.VerOffset'))
        return verScale

    def recall_default_panel(self):
        """"""Recall the default setup of the DSO
        """"""
        self.write_vbs('app.SaveRecall.Setup.DoRecallDefaultPanel')
        self.wait_opc()

    def get_serial_number(self) -> str:
        """"""Get the serial number of the DSO

        Returns:
            str: Serial number as a string
        """"""
        self.scopeSerial = self.query_vbs('app.SerialNumber')
        return self.scopeSerial

    def get_instrument_max_bandwidth(self) -> str:
        """"""Gets the maximum bandwidth of the DSO

        Returns:
            str: Maximum bandwidth value
        """"""
        self.maxBandwidth = self.query_vbs('app.InstrumentMaxBandwidth')
        return self.maxBandwidth

    def get_instrument_model(self) -> str:
        """"""Gets the instrument model of the DSO

        Returns:
            str: Instrument model as a string
        """"""
        self.instrumentModel = self.query_vbs('app.InstrumentModel')
        return self.instrumentModel

    def get_firmware_version(self) -> str:
        """"""Gets the firmware version of the DSO

        Returns:
            str: Firmware version as string
        """"""
        self.firmware_version = self.query_vbs('app.FirmwareVersion')
        return self.firmware_version

    def set_measure_statistics(self, on: bool):
        """"""Set the measure statistics on or off

        Args:
            on (bool): True turns on measurement statistics
        """"""
        self.write_vbs('meas.StatsOn = ' + '1' if on else '0')

    def set_measure(self, parameter: str, source1: str, source2: str = 'None', param_engine: str = 'TimeAtLevel', view: bool = True):
        """"""Setup a parameter measurement

        Args:
            parameter (str): Parameter source P1 to Pn
            source1 (str): possible measurement sources
            source2 (str, optional): possible measurement sources. Defaults to 'None'.
            param_engine (str, optional): measurement engine to use. Defaults to 'TimeAtLevel'.
            view (bool, optional): True turns on measurement view. Defaults to True.

        Raises:
            ParametersError: on invalid paramter source
        """"""
        self.validate_parameters_source(parameter)
        self.write_vbs('meas.' + parameter.upper() + '.ParamEngine = ""' + param_engine.upper() + '""')
        self.write_vbs('meas.' + parameter.upper() + '.Source1 = ""' + source1.upper() + '""')
        self.write_vbs('meas.' + parameter.upper() + '.Source2 = ""' + source2.upper() + '""')
        self.write_vbs('meas.View' + parameter.upper() + ' = 1' if view else ' = 0')

    def get_measure_stats(self, parameter: str) -> tuple:
        """"""Reads the measurement statistics values for a parameter

        Args:
            parameter (str): Parameter name P1 to Pn

        Returns:
            tuple: Returns the values (last, max, mean, min, num, sdev, status)

        Raises:
            ParametersError: on invalid paramter source
        """"""
        self.validate_parameters_source(parameter)
        last = self.query_vbs('meas.' + parameter + '.last.Result.Value')
        max = self.query_vbs('meas.' + parameter + '.max.Result.Value')
        mean = self.query_vbs('meas.' + parameter + '.mean.Result.Value')
        min = self.query_vbs('meas.' + parameter + '.min.Result.Value')
        num = self.query_vbs('meas.' + parameter + '.num.Result.Value')
        sdev = self.query_vbs('meas.' + parameter + '.sdev.Result.Value')
        status = self.query_vbs('meas.' + parameter + '.Out.Result.Status')
        self.wait_opc()

        return (last, max, mean, min, num, sdev, status)

    def get_measure_value(self, parameter: str) -> float:
        """"""Gets the last measurement value of a parameter

        Args:
            parameter (str): Parameter source P1 to Pn

        Returns:
            [float]: Last measurement value of the parameter, -999999.99 on error

        Raises:
            ParametersError: on invalid parameter source
        """"""
        self.validate_parameters_source(parameter)
        last = self.query_vbs('meas.' + parameter + '.last.Result.Value')
        try:
            fLast = float(last)
        except ValueError:
            fLast = -999999.99
        return fLast

    def get_measure_mean(self, parameter: str) -> float:
        """"""Gets the mean value of the parameter

        Args:
            parameter (str): Parameter source P1 to Pn

        Returns:
            [float]: Mean value of the parameter, -999999.99 on error

        Raises:
            ParametersError: on invalid parameter source
        """"""
        self.validate_parameters_source(parameter)
        mean = self.query_vbs('meas.' + parameter + '.mean.Result.Value')
        try:
            fMean = float(mean)
        except TypeError:
            fMean = -999999.99
        return fMean

    def set_zoom(self, zoom: str, source: str):
        """"""Sets the zoom function for a channel source

        Args:
            zoom (str): Zoom Channel Source Z1 to Zn
            source (str): Channel source

        Raises:
            ParametersError: on invalid zoom source
        """"""
        self.validate_source(source)
        self.validate_zoom_source(zoom)
        self.write_vbs('zoom.' + zoom.upper() + '.Source = ""' + source.upper() + '""')
        self.write_vbs('zoom.' + zoom.upper() + '.View = ' + str(-1))

    def show_zoom(self, zoom: str, show: bool = True):
        """"""Set the zoom trace view on or off

        Args:
            zoom (str): Zoom Channel Source Z1 to Zn
            show (bool, optional): True to view the zoom trace. Defaults to True.

        Raises:
            ParametersError: on invalid zoom source
        """"""
        self.validate_zoom_source(zoom)
        self.write_vbs('zoom.' + zoom.upper() + '.View = ' + str(-1) if show else str(0))

    def set_zoom_segment(self, zoom: str, startSeg: int = 1, numToShow: int = 1):
        """"""Set the Zoom segment for sequence mode waveforms

        Args:
            zoom (str): Zoom Channel Source Z1 to Zn
            startSeg (int, optional): Start segment index. Defaults to 1.
            numToShow (int, optional): Number of segments to display. Defaults to 1.

        Raises:
            ParametersError: on invalid zoom source
        """"""
        self.validate_zoom_source(zoom)
        self.write_vbs('zoom.' + zoom.upper() + '.Zoom.SelectedSegment = ""' + str(startSeg) + '""')
        self.write_vbs('zoom.' + zoom.upper() + '.Zoom.NumSelectedSegments = ""' + str(numToShow) + '""')

    def set_aux_mode(self, mode: str):
        """"""Set the Auxilary mode

        Args:
            mode (str): Auxilary mode value, Possible values are: TRIGGERENABLED|TRIGGEROUT|PASSFAIL|FASTEDGE|OFF

        Raises:
            ParametersError: on invalid Auxilary mode values
        """"""
        if mode.upper() in ['TRIGGERENABLED', 'TRIGGEROUT', 'PASSFAIL', 'FASTEDGE', 'OFF']:
            self.write_vbs('app.Acquisition.AuxOutput.AuxMode = ""' + mode.upper() + '""')
        else:
            raise ParametersError('Invalid Auxilary Mode value')

    def set_show_measure(self, show: bool = True):
        """"""Opens the measure dialog

        Args:
            show (bool, optional): True to open and False to close. Defaults to True.
        """"""
        self.write_vbs('meas.ShowMeasure = 1' if show else 'meas.ShowMeasure = 0')

    def set_auxin_attenuation(self, attenuation: str = 'X1'):
        if attenuation.upper() in ['X1', 'DIV10']:
            self.write_vbs('app.acquisition.AuxIn.Attenuation = ""' + attenuation + '""')

    def wait_opc(self):
        """"""Wait for the previous operation to complete
        """"""
        self._conn.wait_opc()

    def sleep(self, tm: float):
        """"""Sends a sleep command to the instrument

        Args:
            tm ([float]): time to sleep in
        """"""
        self.write_vbs('app.Sleep {0}'.format(tm))

    def force_trigger(self):
        """"""Forces a trigger on the instrument
        """"""
        self.write('FRTR')

    def is_popup_dialog_open(self) -> bool:
        """"""Checks if a popup dialog is open

        Returns:
            [bool]: True if a popup dialog is open, False otherwise
        """"""
        response = self.query_vbs('not syscon.dialogontop.widgetpageontop.value is Nothing')
        return re.match('0', response) is None

    def close_popup_dialog(self):
        """"""Closes any popup dialogs that are open
        """"""
        self.write_vbs('syscon.DialogOnTop.ClosePopup')

    def click_popup_dialog(self, popup_action: str):
        """"""Key Action on Popup Dialog

        Args:
            popup_action (str): Popup action string
        """"""
        self.write_vbs('syscon.DialogOnTop.{0}'.format(popup_action))

    def get_docked_dialog_page_names(self, rhs: bool = False) -> list:
        """"""Gets a list of the docked dialog pages

        Args:
            rhs (bool, optional): True to return the right hand side dialogs. Defaults to False.

        Returns:
            list: of page names, None if no docked dialogs are open
        """"""
        response = self.query_vbs('syscon{0}.DialogPageNames'.format('.Right' if rhs else ''))
        return None if 'none' in response.lower() else response.split(',')

    def get_docked_dialog_selected_page(self, rhs: bool = False) -> str:
        """"""Gets docked selected page

        Args:
            rhs (bool, optional): True to return the right hand side selected page. Defaults to False.

        Returns:
            str: returns the page name of the selected page, None if no docked dialogs are open
        """"""
        response = self.query_vbs('syscon{0}' + '.Right' if rhs else '' + 'DialogPage')
        return None if response == '' else response

    def is_docked_dialog_open(self, rhs: bool) -> bool:
        """"""Checks if a docked dialog is open

        Args:
            rhs ([bool]): True to check if right hand side dialog is open

        Returns:
            bool: Returns True if a docked dialog is open else False
        """"""
        strPage = self.get_docked_dialog_selected_page(rhs)
        return strPage.len > 0

    def close_docked_dialog(self):
        """"""Closes the docked dialog page
        """"""
        self.write_vbs('syscon.CloseDialog')

    def is_option_enabled(self, option: str) -> bool:
        """"""Checks if the option specified is enabled

        Args:
            option (str): Option string

        Returns:
            bool: True if option present else False
        """"""
        response = self.query('$$OP_PRE? {0}'.format(option))
        return response != '0'

    def get_automation_items(self, collection_name: str, filter_spec: list = [('name', None)], match_all: bool = True) -> list:
        """"""Gets a list of automation collection items matching the specified criteria.

        Args:
            collection_name (str): must be a valid automation collection name within the scope app's VBS context.
            filter_spec (list, optional): list of 2-tuples, where the first tuple item specifies the name of an
                automation property and the second specifies a matching regex, may be None which matches all. Defaults to [('name', None)].
                filter_spec, by default, causes the returned list to contain the names of all items in the collection.
            match_all (bool, optional): [description]. Defaults to True.

        Returns:
            [list]: list of automation collection items
        """"""

        # build a vbs function in the scope context that will generate the comma-sep properties string for each item in the collection.
        # we'll apply the matching specs in python after parsing the responses, since it's much better at that and developing/maintaining/debugging
        # these scope vbs functions is horrible.
        prop_names = [prop_item[0] for prop_item in filter_spec]
        get_props_script = ['function getProps(o)']
        get_props_script.append('on error resume next')
        get_props_script.append('strProps = \'\'')
        for prop_name in prop_names:
            get_props_script.append('strProps = strProps & \',\'')  # default to comma-sep if property doesn't exist
            get_props_script.append('strProps = strProps & o.{0}'.format(prop_name))
        get_props_script.append('getProps = strProps')
        get_props_script.append('end function')
        script_to_exec = ':'.join(get_props_script)
        self.write_vbs(script_to_exec)

        # build the vbs query that iterates the collection calling the vbs function for each item, semi-colon sep each item's properties.
        if False:
            # at least for now, for-each (IEnumVARIANT) is not correctly supported on CE... seems to be missing marshalling
            response = self.query(""vbs? 'strProps = \""\"": for each obj in {0}: strProps = strProps & \"";\"" & getProps(obj): next: return = strProps'"".format(collection_name))
        else:
            # work-around for bad for-each behavior on CE.
            # painful: need to figure out if collection is 0-based index or not and set the startIndex and stopIndex variables used in query.
            vbs_statements = ['on error resume next']
            vbs_statements.append('set o1 = nothing')
            vbs_statements.append('set o1 = {0}.item(0)'.format(collection_name))
            vbs_statements.append('stopIndex = {0}.count'.format(collection_name))
            vbs_statements.append('startIndex = 1')
            vbs_statements.append('if not o1 is nothing then: startIndex = 0: stopIndex = stopIndex - 1: end if')
            vbs_statements.append('on error goto 0')
            vbs_to_exec = ':'.join(vbs_statements)
            self.write_vbs(vbs_to_exec)
            response = self.query(""vbs? 'strProps = \""\"": for i = startIndex to stopIndex: set obj = {0}(i): strProps = strProps & \"";\"" & getProps(obj): next: return = strProps'"".format(collection_name))

        # parse the response, stripping and splitting on the item and property separators.
        # strip leading semi-colon and split to get list of comma-sep property strings for each object
        props_response = response.lstrip(';').split(';')
        output_items = []
        for props in props_response:

            # strip leading command and split to get list of properties
            list_props = props.lstrip(',').split(',')
            output_props = []
            props_matched = 0
            for idx in range(0, len(list_props)):

                if idx < len(filter_spec):
                    str_prop = list_props[idx]
                    str_output = ''
                    if (filter_spec[idx][1] is None or filter_spec[idx][1].search(str_prop)):
                        props_matched += 1
                        str_output = str_prop

                    # add to output list of properties
                    output_props.append(str_output)

            if (match_all and props_matched == len(filter_spec)) or (not match_all and props_matched > 0):
                # add to output list of objects
                output_items.append(output_props)

        if self.verbose == 3:
            # print to pyconsole if verbose mode 3
            message = 'get_automation_items({0}, {1}):response={2} => {3}'.format(collection_name, filter_spec, response, output_items)
            self.logger.debug(message)

        return output_items

    def get_object_names(self, coll_name: str, matching: str = None) -> list:
        """"""return a list of all matching object names (in specified coll_name collection).

        Args:
            coll_name (str): Collection name
            matching (str, optional): If no match is specified then all are returned. Defaults to None.

        Returns:
            list: matching object names
        """"""
        objects_into = self.get_automation_items(coll_name, [('name', matching)])
        object_names = [obj_info[0] for obj_info in objects_into]
        return object_names

    def does_object_exist(self, coll_name: str, object_name: str) -> bool:
        """"""Tests if the object exists in the collection

        Args:
            coll_name (str): Collection name
            object_name (str): object name

        Returns:
            bool: True if specified coll_name has the specified object, False if it does not.
        """"""
        cvars_info = self.get_automation_items(coll_name, [('name', re.compile('^{0}$'.format(object_name), re.IGNORECASE))])
        return len(cvars_info) > 0

    def does_cvar_exist(self, object_name: str, cvar_name: str) -> bool:
        """"""Tests if the cvar exists in an automation object

        Args:
            object_name (str): Object name
            cvar_name (str): Cvar name

        Returns:
            bool: True if specified object_name has the specified cvar, False if it does not.
        """"""
        cvars_info = self.get_automation_items(object_name, [('name', re.compile('^{0}$'.format(cvar_name), re.IGNORECASE))])
        return len(cvars_info) > 0

    def is_cvar_enum_value_in_range(self, cvar_enum_name: str, enum_value: str, range_property: str = 'RangeStringAutomation') -> bool:
        """"""Tests if Cvar enum value is in range

        Args:
            cvar_enum_name (str): Cvar enum name
            enum_value (str): Value of the enum
            range_property (str, optional): Range property. Defaults to 'RangeStringAutomation'.

        Returns:
            [bool]: True if cvar is in range else False
        """"""
        response = self.query_vbs('{0}.{1}'.format(cvar_enum_name, range_property))
        return re.search(r'(^|,){0}(,|$)'.format(enum_value), response, re.IGNORECASE)

    def get_cvars_info(self, automation_path: str) -> zip:
        """"""Get Cvar Info for the automation path specified

        Args:
            automation_path (str): Automation path

        Returns:
            zip: zip object containing list of cvar names, types and flags (3-tuple) for the specified automation object.
        """"""
        self.write_vbs('s1 = \'\'')     # for some reason, doing this in the query_vbs isn't sufficient... ugh
        response = self.query_vbs('s1 = \'\': for i=0 to {0}.count - 1: set ocv={0}.Item(i): a1 = Array(s1, ocv.name, ocv.type, ocv.flags): s1 = Join(a1, \',\'): next: return = s1'.format(automation_path))
        # convert to list and remove 0th element due to extra comma (this is easier than in the VBS code above)
        lTokens = response.upper().split(',')[1:]
        iterTokens = iter(lTokens)
        return zip(iterTokens, iterTokens, iterTokens)

    def get_panel_cvar_names(self, automation_path: str) -> list:
        """"""Return list of cvar names for cvars that are eligible for save in panel

        Args:
            automation_path ([str]): Automation start path

        Returns:
            [list]: Returns the Cvar names
        """"""
        # CvarsValuesRemote property returns comma-sep list of cvar,name pairs for all cvars
        # that are eligible for the panel
        response = self.query_vbs('{0}.CvarsValuesRemote'.format(automation_path))
        lTokens = response.upper().split(',')
        # slice-spec to create a list containing every other element
        return lTokens[::2]

    def get_automation_cvar_names(self, automation_path: str) -> list:
        """"""Return list of cvar names for cvars that are available to the user

        Args:
            automation_path (str): Automation start path

        Returns:
            [list]: Returns the Cvar names
        """"""
        # these are the panel cvars and any that have cvarflags 16384 (ForcePublic)
        lPanelCvars = self.get_panel_cvar_names(automation_path)
        lCvarsInfo = self.get_cvars_info(automation_path)
        lForcePublic = [cvName for (cvName, cvType, cvFlags) in lCvarsInfo if int(cvFlags) & 16384 == 16384]
        lPanelCvars.extend(lForcePublic)
        return lPanelCvars
"
275,https://www.lakeshore.com/docs/default-source/product-downloads/catalog/425.pdf?sfvrsn=1581d8be_6,https://en.wikipedia.org/wiki/Magnetometer,"[OrderedDict([('id', 'attqoQm3frhx3s4le'), ('width', 505), ('height', 268), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ZYAp8JeZ_CTRXSbQPDdb9g/kXYoUcCUhOCWh7OZ1N-fK02L4oEnw6EAfZBtRDH5t_AiFBmPq56iXqzrFtJ8OAW2WiS2TVvQFm3p5sT-6pqXLA/elWdxOyDRTgxnjgrl2VqiK6u7mnGSdUtgqHNaJMpQl4'), ('filename', '425.png'), ('size', 159132), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/gbwqR1VgjoaZJtSYTVg9Kw/vi_fh9F6cn1d0rL0Y1dmIiNbEAUOFPEbbxi7A2XcHwkKynYAMspGDHjU6qOKa_SN86u6H5HiSEOAi3vWQdtFEg/8iBtBGh9aB2UxeI_LmqtLz28CR3oItoI-yL7tDLTuek'), ('width', 68), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/DBy5-y5HHeOyK7v5MJ0M8w/XSMe2ncuccrSQtb8k-QAxaOjQFjW8pm4rYlTYig0FbmWNqzH5Sg0R_w72TcAcUg8iwrl6MpT4hopvzB0-gjXFg/ke9DRrWafTm1zzkbQUOD56BkFksubtP6u7YHP3sBz50'), ('width', 505), ('height', 268)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/mREIvdsf1GYnDA3-Ju1bCQ/P4lnTfsOroV6vSeMUNHl3Sy5rVyeDynIrq1vtqPoqyMAf6ptV-Ukm2b442tnNENGqA5jqfpXMUgMMIVLMbp6NQ/EFr606aqJ5hxY3BAC1IkPdPTzpeLV0c2qwxP5z3O3s8'), ('width', 3000), ('height', 3000)]))]))])]",21.4,"Westerville, Ohio, USA",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116683/Instruments/Vendor%20Logos/Lakeshore.png,"Lake Shore Model 425 gaussmeter provides high-end functionality and performance in an affordable desktop instrument. Magnet testing and sorting have never been easier. When used in combination with the built-in relay and audible alarm features, the Model 425 takes the guesswork out of pass/fail criteria. Additional features including DC to 10 kHz AC frequency response, max hold and relative measurement make the Model 425 the ideal tool for your manufacturing, quality control and R&D flux density measurement applications. Put the Model 425 gaussmeter to use with confidence knowing it’s supported by industry leading experts in magnet measurement instrument, sensor, and Hall probe technology.",https://www.lakeshore.com/products/categories/overview/magnetic-products/gaussmeters-teslameters/model-425-gaussmeter,LKS 425 Gaussmeter,343.0,['Power Meters'],"A magnetometer is a device that measures magnetic field or magnetic dipole moment. Different types of magnetometers measure the direction, strength, or relative change of a magnetic field at a particular location. A compass is one such device, one that measures the direction of an ambient magnetic field, in this case, the Earth's magnetic field. Other magnetometers measure the magnetic dipole moment of a magnetic material such as a ferromagnet, for example by recording the effect of this magnetic dipole on the induced current in a coil.","Supporting advanced scientific research, Lake Shore is a leading global innovator in measurement and control solutions.
",https://github.com/lakeshorecryotronics/python-driver/blob/main/lakeshore/model_425.py,Pytango,https://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/tango-ds/MeasureInstruments/LKS425Gaussmeter/index.html,Lakeshore,"[OrderedDict([('id', 'attzehTVrrXJAMgad'), ('width', 256), ('height', 72), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/uZEb0GeNQJzpY4gfMbqkMw/M10zIQfSkj5HU6JWK8X9RsLmcc6FG4q1B_9kI4z-ykuaLjZtGDg98K_rW2vkRVKv9kldiUZYwemYU05K_vzXf_TBjxzPFxgMsA1BoIcYChw/DVxmeK_C9RjtpXeaqXJsNrznuSYlrdhwulHDJ8BkmD8'), ('filename', 'lake-shore-logo.svg'), ('size', 11991), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/5GefCSzVLVY17Ld4My8s-g/NtcN3PJb44e30eFFmMzFBkglOYj5xNlZxeH8S64gI0_oIxRf-JmJ-WoC69yAaIJg36Pe3iNv-1-CWVfo-2HBJTRzjezuPL_3iPkxyDeqr4A/ArbmGKilAdh84ZETfXmtPAi8mytPZCucU5LAjQMjnZQ'), ('width', 128), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/yuuObs2i500o0b-5GqJscw/9753dxcHTqtIHxuitI89R2eJjspqnEoNaT8SWWRqMgMb-6ptXR7-BCn3-TfQRJ8rBGMpi8tqEV-9p8TUXDX539az-OaiNmCs02dNRY49sgs/XsZWd5wK_1Oc_KSFTVO59D8LyuR3UfKdkAO4L4apFsM'), ('width', 256), ('height', 72)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/tqoYkvsE1Ysg_yi7G6kDRg/e9o6yxpeBsdjH_H16y73rv1FxGJ0pUBw1YzVBU_sq6Ny2e0BtuHmu7VjLhDKl4CdWHpYEVac1NSRTqIdKs-f1NYdemb4k4EubjoznL2av7U/1kEKtL2HrImdIfc8aXLiWfpR_fCOWyNtsbJQOiNNOU8'), ('width', 3000), ('height', 3000)]))]))])]",https://www.lakeshore.com/home,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782670/Instruments/Power%20Meters/LKS-425-Gaussmeter/LKS-425-Gaussmeter.png,LKS 425 Gaussmeter,Write a Python script that uses Pytango to connect to a {Device name} Power Meters,2315.0,,,,"""""""Implements functionality unique to the Lake Shore Model 425 Gaussmeter.""""""
import serial

from .generic_instrument import GenericInstrument


class Model425(GenericInstrument):
    """"""A class object representing the Lake Shore Model 425 Gaussmeter.""""""

    vid_pid = [(0x1FB9, 0x0401)]

    def __init__(self,
                 serial_number=None,
                 com_port=None,
                 baud_rate=57600,
                 data_bits=7,
                 stop_bits=1,
                 parity=serial.PARITY_ODD,
                 flow_control=False,
                 handshaking=False,
                 timeout=2.0,
                 ip_address=None,
                 tcp_port=7777,
                 **kwargs):

        # Call the parent init, then fill in values specific to the 121
        GenericInstrument.__init__(self, serial_number, com_port, baud_rate, data_bits, stop_bits, parity, flow_control,
                                   handshaking, timeout, ip_address, tcp_port, **kwargs)
"
295,https://www.picotech.com/download/datasheets/usb-pt-104-prt-data-logger-data-sheet.pdf,https://en.wikipedia.org/wiki/Thermometer,"[OrderedDict([('id', 'attiSwWMUoYEaVdb8'), ('width', 350), ('height', 175), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ti2Xdg5OM5YuzmzjI3v63Q/w-kRKcSvZmwIE8SFwU8ZtDQMbMai9gKx705UJCJ9OkKoO3H-sC5cfsNIE5CrCwIo5v9awTQ-cNOghPbW62e-NbpTnrBQ8a5BsKTpcXPSNCw/CT4oZFvhl6a7n1cwLl6O84k7ox7MpzHGlCi7Vct6Hng'), ('filename', 'pt104_35.jpg'), ('size', 7263), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/wmyRzVzmbjms782XxySt3w/-wDwmYWy9VTY279FeltcHiPGq7yc0Yf-4v-V_Indx7D7QECoKRyK7wjh8DA6A2LOLkPsm9hzhtGME9VF74XnvA/y9pclaaEZ_9bOkuFkZwPtO1bMbRW3ywCQCG4xfN_-gE'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/UfwibbSEBju38TCc-dA1Tg/UT34gsjtnutfpJmWV4fjm5aVtJ4yvAsPIlokzWecagWJi8te94OoiSOlS-6dL4rUqBD_q8AviEGPzYaQpfuRUA/zFWmCimxueA69dTwrgJe87Elu0_IgOFv8D-J_DhoqA4'), ('width', 350), ('height', 175)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/9TOWN4OFGerPwcHWrtED5A/sL9U1Gw1Osk9sKp7BbLqjv_DTICcSqnK7vQtnVdqTdE_EK5a_XtIQL8Vm93jkLsOsS-VqhjlagM7VSGcwWBPSg/Ux2slf-6NtAu6jNhJgN5JAFDjpciD6ROMp9L90Nd65w'), ('width', 3000), ('height', 3000)]))]))])]",24.0,"Texas, United States",https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116702/Instruments/Vendor%20Logos/PicoTechnology.png,The PT-104 is a four-channel temperature measuring data logger. It offers the ultimate in resolution (0.001 °C) and accuracy (0.015 °C). Along with temperature it can also be used to measure resistance.,https://www.picotech.com/data-logger/pt-104/high-accuracy-temperature-daq,PT 104 Picoch,416.0,['Thermometer'],"A thermometer is a device that measures temperature or a temperature gradient (the degree of hotness or coldness of an object). A thermometer has two important elements: (1) a temperature sensor (e.g. the bulb of a mercury-in-glass thermometer or the pyrometric sensor in an infrared thermometer) in which some change occurs with a change in temperature; and (2) some means of converting this change into a numerical value (e.g. the visible scale that is marked on a mercury-in-glass thermometer or the digital readout on an infrared model). Thermometers are widely used in technology and industry to monitor processes, in meteorology, in medicine, and in scientific research.","Pico Technology was established in 1991 and soon became a leader in the field of [PC Oscilloscopes](https://www.picotech.com/products/oscilloscope) and [data loggers](https://www.picotech.com/products/data-logger).
Pico has always been recognized for providing innovative, cost-effective alternatives to traditional test equipment and data acquisition products. In doing so, we have made high-quality instrumentation affordable.
",https://github.com/picotech/picosdk-usbpt104-matlab-examples/blob/master/USBPT104Example.m,Pytango,https://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/tango-ds/MeasureInstruments/PT104Pico/index.html,Pico Technology ,"[OrderedDict([('id', 'attlBZbcdzvNqgFdf'), ('width', 142), ('height', 71), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/SpAEEKdboFTyBBv8DvKTog/9WY7Gy7vwyXEbkOuJ5BBeJgr0H2Mmcp2u_HKVr7nY-dPwDe8Q8Y0b2zgo7Kd4qqrqpXU9OcNGAqTRKCAQyDnT7vd4La9Mun6tsY4e1jd_r8/xvJDDIu6jeCpI6JNjFHdlq5PFhoQ7dQZb1KgsUMdpG0'), ('filename', 'pico-logo.svg'), ('size', 13692), ('type', 'image/svg+xml'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/0gsFxQCFIxVEnIPBoC2kiw/TPVgF3bJ8w8Jsf19x_mNS5grPl8k0SHox58XRdSR8jQ7aM2BuykH2C6fU0i3P2Cw3Tp03Ew2ZhNpr30NW2oqigieVHq7VisWVDfFRdG2zt4/43hkDqfTPMKTY3Nn0Fo0wUvbrqk62dNdQZ1GgF1Db2E'), ('width', 72), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/sQwdPbD_qsHVTNDajzoE7Q/B8a_U1N4FS1E06sEjNzYrszie1yKrFYhNfJYhXQcuDSMxIuc2HFI9d6U9mNLQVUB_nLH6LAclfwn4utSAy1peoiFsPCT3NIVNYTJSpp1jcU/9eNLnXPTIy0EJ0tebX2rzlueDCUiZQRdor3ZwvPAk34'), ('width', 142), ('height', 71)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/kb-M9vnsjksVT1KIVxVfoQ/TxPnGFCpLudWYuDsPjCaipmgVLol53xhls2dHYV02e0L0lJ3WO_IB5-1xIdVUaOgsX4crZAkW7-ywxp1IAKBDWLLmFP1xfIbvttjATf9_qc/1mJNQwbQweHbwEwEWM9aL1zp2ZPHsQ7h_48Oz41-jxU'), ('width', 3000), ('height', 3000)]))]))])]",https://www.picotech.com/,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782684/Instruments/Thermometer/PT-104-Picoch/PT-104-Picoch.jpg,PT 104 Picoch,Write a Python script that uses Pytango to connect to a {Device name} Thermometer,600.0,,,,"%% USB PT-104 Platinum Resistance Temperature Data Logger Example
%
% This script demonstrates how to:
%
% * Enumerate devices connected to the PC
% * Open a connection to a USB PT-104 data logger
% * Display unit information
% * Set mains rejection
% * Configure a channel
% * Take readings
% * Plot data
% * Close the connection to the unit
%
% Please refer to the
% <https://www.picotech.com/download/manuals/usb-pt104-rtd-data-logger-programmers-guide.pdf PT-104 USB/Ethernet RTD Data Logger Programmer's Guide> for further information.
% This file can be edited to suit application requirements.
%
% *Copyright:* � 2016-2017 Pico Technology Ltd. See LICENSE file for terms.

%% Close any open figures, clear console window

close all;
clc;
clear;

disp('USB PT-104 Platinum Resistance Data Logger Example')

%% Load configuration information

USBPT104Config;

%% Load shared library

% Indentify architecture and obtain function handle for the correct
% prototype file.
    
archStr = computer('arch');

usbpt104MFile = str2func(strcat('usbpt104MFile_', archStr));

if (ismac())
    
    [usbpt104NotFound, usbpt104Warnings] = loadlibrary('libusbpt104.dylib', usbpt104MFile, 'alias', 'usbpt104');
    
    % Check if the library is loaded
    if ~libisloaded('usbpt104')
    
        error('USBPT104Example:LibaryNotLoaded', 'Library libusbpt104.dylib not loaded.');
    
    end
    
elseif (isunix())
    
    [usbpt104NotFound, usbpt104Warnings] = loadlibrary('libusbpt104.so', usbpt104MFile, 'alias', 'usbpt104');
    
    % Check if the library is loaded
    if ~libisloaded('usbpt104')
    
        error('USBPT104Example:LibaryNotLoaded', 'Library libusbpt104.so not loaded.');
    
    end

elseif (ispc())
    
    [usbpt104NotFound, usbpt104Warnings] = loadlibrary('usbpt104.dll', usbpt104MFile);

    if ~libisloaded('usbpt104')

        error('USBPT104Example:LibaryNotLoaded', 'Library usbpt104.dll not loaded.');

    end
    
else
    
    error('USBPT104Example:OSNotSupported', 'Operating system not supported, please contact support@picotech.com');

end

%% Enumerate units
% Identify any PT-104 units connected via USB and Ethernet

details             = blanks(100);
detailsLth          = length(details);
communicationType   = usbpt104Enuminfo.enCommunicationType.CT_ALL;

fprintf('\nEnumerating units...\n');

[status.enumerateUnits, details, detailsLth] = calllib('usbpt104', 'UsbPt104Enumerate', details, detailsLth, communicationType);

if (status.enumerateUnits == PicoStatus.PICO_OK)
   
    fprintf('Details: %s\n', details);
    
else
    
    error('USBPT104Example:EnumerateUnitsError', 'Enumerate units status code: %d', status.enumerateUnits);
    
end

%% Open communication
% In this example, a connection is opened via USB

handlePtr = libpointer('int16Ptr', 0);
serial    = [];

status.open = calllib('usbpt104', 'UsbPt104OpenUnit', handlePtr, serial);

if (status.open == PicoStatus.PICO_OK)

    handle = get(handlePtr, 'Value');
    
elseif (status.open == PicoStatus.PICO_NOT_FOUND)
   
    error('USBPT104Example:UnitNotFound', 'USB PT-104 Unit not found.');
    
else
    
    error('USBPT104Example:OpenUnitError', 'Open unit status code: %d', status.openUnit);
    
end

%% Display unit information

fprintf('\nUnit information:-\n\n');

information = {'Driver version: ', 'USB Version: ', 'Hardware version: ', 'Variant: ', 'Batch/Serial: ', 'Cal. date: ', 'Kernel driver version: '};

pRequiredSize = libpointer('int16Ptr', 0);

status.unitInfo = zeros(length(information), 1, 'uint32');

% Loop through each information type
for n = 1:length(information)
    
    infoLine = blanks(100);

    [status.unitInfo(n), infoLine1] = calllib('usbpt104', 'UsbPt104GetUnitInfo', handle, infoLine, length(infoLine), pRequiredSize, (n-1));
    
    if (status.unitInfo(n) == PicoStatus.PICO_OK)
    
        disp([information{n} infoLine1]);
    
    end
    
end

fprintf('\n');
    
%% Noise Rejection

status.setMains = calllib('usbpt104', 'UsbPt104SetMains', handle, 0); % 0 for 50 Hz, 1 for 60 Hz

%% Set channel
% Set channel 1 for a PT-100 sensor

channel1    = usbpt104Enuminfo.enUsbPt104Channels.USBPT104_CHANNEL_1;
dataType    = usbpt104Enuminfo.enUsbPt104DataType.USBPT104_PT100; 

status.setChannel = calllib('usbpt104', 'UsbPt104SetChannel', handle, channel1, dataType, 4); %handle, channel, data type, noOfWires

pause(2) % Wait for device to make conversion before going on to get value or no value will show.

%% Get value
% Retrieve filtered data value for channel 1.
% The data value returned will be a scaled value (refer to the function
% definition in the Programmer's Guide).

disp('Collecting data...');

% Define the number of samples to collect
numSamples = 30;
dataValues = zeros(numSamples,1);

for n = 1:numSamples

    valuePtr = libpointer('int32Ptr', 0);

    status.getValue = calllib('usbpt104', 'UsbPt104GetValue', handle, channel1, valuePtr, 1);

    dataValues(n,1) = get(valuePtr, 'Value');
    
    % Convert the data using the appropriate scale
    if (dataType == usbpt104Enuminfo.enUsbPt104DataType.USBPT104_PT100)
       
        dataValues(n,1) = dataValues(n,1) / 1000;
        
    end
    
    % Wait for one second
    pause(1);
    
end

disp('Data collection complete.');

%% Process the data
% In this example, the data is shown on a plot

% Plot the data
figure('Name','USB PT-104 Platinum Resistance Data Logger Example', ...
    'NumberTitle', 'off');

hold on;

plot(1:numSamples, dataValues);

title('Plot of Temperature vs. Sample');
xlabel('Sample')
ylabel('Temperature (�C)')

legend('Channel 1')
grid on;

hold off;

%% Close connection to device

calllib('usbpt104', 'UsbPt104CloseUnit', handle);

%% Unload library

unloadlibrary('usbpt104');"
385,https://www.jumo.net/attachments/JUMO/attachmentdownload?id=64643,https://en.wikipedia.org/wiki/Temperature_control,"[OrderedDict([('id', 'attkvnF1BwobpzeRv'), ('width', 793), ('height', 619), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/ZmKcMMtpmcjKxKsH3qAU7w/zTnJf3W-C8Ta8Z7rXJVu9xGjNzTlGzCSGFfp2EvYmY92bwftk_VUctFFzuVk1sfxFjIdc045KneiFGAnMgjWNj9jVTlYBj2E3EB06ImFR_o/ERCGnoAUdGPRHri60MMHF5iqekUHUqt4iTkTPuR5wh4'), ('filename', 'LC100.jpg'), ('size', 54744), ('type', 'image/jpeg'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/H56GWVD7irY9VdH8NygIQA/bIeGh50sd0VcafcL548J8Pg1iJWPF-VKNHyiD3KoMWnQfVbZpK3lG7xBOWn5OB4nZ6ZgnqU90C4CgEGro7wKmw/RCTvSlh6G3XfK3PA20UCHqxleClkbMrGLAjjIxs5R0U'), ('width', 46), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/CL9Fg-KygPtyAI38BGrxmg/xdOn5bS3NyHBRNP1xNFr4FUlW5wxjfUA9oiIzVbAdSbskyu0FDmr9Fpg0lC7ezmXXowgkI2c3NvHTD0x72rLAQ/-oXAIWtvwX42fyNB9aEkKPfQ2NSKQ1UbOg0NZy-Rvj0'), ('width', 656), ('height', 512)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/E3VDJhlEZirR9zcAmtShbg/n8ULAAtrUt3IDR70Zq1Vd-9olD_EGPqpkGk6Q8kSebMkIdCEbJt9WkSCTcJPvNLqXlTerRbP_UZEt9_-Agfazw/Zd_McbRN3N2PYt9Ye7OOVg4wQLHKbqDPDW0nQQGG2p0'), ('width', 3000), ('height', 3000)]))]))])]",69.0,Canada,https://res.cloudinary.com/dhopxs1y3/image/upload/v1692116717/Instruments/Vendor%20Logos/Jumo.png,"Control Of The Jumo Quantrol Lc100/Lc200/Lc300, Universal Pid Controller",https://fr.jumo.ca/web/products/apps/productdetailpage?pdpId=702030,Jumoquantrollc,200.0,['Temperature Controllers'],"Temperature control is a process in which change of temperature of a space (and objects collectively there within), or of a substance, is measured or otherwise detected, and the passage of heat energy into or out of the space or substance is adjusted to achieve a desired temperature","**JUMO** is your expert partner and manufacturer for industrial sensor technology up to the automation solution for temperature, pressure, and liquids.
",http://svn.code.sf.net/p/tango-ds/code/DeviceClasses/MeasureInstruments/JumoQuantrolLC/trunk/JumoQuantrolLC.py,Pytango,https://www.tango-controls.org/developers/dsc/ds/1840/,Jumo,"[OrderedDict([('id', 'attdbHMNNWuuTTg9v'), ('width', 900), ('height', 500), ('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/pu0VTPkJRrRwGOI6Tl0yvQ/WhEs19DEzkI17g8V3obNSPuRzYHwvrQ2qlZJmmDYWx7ZzRnvxGpXTL3FUGAg4UQmIa8ijZh5kZauItS9-BnFGrcGzjvwQ6C72_TA_Jd6pBFHXzp9ZxEk8Nw0ysESL8PF/cUvmAd7aTMsysRBG9d8cJhSPPFacHFseiJcnuhL3pU8'), ('filename', 'jumo-gmbh-and-co-kg-vector-logo.png'), ('size', 7799), ('type', 'image/png'), ('thumbnails', OrderedDict([('small', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/gsnKEV9ie6EiCO60g9m49w/awoEQouRiZiOucY9GzN1uj61ktyKWTJi6bR_mNoNxuq2q_dae2FKX5tb0bEsn7Uu1jtqChpaxnAxiTwiD9QxtA/UCxL_3LCXS19WmD-hMmUudFMwnQUy1AsRM2cKh-qQ0M'), ('width', 65), ('height', 36)])), ('large', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/jtrQWgM-F2NI-XCGuUhy3g/sXU7cxJKU_mKcrIlMQAU5HuwV3zdWEG0JlTnI2zh0QHJHSAV4-2uOgwPp7-hK7Mo1kIBMVNmMwm2kS2dsDuVDw/ngkH7e68Vv0KQmt6sDq-D2i1VJ4I7rgtkIZrkRI8glk'), ('width', 900), ('height', 500)])), ('full', OrderedDict([('url', 'https://v5.airtableusercontent.com/v1/19/19/1692129600000/mj5TiFWJWly2J-zRXx-1fw/sJPfEmuUUh3IU8I_G3j4a7hvk8oBEl1DTo-lr-SQP9mBe7wu1iiNCdQqN0wumlLVDckJnW4_poo92niNeJbhkg/F-KsSpHVxWGIv4S6_ShrIf3SvVOaTI55ytY_PgSkttY'), ('width', 3000), ('height', 3000)]))]))])]",https://jumo.ca/,https://res.cloudinary.com/dhopxs1y3/image/upload/v1691782763/Instruments/Temperature%20Controllers/Jumoquantrollc/Jumoquantrollc.jpg,Jumoquantrollc,Write a Python script that uses Pytango to connect to a Jumoquantrollc Temperature Controllers,,,,,
