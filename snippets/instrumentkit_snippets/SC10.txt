To connect to a SC10 Shutter Controller using Instrumentkit, you can use the following Python script:

```python
from instrumentkit import SC10

# Connect to the SC10 Shutter Controller
with SC10("COM1") as shutter_controller:
    # Access the properties and methods of the SC10 Shutter Controller
    print(shutter_controller.name)
    print(shutter_controller.enable)
    shutter_controller.enable = True
    print(shutter_controller.repeat)
    shutter_controller.repeat = 5
    print(shutter_controller.mode)
    shutter_controller.mode = SC10.Mode.auto
    print(shutter_controller.trigger)
    shutter_controller.trigger = 1
    print(shutter_controller.out_trigger)
    shutter_controller.out_trigger = 0
    print(shutter_controller.open_time)
    shutter_controller.open_time = 100
    print(shutter_controller.shut_time)
    shutter_controller.shut_time = 50
    print(shutter_controller.baud_rate)
    shutter_controller.baud_rate = 115200
    print(shutter_controller.closed)
    print(shutter_controller.interlock)
    print(shutter_controller.default())
    print(shutter_controller.save())
    print(shutter_controller.save_mode())
    print(shutter_controller.restore())
```

This script imports the `SC10` class from the `instrumentkit` module and creates an instance of the `SC10` class by providing the appropriate connection details (e.g., serial port name). The `with` statement ensures that the connection is properly closed after use.

You can then access the properties and methods of the `SC10` instance to interact with the SC10 Shutter Controller. The script demonstrates accessing properties such as `name`, `enable`, `repeat`, `mode`, `trigger`, `out_trigger`, `open_time`, `shut_time`, `baud_rate`, `closed`, and `interlock`. It also shows how to call methods such as `default()`, `save()`, `save_mode()`, and `restore()`.

Note: Replace `"COM1"` with the appropriate serial port name for your setup.