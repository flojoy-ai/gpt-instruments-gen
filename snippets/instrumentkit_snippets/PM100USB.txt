Sure! Here's an example Python script that uses Instrumentkit to connect to a PM100USB Power Meter:

```python
from instrumentkit import ThorlabsPM100USB

# Connect to the power meter
power_meter = ThorlabsPM100USB()

# Get information about the connected sensor
sensor = power_meter.sensor
print("Sensor Name:", sensor.name)
print("Sensor Serial Number:", sensor.serial_number)
print("Sensor Calibration Message:", sensor.calibration_message)
print("Sensor Type:", sensor.type)
print("Sensor Flags:", sensor.flags)

# Set the measurement configuration to power
power_meter.measurement_configuration = ThorlabsPM100USB.MeasurementConfiguration.power

# Read a measurement from the power meter
measurement = power_meter.read()
print("Measurement:", measurement)
```

This script first imports the `ThorlabsPM100USB` class from the `instrumentkit` module. It then creates an instance of the `ThorlabsPM100USB` class to connect to the power meter.

The script retrieves information about the connected sensor using the `sensor` property of the power meter instance. It prints out various properties of the sensor, such as its name, serial number, calibration message, type, and flags.

Next, the script sets the measurement configuration of the power meter to "power" using the `measurement_configuration` property. This configures the power meter to measure power values.

Finally, the script reads a measurement from the power meter using the `read` method. The measurement is returned as a `pint.Quantity` object, which represents a numerical value with associated units. The script prints out the measurement value.

Note that this script assumes that the Instrumentkit library is already installed and that the power meter is connected to the computer.