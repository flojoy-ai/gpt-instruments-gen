Sure! Here's a Python script that uses Pymeasure to connect to a PM100USB Power Meter:

```python
import logging
from pymeasure.instruments import Instrument
from pymeasure.instruments.validators import truncated_range

log = logging.getLogger(__name__)
log.addHandler(logging.NullHandler())


class ThorlabsPM100USB(Instrument):
    """Represents Thorlabs PM100USB powermeter."""

    def __init__(self, adapter, name="ThorlabsPM100USB powermeter", **kwargs):
        super().__init__(adapter, name, **kwargs)
        self._set_flags()

    wavelength_min = Instrument.measurement(
        "SENS:CORR:WAV? MIN", "Measure minimum wavelength, in nm"
    )

    wavelength_max = Instrument.measurement(
        "SENS:CORR:WAV? MAX", "Measure maximum wavelength, in nm"
    )

    @property
    def wavelength(self):
        """Control the wavelength in nm."""
        value = self.values("SENSE:CORR:WAV?")[0]
        return value

    @wavelength.setter
    def wavelength(self, value):
        """Wavelength in nm."""
        if self.wavelength_settable:
            # Store min and max wavelength to only request them once.
            if not hasattr(self, "_wavelength_min"):
                self._wavelength_min = self.wavelength_min
            if not hasattr(self, "_wavelength_max"):
                self._wavelength_max = self.wavelength_max

            value = truncated_range(
                value, [self._wavelength_min, self._wavelength_max]
            )
            self.write(f"SENSE:CORR:WAV {value}")
        else:
            raise AttributeError(
                f"{self.sensor_name} does not allow setting the wavelength."
            )

    @property
    def power(self):
        """Measure the power in W."""
        if self.is_power_sensor:
            return self.values("MEAS:POW?")[0]
        else:
            raise AttributeError(f"{self.sensor_name} is not a power sensor.")

    @property
    def energy(self):
        """Measure the energy in J."""
        if self.is_energy_sensor:
            return self.values("MEAS:ENER?")[0]
        else:
            raise AttributeError(
                f"{self.sensor_name} is not an energy sensor."
            )

    def _set_flags(self):
        """Get sensor info and write flags."""
        response = self.values("SYST:SENSOR:IDN?")
        if response[0] == "no sensor":
            raise OSError("No sensor connected.")
        self.sensor_name = response[0]
        self.sensor_sn = response[1]
        self.sensor_cal_msg = response[2]
        self.sensor_type = response[3]
        self.sensor_subtype = response[4]
        _flags_str = response[5]

        # interpretation of the flags, see p. 49 of the manual:
        # https://www.thorlabs.de/_sd.cfm?fileName=17654-D02.pdf&partNumber=PM100D

        # Convert to binary representation and pad zeros to 9 bit for sensors
        # where not all flags are present.
        _flags_str = format(int(_flags_str), "09b")
        # Reverse the order so it matches the flag order from the manual, i.e.
        # from decimal values from 1 to 256.
        _flags_str = _flags_str[::-1]

        # Convert to boolean.
        self.flags = [x == "1" for x in _flags_str]

        # setting the flags; _dn are unused; decimal values as comments
        (
            self.is_power_sensor,  # 1
            self.is_energy_sensor,  # 2
            _d4,  # 4
            _d8,  # 8
            self.response_settable,  # 16
            self.wavelength_settable,  # 32
            self.tau_settable,  # 64
            _d128,  # 128
            self.has_temperature_sensor,  # 256
        ) = self.flags
```

This script defines a class `ThorlabsPM100USB` that represents the Thorlabs PM100USB power meter. It inherits from the `Instrument` class provided by Pymeasure.

The class has various properties and methods to interact with the power meter. Here's a brief explanation of each:

- `wavelength_min` and `wavelength_max` are measurement properties that retrieve the minimum and maximum wavelength values supported by the power meter, respectively.

- `wavelength` is a property that allows you to control the wavelength in nm. It retrieves the current wavelength value from the power meter and can be set to a new value.

- `power` is a property that measures the power in W. It retrieves the power value from the power meter.

- `energy` is a property that measures the energy in J. It retrieves the energy value from the power meter.

- `_set_flags` is a method that retrieves sensor information and writes flags based on the response from the power meter.

To use this script, you would need to create an instance of the `ThorlabsPM100USB` class and provide the appropriate adapter for communication with the power meter.