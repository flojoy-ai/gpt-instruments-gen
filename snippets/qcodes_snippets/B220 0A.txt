Here is a Python script that uses Qcodes to connect to a B2200A Switch:

```python
from qcodes.instrument.visa import VisaInstrument

class B2200A(VisaInstrument):
    def __init__(self, name, address, **kwargs):
        super().__init__(name, address, terminator='\n', **kwargs)
        
        self.add_parameter(name='connections',
                           get_cmd=':CLOS:CARD?',
                           get_parser=self.parse_channel_list,
                           docstring='queries currently active connections and returns a set of tuples {(input, output), ...}'
                           )
        
        self.add_parameter(name='connection_rule',
                           get_cmd=':CONN:RULE?',
                           set_cmd=':CONN:RULE {}',
                           val_mapping={'free': 'FREE', 'single': 'SROU'},
                           docstring=("specifies connection rule. Parameter one of 'free' (default) or 'single'.\n\n"
                                      "In 'free' mode\n"
                                      " - each input port can be connected to multiple output ports\n"
                                      " - and each output port can be connected to multiple input ports.\n"
                                      " - Caution: If the Free connection rule has been specified, ensure multiple "
                                      "input ports are not connected to the same output port. Such configurations "
                                      "can cause damage\n\n"
                                      "In single route mode:\n"
                                      " - each input port can be connected to only one output port\n"
                                      " - and each output port can be connected to only one input port.\n"
                                      " - existing connection to a port will be disconnected when a new connection is made.\n"
                                      )
                           )
        
        self.connect_message()
    
    def parse_channel_list(self, channel_list):
        pattern = r"(?P<card>\d{0,1}?)(?P<input>\d{1,2})(?P<output>\d{2})(?=(?:[,\)\r\n]|$))"
        return {(int(match["input"]), int(match["output"])) for match in re.finditer(pattern, channel_list)}
```

Note: This script only includes the necessary code to connect to a B2200A Switch and retrieve the active connections and connection rule.