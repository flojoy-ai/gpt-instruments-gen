Sure! Here's an example of a Python script that uses Qcodes Community to connect to a Kelvinox:

```python
import qcodes as qc
from qcodes.instrument_drivers.qblox import Kelvinox_100

# Connect to the Kelvinox
kelvinox = Kelvinox_100.KeystoneKelvinox100('kelvinox', 'ASRLCOM3::INSTR')

# Print the instrument ID
print(kelvinox.IDN())

# Set the temperature to 1 Kelvin
kelvinox.temperature(1)

# Close the connection
kelvinox.close()
```

In this example, we import the necessary modules from Qcodes and specifically import the `Kelvinox_100` driver from the `qblox` package. We then create an instance of the `Kelvinox_100` class, passing the instrument name and the connection string as arguments.

We can then use the various methods and properties of the `Kelvinox_100` class to interact with the instrument. In this example, we print the instrument ID using the `IDN()` method, set the temperature to 1 Kelvin using the `temperature()` method, and finally close the connection using the `close()` method.

Note that you may need to modify the connection string (`ASRLCOM3::INSTR`) to match the actual connection details of your Kelvinox instrument.